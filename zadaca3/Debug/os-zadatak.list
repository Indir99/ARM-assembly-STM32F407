
os-zadatak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800b0e0  0800b0e0  0001b0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5dc  0800b5dc  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5dc  0800b5dc  0001b5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5e4  0800b5e4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5e4  0800b5e4  0001b5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5e8  0800b5e8  0001b5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b5ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004188  20000204  0800b7f0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000438c  0800b7f0  0002438c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a24c  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cda  00000000  00000000  0003a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0003e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273a1  00000000  00000000  00040a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161dd  00000000  00000000  00067e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e85f2  00000000  00000000  0007dfe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001665d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bf4  00000000  00000000  0016662c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b0c4 	.word	0x0800b0c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	0800b0c4 	.word	0x0800b0c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b9a4 	b.w	8000fb8 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9d08      	ldr	r5, [sp, #32]
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	468c      	mov	ip, r1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8083 	bne.w	8000e0a <__udivmoddi4+0x116>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4617      	mov	r7, r2
 8000d08:	d947      	bls.n	8000d9a <__udivmoddi4+0xa6>
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	b142      	cbz	r2, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	f1c2 0020 	rsb	r0, r2, #32
 8000d14:	fa24 f000 	lsr.w	r0, r4, r0
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	4097      	lsls	r7, r2
 8000d1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d20:	4094      	lsls	r4, r2
 8000d22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d26:	0c23      	lsrs	r3, r4, #16
 8000d28:	fbbc f6f8 	udiv	r6, ip, r8
 8000d2c:	fa1f fe87 	uxth.w	lr, r7
 8000d30:	fb08 c116 	mls	r1, r8, r6, ip
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb06 f10e 	mul.w	r1, r6, lr
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x60>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d46:	f080 8119 	bcs.w	8000f7c <__udivmoddi4+0x288>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 8116 	bls.w	8000f7c <__udivmoddi4+0x288>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0x8c>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d72:	f080 8105 	bcs.w	8000f80 <__udivmoddi4+0x28c>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f240 8102 	bls.w	8000f80 <__udivmoddi4+0x28c>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	443c      	add	r4, r7
 8000d80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d84:	eba4 040e 	sub.w	r4, r4, lr
 8000d88:	2600      	movs	r6, #0
 8000d8a:	b11d      	cbz	r5, 8000d94 <__udivmoddi4+0xa0>
 8000d8c:	40d4      	lsrs	r4, r2
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e9c5 4300 	strd	r4, r3, [r5]
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xaa>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f282 	clz	r2, r2
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	d150      	bne.n	8000e48 <__udivmoddi4+0x154>
 8000da6:	1bcb      	subs	r3, r1, r7
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	fa1f f887 	uxth.w	r8, r7
 8000db0:	2601      	movs	r6, #1
 8000db2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000db6:	0c21      	lsrs	r1, r4, #16
 8000db8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc0:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0xe4>
 8000dc8:	1879      	adds	r1, r7, r1
 8000dca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0xe2>
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	f200 80e9 	bhi.w	8000fa8 <__udivmoddi4+0x2b4>
 8000dd6:	4684      	mov	ip, r0
 8000dd8:	1ac9      	subs	r1, r1, r3
 8000dda:	b2a3      	uxth	r3, r4
 8000ddc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000de8:	fb08 f800 	mul.w	r8, r8, r0
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x10c>
 8000df0:	193c      	adds	r4, r7, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x10a>
 8000df8:	45a0      	cmp	r8, r4
 8000dfa:	f200 80d9 	bhi.w	8000fb0 <__udivmoddi4+0x2bc>
 8000dfe:	4618      	mov	r0, r3
 8000e00:	eba4 0408 	sub.w	r4, r4, r8
 8000e04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e08:	e7bf      	b.n	8000d8a <__udivmoddi4+0x96>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d909      	bls.n	8000e22 <__udivmoddi4+0x12e>
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	f000 80b1 	beq.w	8000f76 <__udivmoddi4+0x282>
 8000e14:	2600      	movs	r6, #0
 8000e16:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	fab3 f683 	clz	r6, r3
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d14a      	bne.n	8000ec0 <__udivmoddi4+0x1cc>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0x140>
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	f200 80b8 	bhi.w	8000fa4 <__udivmoddi4+0x2b0>
 8000e34:	1a84      	subs	r4, r0, r2
 8000e36:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	d0a8      	beq.n	8000d94 <__udivmoddi4+0xa0>
 8000e42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0xa0>
 8000e48:	f1c2 0320 	rsb	r3, r2, #32
 8000e4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e50:	4097      	lsls	r7, r2
 8000e52:	fa01 f002 	lsl.w	r0, r1, r2
 8000e56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5a:	40d9      	lsrs	r1, r3
 8000e5c:	4330      	orrs	r0, r6
 8000e5e:	0c03      	lsrs	r3, r0, #16
 8000e60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e64:	fa1f f887 	uxth.w	r8, r7
 8000e68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e70:	fb06 f108 	mul.w	r1, r6, r8
 8000e74:	4299      	cmp	r1, r3
 8000e76:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x19c>
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e82:	f080 808d 	bcs.w	8000fa0 <__udivmoddi4+0x2ac>
 8000e86:	4299      	cmp	r1, r3
 8000e88:	f240 808a 	bls.w	8000fa0 <__udivmoddi4+0x2ac>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	443b      	add	r3, r7
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	b281      	uxth	r1, r0
 8000e94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea0:	fb00 f308 	mul.w	r3, r0, r8
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x1c4>
 8000ea8:	1879      	adds	r1, r7, r1
 8000eaa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eae:	d273      	bcs.n	8000f98 <__udivmoddi4+0x2a4>
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d971      	bls.n	8000f98 <__udivmoddi4+0x2a4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4439      	add	r1, r7
 8000eb8:	1acb      	subs	r3, r1, r3
 8000eba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ebe:	e778      	b.n	8000db2 <__udivmoddi4+0xbe>
 8000ec0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ec8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ecc:	431c      	orrs	r4, r3
 8000ece:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ed6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	0c3b      	lsrs	r3, r7, #16
 8000ee2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee6:	fa1f f884 	uxth.w	r8, r4
 8000eea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ef6:	458a      	cmp	sl, r1
 8000ef8:	fa02 f206 	lsl.w	r2, r2, r6
 8000efc:	fa00 f306 	lsl.w	r3, r0, r6
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x220>
 8000f02:	1861      	adds	r1, r4, r1
 8000f04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f08:	d248      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	d946      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	4421      	add	r1, r4
 8000f14:	eba1 010a 	sub.w	r1, r1, sl
 8000f18:	b2bf      	uxth	r7, r7
 8000f1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f22:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f26:	fb00 f808 	mul.w	r8, r0, r8
 8000f2a:	45b8      	cmp	r8, r7
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x24a>
 8000f2e:	19e7      	adds	r7, r4, r7
 8000f30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f34:	d22e      	bcs.n	8000f94 <__udivmoddi4+0x2a0>
 8000f36:	45b8      	cmp	r8, r7
 8000f38:	d92c      	bls.n	8000f94 <__udivmoddi4+0x2a0>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	4427      	add	r7, r4
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	eba7 0708 	sub.w	r7, r7, r8
 8000f46:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4a:	454f      	cmp	r7, r9
 8000f4c:	46c6      	mov	lr, r8
 8000f4e:	4649      	mov	r1, r9
 8000f50:	d31a      	bcc.n	8000f88 <__udivmoddi4+0x294>
 8000f52:	d017      	beq.n	8000f84 <__udivmoddi4+0x290>
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x27a>
 8000f56:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f5e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f62:	40f2      	lsrs	r2, r6
 8000f64:	ea4c 0202 	orr.w	r2, ip, r2
 8000f68:	40f7      	lsrs	r7, r6
 8000f6a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f6e:	2600      	movs	r6, #0
 8000f70:	4631      	mov	r1, r6
 8000f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f76:	462e      	mov	r6, r5
 8000f78:	4628      	mov	r0, r5
 8000f7a:	e70b      	b.n	8000d94 <__udivmoddi4+0xa0>
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	e6e9      	b.n	8000d54 <__udivmoddi4+0x60>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e6fd      	b.n	8000d80 <__udivmoddi4+0x8c>
 8000f84:	4543      	cmp	r3, r8
 8000f86:	d2e5      	bcs.n	8000f54 <__udivmoddi4+0x260>
 8000f88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f8c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7df      	b.n	8000f54 <__udivmoddi4+0x260>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e7d2      	b.n	8000f3e <__udivmoddi4+0x24a>
 8000f98:	4660      	mov	r0, ip
 8000f9a:	e78d      	b.n	8000eb8 <__udivmoddi4+0x1c4>
 8000f9c:	4681      	mov	r9, r0
 8000f9e:	e7b9      	b.n	8000f14 <__udivmoddi4+0x220>
 8000fa0:	4666      	mov	r6, ip
 8000fa2:	e775      	b.n	8000e90 <__udivmoddi4+0x19c>
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e74a      	b.n	8000e3e <__udivmoddi4+0x14a>
 8000fa8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fac:	4439      	add	r1, r7
 8000fae:	e713      	b.n	8000dd8 <__udivmoddi4+0xe4>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	443c      	add	r4, r7
 8000fb4:	e724      	b.n	8000e00 <__udivmoddi4+0x10c>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <vApplicationGetIdleTaskMemory+0x30>)
 8000fd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000220 	.word	0x20000220
 8000fec:	20000274 	.word	0x20000274

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b09e      	sub	sp, #120	; 0x78
 8000ff4:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f001 f8d9 	bl	80021ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f875 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 fa21 	bl	8001444 <MX_GPIO_Init>
  MX_DAC_Init();
 8001002:	f000 f94b 	bl	800129c <MX_DAC_Init>
  MX_USART1_UART_Init();
 8001006:	f000 f9f3 	bl	80013f0 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 800100a:	f000 f8d9 	bl	80011c0 <MX_ADC2_Init>
  MX_TIM3_Init();
 800100e:	f000 f979 	bl	8001304 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexADC */
  osMutexDef(MutexADC);
 8001012:	2300      	movs	r3, #0
 8001014:	673b      	str	r3, [r7, #112]	; 0x70
 8001016:	2300      	movs	r3, #0
 8001018:	677b      	str	r3, [r7, #116]	; 0x74
  MutexADCHandle = osMutexCreate(osMutex(MutexADC));
 800101a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800101e:	4618      	mov	r0, r3
 8001020:	f004 fc19 	bl	8005856 <osMutexCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <main+0xd4>)
 8001028:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(LevelTask, StartTask1, osPriorityAboveNormal, 0, 128);
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <main+0xd8>)
 800102c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001030:	461d      	mov	r5, r3
 8001032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001036:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LevelTaskHandle = osThreadCreate(osThread(LevelTask), NULL);
 800103e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fba6 	bl	8005796 <osThreadCreate>
 800104a:	4603      	mov	r3, r0
 800104c:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <main+0xdc>)
 800104e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(TempTask, StartTask2, osPriorityHigh, 0, 128);
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <main+0xe0>)
 8001052:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001056:	461d      	mov	r5, r3
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempTaskHandle = osThreadCreate(osThread(TempTask), NULL);
 8001064:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fb93 	bl	8005796 <osThreadCreate>
 8001070:	4603      	mov	r3, r0
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <main+0xe4>)
 8001074:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(pHTask, StartTask3, osPriorityRealtime, 0, 128);
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <main+0xe8>)
 8001078:	f107 041c 	add.w	r4, r7, #28
 800107c:	461d      	mov	r5, r3
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pHTaskHandle = osThreadCreate(osThread(pHTask), NULL);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f004 fb80 	bl	8005796 <osThreadCreate>
 8001096:	4603      	mov	r3, r0
 8001098:	4a10      	ldr	r2, [pc, #64]	; (80010dc <main+0xec>)
 800109a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task4 */
  osThreadDef(ComTask, StartTask4, osPriorityLow, 0, 128);
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <main+0xf0>)
 800109e:	463c      	mov	r4, r7
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ComTaskHandle = osThreadCreate(osThread(ComTask), NULL);
 80010ae:	463b      	mov	r3, r7
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fb6f 	bl	8005796 <osThreadCreate>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <main+0xf4>)
 80010bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010be:	f004 fb53 	bl	8005768 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 // HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adcValue, 3);

	while (1)
 80010c2:	e7fe      	b.n	80010c2 <main+0xd2>
 80010c4:	20004218 	.word	0x20004218
 80010c8:	0800b108 	.word	0x0800b108
 80010cc:	200042a8 	.word	0x200042a8
 80010d0:	0800b124 	.word	0x0800b124
 80010d4:	2000430c 	.word	0x2000430c
 80010d8:	0800b140 	.word	0x0800b140
 80010dc:	20004300 	.word	0x20004300
 80010e0:	0800b15c 	.word	0x0800b15c
 80010e4:	20004310 	.word	0x20004310

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	; 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 ff58 	bl	8007fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <SystemClock_Config+0xd0>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <SystemClock_Config+0xd0>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <SystemClock_Config+0xd0>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <SystemClock_Config+0xd4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <SystemClock_Config+0xd4>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <SystemClock_Config+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2310      	movs	r3, #16
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001154:	2302      	movs	r3, #2
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001158:	2300      	movs	r3, #0
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800115c:	2308      	movs	r3, #8
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001160:	23a8      	movs	r3, #168	; 0xa8
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001164:	2304      	movs	r3, #4
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001168:	2307      	movs	r3, #7
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f002 f965 	bl	8003440 <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800117c:	f000 fcc0 	bl	8001b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800118c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001192:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001196:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2102      	movs	r1, #2
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fb90 	bl	80038c4 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011aa:	f000 fca9 	bl	8001b00 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <MX_ADC2_Init+0xd0>)
 80011d4:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <MX_ADC2_Init+0xd4>)
 80011d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <MX_ADC2_Init+0xd0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <MX_ADC2_Init+0xd0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <MX_ADC2_Init+0xd0>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <MX_ADC2_Init+0xd0>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <MX_ADC2_Init+0xd0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MX_ADC2_Init+0xd0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <MX_ADC2_Init+0xd0>)
 8001200:	4a25      	ldr	r2, [pc, #148]	; (8001298 <MX_ADC2_Init+0xd8>)
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_ADC2_Init+0xd0>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <MX_ADC2_Init+0xd0>)
 800120c:	2203      	movs	r2, #3
 800120e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_ADC2_Init+0xd0>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_ADC2_Init+0xd0>)
 800121a:	2201      	movs	r2, #1
 800121c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <MX_ADC2_Init+0xd0>)
 8001220:	f001 f806 	bl	8002230 <HAL_ADC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800122a:	f000 fc69 	bl	8001b00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800122e:	2306      	movs	r3, #6
 8001230:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001236:	2307      	movs	r3, #7
 8001238:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_ADC2_Init+0xd0>)
 8001240:	f001 fb24 	bl	800288c <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800124a:	f000 fc59 	bl	8001b00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800124e:	2307      	movs	r3, #7
 8001250:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_ADC2_Init+0xd0>)
 800125c:	f001 fb16 	bl	800288c <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001266:	f000 fc4b 	bl	8001b00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800126a:	2308      	movs	r3, #8
 800126c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800126e:	2303      	movs	r3, #3
 8001270:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_ADC2_Init+0xd0>)
 8001278:	f001 fb08 	bl	800288c <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8001282:	f000 fc3d 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20004220 	.word	0x20004220
 8001294:	40012100 	.word	0x40012100
 8001298:	0f000001 	.word	0x0f000001

0800129c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_DAC_Init+0x60>)
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <MX_DAC_Init+0x64>)
 80012ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012b0:	4812      	ldr	r0, [pc, #72]	; (80012fc <MX_DAC_Init+0x60>)
 80012b2:	f001 fe05 	bl	8002ec0 <HAL_DAC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012bc:	f000 fc20 	bl	8001b00 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_DAC_Init+0x60>)
 80012d0:	f001 fe6c 	bl	8002fac <HAL_DAC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012da:	f000 fc11 	bl	8001b00 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2210      	movs	r2, #16
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_DAC_Init+0x60>)
 80012e6:	f001 fe61 	bl	8002fac <HAL_DAC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80012f0:	f000 fc06 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200042ec 	.word	0x200042ec
 8001300:	40007400 	.word	0x40007400

08001304 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	; 0x38
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <MX_TIM3_Init+0xe4>)
 8001336:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <MX_TIM3_Init+0xe8>)
 8001338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <MX_TIM3_Init+0xe4>)
 800133c:	2253      	movs	r2, #83	; 0x53
 800133e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MX_TIM3_Init+0xe4>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <MX_TIM3_Init+0xe4>)
 8001348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800134c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <MX_TIM3_Init+0xe4>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <MX_TIM3_Init+0xe4>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800135a:	4823      	ldr	r0, [pc, #140]	; (80013e8 <MX_TIM3_Init+0xe4>)
 800135c:	f002 fcdc 	bl	8003d18 <HAL_TIM_Base_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001366:	f000 fbcb 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001374:	4619      	mov	r1, r3
 8001376:	481c      	ldr	r0, [pc, #112]	; (80013e8 <MX_TIM3_Init+0xe4>)
 8001378:	f002 ff5e 	bl	8004238 <HAL_TIM_ConfigClockSource>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001382:	f000 fbbd 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001386:	4818      	ldr	r0, [pc, #96]	; (80013e8 <MX_TIM3_Init+0xe4>)
 8001388:	f002 fd15 	bl	8003db6 <HAL_TIM_PWM_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001392:	f000 fbb5 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	4619      	mov	r1, r3
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <MX_TIM3_Init+0xe4>)
 80013a6:	f003 fb42 	bl	8004a2e <HAL_TIMEx_MasterConfigSynchronization>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013b0:	f000 fba6 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b4:	2360      	movs	r3, #96	; 0x60
 80013b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <MX_TIM3_Init+0xe4>)
 80013cc:	f002 fe6e 	bl	80040ac <HAL_TIM_PWM_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013d6:	f000 fb93 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <MX_TIM3_Init+0xe4>)
 80013dc:	f000 fc9a 	bl	8001d14 <HAL_TIM_MspPostInit>

}
 80013e0:	bf00      	nop
 80013e2:	3738      	adds	r7, #56	; 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20004268 	.word	0x20004268
 80013ec:	40000400 	.word	0x40000400

080013f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART1_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_USART1_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_USART1_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART1_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART1_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART1_UART_Init+0x4c>)
 8001428:	f003 fb5a 	bl	8004ae0 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f000 fb65 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200042ac 	.word	0x200042ac
 8001440:	40011000 	.word	0x40011000

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_GPIO_Init+0x68>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a16      	ldr	r2, [pc, #88]	; (80014ac <MX_GPIO_Init+0x68>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_GPIO_Init+0x68>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_GPIO_Init+0x68>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <MX_GPIO_Init+0x68>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_GPIO_Init+0x68>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_GPIO_Init+0x68>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <MX_GPIO_Init+0x68>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_GPIO_Init+0x68>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <pwm>:
  * @retval None
  */


// Impulsno sirinska modulacija
void pwm(uint16_t val){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]

		TIM_OC_InitTypeDef sConfigOC;
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ba:	2360      	movs	r3, #96	; 0x60
 80014bc:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = val;
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2200      	movs	r2, #0
 80014d0:	4619      	mov	r1, r3
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <pwm+0x38>)
 80014d4:	f002 fdea 	bl	80040ac <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014d8:	2100      	movs	r1, #0
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <pwm+0x38>)
 80014dc:	f002 fca0 	bl	8003e20 <HAL_TIM_PWM_Start>
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20004268 	.word	0x20004268

080014ec <StartTask1>:

/* USER CODE END Header_StartTask1 - odnosi se na nivo vode */
void StartTask1(void const * argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	; 0x30
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	ADC_ChannelConfTypeDef sConfig = {0};
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
	static float uk_1 = 0;
	uint16_t izmjereniLevel;  //privremena varijabla

	while(1)
  {
		int start = osKernelSysTick();
 8001502:	f004 f938 	bl	8005776 <osKernelSysTick>
 8001506:	4603      	mov	r3, r0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(status == osOK)
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <StartTask1+0x13c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d131      	bne.n	8001576 <StartTask1+0x8a>
			{
			    //Koristenje mutex-a
				status = osMutexWait(MutexADCHandle,2000);
 8001512:	4b46      	ldr	r3, [pc, #280]	; (800162c <StartTask1+0x140>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800151a:	4618      	mov	r0, r3
 800151c:	f004 f9b4 	bl	8005888 <osMutexWait>
 8001520:	4603      	mov	r3, r0
 8001522:	4a41      	ldr	r2, [pc, #260]	; (8001628 <StartTask1+0x13c>)
 8001524:	6013      	str	r3, [r2, #0]
				//setovanje kanala za ADC -> u ovom slucaju koristimo kanal 6
				sConfig.Channel = ADC_CHANNEL_6;
 8001526:	2306      	movs	r3, #6
 8001528:	60fb      	str	r3, [r7, #12]
				sConfig.Rank = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]

				if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4619      	mov	r1, r3
 8001534:	483e      	ldr	r0, [pc, #248]	; (8001630 <StartTask1+0x144>)
 8001536:	f001 f9a9 	bl	800288c <HAL_ADC_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <StartTask1+0x58>
					Error_Handler();
 8001540:	f000 fade 	bl	8001b00 <Error_Handler>

				HAL_ADC_Start(&hadc2);
 8001544:	483a      	ldr	r0, [pc, #232]	; (8001630 <StartTask1+0x144>)
 8001546:	f000 feb7 	bl	80022b8 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2,10UL);
 800154a:	210a      	movs	r1, #10
 800154c:	4838      	ldr	r0, [pc, #224]	; (8001630 <StartTask1+0x144>)
 800154e:	f000 ffac 	bl	80024aa <HAL_ADC_PollForConversion>
				// u adcValue smijestamo vrijednost sa ADC -> senzor nivoa
				adcValue[0]=HAL_ADC_GetValue(&hadc2);
 8001552:	4837      	ldr	r0, [pc, #220]	; (8001630 <StartTask1+0x144>)
 8001554:	f001 f96e 	bl	8002834 <HAL_ADC_GetValue>
 8001558:	4603      	mov	r3, r0
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b35      	ldr	r3, [pc, #212]	; (8001634 <StartTask1+0x148>)
 800155e:	801a      	strh	r2, [r3, #0]
				HAL_ADC_Stop(&hadc2);
 8001560:	4833      	ldr	r0, [pc, #204]	; (8001630 <StartTask1+0x144>)
 8001562:	f000 ff6f 	bl	8002444 <HAL_ADC_Stop>
				status = osMutexRelease(MutexADCHandle);
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <StartTask1+0x140>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f004 f9da 	bl	8005924 <osMutexRelease>
 8001570:	4603      	mov	r3, r0
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <StartTask1+0x13c>)
 8001574:	6013      	str	r3, [r2, #0]
			bufferZaSlanjeLevel[4-i] = (adcValue[0] % 10)+48;
			adcValue[0]/=10;
		}
		*/
		// Primjena formula
			izmjereniLevel = adcValue[0];
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <StartTask1+0x148>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	857b      	strh	r3, [r7, #42]	; 0x2a
			float ek = max_level - izmjereniLevel; //racunanje regulacione greske
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <StartTask1+0x14c>)
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001590:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float uk = uk_1 + b0 * ek + b1 * ek_1 + b2 * ek_2; //racunanje upravljackog signala
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <StartTask1+0x150>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800159e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <StartTask1+0x154>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <StartTask1+0x158>)
 80015ae:	edd3 6a00 	vldr	s13, [r3]
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <StartTask1+0x15c>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <StartTask1+0x160>)
 80015c2:	edd3 6a00 	vldr	s13, [r3]
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <StartTask1+0x164>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	edc7 7a08 	vstr	s15, [r7, #32]
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, uk);
 80015d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80015dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e0:	ee17 3a90 	vmov	r3, s15
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	481a      	ldr	r0, [pc, #104]	; (8001654 <StartTask1+0x168>)
 80015ea:	f001 fd2c 	bl	8003046 <HAL_DAC_SetValue>
			ek_2 = ek_1;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <StartTask1+0x15c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <StartTask1+0x164>)
 80015f4:	6013      	str	r3, [r2, #0]
			ek_1 = ek;
 80015f6:	4a14      	ldr	r2, [pc, #80]	; (8001648 <StartTask1+0x15c>)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	6013      	str	r3, [r2, #0]
			uk_1 = uk;
 80015fc:	4a10      	ldr	r2, [pc, #64]	; (8001640 <StartTask1+0x154>)
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	6013      	str	r3, [r2, #0]
		bufferZaSlanjeLevel[5] = '\n';
		bufferZaSlanjeLevel[0] = 'L';
		HAL_UART_Transmit(&huart1,bufferZaSlanjeLevel,6,100);
		*/

			int end = osKernelSysTick();
 8001602:	f004 f8b8 	bl	8005776 <osKernelSysTick>
 8001606:	4603      	mov	r3, r0
 8001608:	61fb      	str	r3, [r7, #28]
			Ltimestamp = end-start;
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	461a      	mov	r2, r3
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <StartTask1+0x16c>)
 8001614:	601a      	str	r2, [r3, #0]
			osDelay(100 - Ltimestamp);
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <StartTask1+0x16c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800161e:	4618      	mov	r0, r3
 8001620:	f004 f905 	bl	800582e <osDelay>
  {
 8001624:	e76d      	b.n	8001502 <StartTask1+0x16>
 8001626:	bf00      	nop
 8001628:	20000474 	.word	0x20000474
 800162c:	20004218 	.word	0x20004218
 8001630:	20004220 	.word	0x20004220
 8001634:	20004330 	.word	0x20004330
 8001638:	20000478 	.word	0x20000478
 800163c:	20000000 	.word	0x20000000
 8001640:	20000490 	.word	0x20000490
 8001644:	20000004 	.word	0x20000004
 8001648:	20000494 	.word	0x20000494
 800164c:	20000008 	.word	0x20000008
 8001650:	20000498 	.word	0x20000498
 8001654:	200042ec 	.word	0x200042ec
 8001658:	20004308 	.word	0x20004308

0800165c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 -> odnosi se na temperaturu */
void StartTask2(void const * argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN */
  /* Infinite loop */
	//koeficijenti za proracun greske, regulacionog signala i relejnog upravljanja
	ADC_ChannelConfTypeDef sConfig = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
	static float uk_1 = 0;
	uint16_t temperaturaIzmjerena;

	while(1)
  {
		int start = osKernelSysTick();
 8001672:	f004 f880 	bl	8005776 <osKernelSysTick>
 8001676:	4603      	mov	r3, r0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(status == osOK)
 800167a:	4b45      	ldr	r3, [pc, #276]	; (8001790 <StartTask2+0x134>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d12e      	bne.n	80016e0 <StartTask2+0x84>
			{
			   //Kao i u prethodnoj funkciji, setujemo mutex
				status = osMutexWait(MutexADCHandle,2000);
 8001682:	4b44      	ldr	r3, [pc, #272]	; (8001794 <StartTask2+0x138>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800168a:	4618      	mov	r0, r3
 800168c:	f004 f8fc 	bl	8005888 <osMutexWait>
 8001690:	4603      	mov	r3, r0
 8001692:	4a3f      	ldr	r2, [pc, #252]	; (8001790 <StartTask2+0x134>)
 8001694:	6013      	str	r3, [r2, #0]
				// Sada mijenjamo ADC kanal na 7 -> za mjerenje temperatuje
				sConfig.Channel = ADC_CHANNEL_7;
 8001696:	2307      	movs	r3, #7
 8001698:	60fb      	str	r3, [r7, #12]
				sConfig.Rank = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	613b      	str	r3, [r7, #16]

				if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	4619      	mov	r1, r3
 80016a4:	483c      	ldr	r0, [pc, #240]	; (8001798 <StartTask2+0x13c>)
 80016a6:	f001 f8f1 	bl	800288c <HAL_ADC_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <StartTask2+0x58>
					Error_Handler();
 80016b0:	f000 fa26 	bl	8001b00 <Error_Handler>

				HAL_ADC_Start(&hadc2);
 80016b4:	4838      	ldr	r0, [pc, #224]	; (8001798 <StartTask2+0x13c>)
 80016b6:	f000 fdff 	bl	80022b8 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2,10UL);
 80016ba:	210a      	movs	r1, #10
 80016bc:	4836      	ldr	r0, [pc, #216]	; (8001798 <StartTask2+0x13c>)
 80016be:	f000 fef4 	bl	80024aa <HAL_ADC_PollForConversion>
				adcValue[1]=HAL_ADC_GetValue(&hadc2); //citamo vrijednost sa ADC i smijestamo u adcValue
 80016c2:	4835      	ldr	r0, [pc, #212]	; (8001798 <StartTask2+0x13c>)
 80016c4:	f001 f8b6 	bl	8002834 <HAL_ADC_GetValue>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <StartTask2+0x140>)
 80016ce:	805a      	strh	r2, [r3, #2]
				status = osMutexRelease(MutexADCHandle);
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <StartTask2+0x138>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f004 f925 	bl	8005924 <osMutexRelease>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <StartTask2+0x134>)
 80016de:	6013      	str	r3, [r2, #0]
			bufferZaSlanjeTemp[4-i] = (adcValue[1] % 10)+48;
			adcValue[1]/=10;
		}
		*/

		temperaturaIzmjerena = adcValue[1];
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <StartTask2+0x140>)
 80016e2:	885b      	ldrh	r3, [r3, #2]
 80016e4:	857b      	strh	r3, [r7, #42]	; 0x2a
		float ek = max_temp - temperaturaIzmjerena; //racunanje regulacione greske
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <StartTask2+0x144>)
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float uk = uk_1 + b0 * ek + b1 * ek_1 + b2 * ek_2; //racunanje upravljackog signala
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <StartTask2+0x148>)
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <StartTask2+0x14c>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <StartTask2+0x150>)
 8001718:	edd3 6a00 	vldr	s13, [r3]
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <StartTask2+0x154>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <StartTask2+0x158>)
 800172c:	edd3 6a00 	vldr	s13, [r3]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <StartTask2+0x15c>)
 8001732:	edd3 7a00 	vldr	s15, [r3]
 8001736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	edc7 7a08 	vstr	s15, [r7, #32]

		pwm(uk);
 8001742:	edd7 7a08 	vldr	s15, [r7, #32]
 8001746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174a:	ee17 3a90 	vmov	r3, s15
 800174e:	b29b      	uxth	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fead 	bl	80014b0 <pwm>
		ek_2 = ek_1;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <StartTask2+0x154>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <StartTask2+0x15c>)
 800175c:	6013      	str	r3, [r2, #0]
		ek_1 = ek;
 800175e:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <StartTask2+0x154>)
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	6013      	str	r3, [r2, #0]
		uk_1 = uk;
 8001764:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <StartTask2+0x14c>)
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	6013      	str	r3, [r2, #0]
		bufferZaSlanjeTemp[5] = '\n';
		bufferZaSlanjeTemp[0] = 'T';
		HAL_UART_Transmit(&huart1,bufferZaSlanjeTemp,6,100);
		*/

		int end = osKernelSysTick();
 800176a:	f004 f804 	bl	8005776 <osKernelSysTick>
 800176e:	4603      	mov	r3, r0
 8001770:	61fb      	str	r3, [r7, #28]
		Ttimestamp = end - start;
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	461a      	mov	r2, r3
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <StartTask2+0x160>)
 800177c:	601a      	str	r2, [r3, #0]
		osDelay(70 - Ttimestamp);
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <StartTask2+0x160>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f1c3 0346 	rsb	r3, r3, #70	; 0x46
 8001786:	4618      	mov	r0, r3
 8001788:	f004 f851 	bl	800582e <osDelay>
  {
 800178c:	e771      	b.n	8001672 <StartTask2+0x16>
 800178e:	bf00      	nop
 8001790:	20000474 	.word	0x20000474
 8001794:	20004218 	.word	0x20004218
 8001798:	20004220 	.word	0x20004220
 800179c:	20004330 	.word	0x20004330
 80017a0:	20000480 	.word	0x20000480
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	2000049c 	.word	0x2000049c
 80017ac:	20000010 	.word	0x20000010
 80017b0:	200004a0 	.word	0x200004a0
 80017b4:	20000014 	.word	0x20000014
 80017b8:	200004a4 	.word	0x200004a4
 80017bc:	2000420c 	.word	0x2000420c

080017c0 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 -> odnosi se na ph vrijednost */
void StartTask3(void const * argument)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	static float ek_1 = 0;// e(k-1)
	static float ek_2 = 0;// e(k-2)
	static float uk_1 = 0;// u(k-1)
	uint16_t phIzmjerena;

	ADC_ChannelConfTypeDef sConfig = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
	while(1)
  {
		int start = osKernelSysTick();
 80017d6:	f003 ffce 	bl	8005776 <osKernelSysTick>
 80017da:	4603      	mov	r3, r0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(status == osOK)
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <StartTask3+0x134>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d12e      	bne.n	8001844 <StartTask3+0x84>
			{
			//Mutex
				status = osMutexWait(MutexADCHandle,2000);
 80017e6:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <StartTask3+0x138>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 f84a 	bl	8005888 <osMutexWait>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a3f      	ldr	r2, [pc, #252]	; (80018f4 <StartTask3+0x134>)
 80017f8:	6013      	str	r3, [r2, #0]
			//Setujemo kanal na ADC-u
				sConfig.Channel = ADC_CHANNEL_8;
 80017fa:	2308      	movs	r3, #8
 80017fc:	60fb      	str	r3, [r7, #12]
				sConfig.Rank = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	613b      	str	r3, [r7, #16]

				if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4619      	mov	r1, r3
 8001808:	483c      	ldr	r0, [pc, #240]	; (80018fc <StartTask3+0x13c>)
 800180a:	f001 f83f 	bl	800288c <HAL_ADC_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <StartTask3+0x58>
					Error_Handler();
 8001814:	f000 f974 	bl	8001b00 <Error_Handler>

				HAL_ADC_Start(&hadc2);
 8001818:	4838      	ldr	r0, [pc, #224]	; (80018fc <StartTask3+0x13c>)
 800181a:	f000 fd4d 	bl	80022b8 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2,10UL);
 800181e:	210a      	movs	r1, #10
 8001820:	4836      	ldr	r0, [pc, #216]	; (80018fc <StartTask3+0x13c>)
 8001822:	f000 fe42 	bl	80024aa <HAL_ADC_PollForConversion>
				adcValue[2]=HAL_ADC_GetValue(&hadc2); //citamo vrijednost sa ADC-a
 8001826:	4835      	ldr	r0, [pc, #212]	; (80018fc <StartTask3+0x13c>)
 8001828:	f001 f804 	bl	8002834 <HAL_ADC_GetValue>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <StartTask3+0x140>)
 8001832:	809a      	strh	r2, [r3, #4]
				status = osMutexRelease(MutexADCHandle);
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <StartTask3+0x138>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f004 f873 	bl	8005924 <osMutexRelease>
 800183e:	4603      	mov	r3, r0
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <StartTask3+0x134>)
 8001842:	6013      	str	r3, [r2, #0]
			}

			phIzmjerena = adcValue[2];
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <StartTask3+0x140>)
 8001846:	889b      	ldrh	r3, [r3, #4]
 8001848:	857b      	strh	r3, [r7, #42]	; 0x2a
			float ek = max_pH - phIzmjerena; //racunanje regulacione greske
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <StartTask3+0x144>)
 800184c:	ed93 7a00 	vldr	s14, [r3]
 8001850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float uk = uk_1 + b0 * ek + b1 * ek_1 + b2 * ek_2; // racunanje upravljackog signala
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <StartTask3+0x148>)
 8001864:	ed93 7a00 	vldr	s14, [r3]
 8001868:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800186c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <StartTask3+0x14c>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <StartTask3+0x150>)
 800187c:	edd3 6a00 	vldr	s13, [r3]
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <StartTask3+0x154>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <StartTask3+0x158>)
 8001890:	edd3 6a00 	vldr	s13, [r3]
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <StartTask3+0x15c>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	edc7 7a08 	vstr	s15, [r7, #32]
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, uk);
 80018a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80018aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ae:	ee17 3a90 	vmov	r3, s15
 80018b2:	2200      	movs	r2, #0
 80018b4:	2110      	movs	r1, #16
 80018b6:	481a      	ldr	r0, [pc, #104]	; (8001920 <StartTask3+0x160>)
 80018b8:	f001 fbc5 	bl	8003046 <HAL_DAC_SetValue>
			ek_2 = ek_1;
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <StartTask3+0x154>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a16      	ldr	r2, [pc, #88]	; (800191c <StartTask3+0x15c>)
 80018c2:	6013      	str	r3, [r2, #0]
			ek_1 = ek;
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <StartTask3+0x154>)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	6013      	str	r3, [r2, #0]
			uk_1 = uk;
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <StartTask3+0x14c>)
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	6013      	str	r3, [r2, #0]
		bufferZaSlanjePH[5] = '\n';
		bufferZaSlanjePH[0] = 'P';
		HAL_UART_Transmit(&huart1,bufferZaSlanjePH,6,100);
		*/

		int end = osKernelSysTick();
 80018d0:	f003 ff51 	bl	8005776 <osKernelSysTick>
 80018d4:	4603      	mov	r3, r0
 80018d6:	61fb      	str	r3, [r7, #28]
	  Ptimestamp = end-start;
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <StartTask3+0x164>)
 80018e2:	601a      	str	r2, [r3, #0]
		osDelay(50- Ptimestamp);
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <StartTask3+0x164>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 ff9e 	bl	800582e <osDelay>
  {
 80018f2:	e770      	b.n	80017d6 <StartTask3+0x16>
 80018f4:	20000474 	.word	0x20000474
 80018f8:	20004218 	.word	0x20004218
 80018fc:	20004220 	.word	0x20004220
 8001900:	20004330 	.word	0x20004330
 8001904:	2000047c 	.word	0x2000047c
 8001908:	20000018 	.word	0x20000018
 800190c:	200004a8 	.word	0x200004a8
 8001910:	2000001c 	.word	0x2000001c
 8001914:	200004ac 	.word	0x200004ac
 8001918:	20000020 	.word	0x20000020
 800191c:	200004b0 	.word	0x200004b0
 8001920:	200042ec 	.word	0x200042ec
 8001924:	2000421c 	.word	0x2000421c

08001928 <print>:
* @retval None
*/
/* USER CODE END Header_StartTask4 */

void print (int num)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b08c      	sub	sp, #48	; 0x30
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	struct odlaznaPoruka Izlaz; //Pravimo varijablu (objakat) tipa odlazna poruka
	Izlaz.tip = num;  			//clanu tip objekta Izlaz dodjeljujemo vr. num, odnosno koju cemo poruku poslati
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	723b      	strb	r3, [r7, #8]

	float Max = 0,Trenutno = 0;
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t timestamp = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
	if(num == 1) //saljemo poruku o ph vrijednosti
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d109      	bne.n	8001960 <print+0x38>
	{
			Max = max_pH;
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <print+0xdc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
			Trenutno = tretnutna_vr_pH;
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <print+0xe0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
			timestamp = Ptimestamp;
 8001958:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <print+0xe4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	e018      	b.n	8001992 <print+0x6a>
	}
	else if(num == 2) //saljemo poruku o temperaturi
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d109      	bne.n	800197a <print+0x52>
	{
			Max = max_temp;
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <print+0xe8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
			Trenutno = trenutna_vr_temp;
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <print+0xec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
			timestamp = Ttimestamp;
 8001972:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <print+0xf0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	e00b      	b.n	8001992 <print+0x6a>
	}
	else if(num == 3) //saljemo poruku o nivou vode
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d108      	bne.n	8001992 <print+0x6a>
	{
			Max = max_level;
 8001980:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <print+0xf4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
			Trenutno = trenutna_vr_lvl;
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <print+0xf8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
			timestamp = Ltimestamp;
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <print+0xfc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
	}

	sprintf(Izlaz.refVrijednost, "%d", Max); // ispisujemo max vrijednost
 8001992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001994:	f7fe fde8 	bl	8000568 <__aeabi_f2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	f107 0108 	add.w	r1, r7, #8
 80019a0:	1c48      	adds	r0, r1, #1
 80019a2:	4921      	ldr	r1, [pc, #132]	; (8001a28 <print+0x100>)
 80019a4:	f006 fb0a 	bl	8007fbc <siprintf>
	sprintf(Izlaz.mjVrijednost, "%d", Trenutno); //ispisujemo trenutnu vrijednost
 80019a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019aa:	f7fe fddd 	bl	8000568 <__aeabi_f2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	f107 0108 	add.w	r1, r7, #8
 80019b6:	f101 0008 	add.w	r0, r1, #8
 80019ba:	491b      	ldr	r1, [pc, #108]	; (8001a28 <print+0x100>)
 80019bc:	f006 fafe 	bl	8007fbc <siprintf>
	sprintf(Izlaz.timestamp, "%10d", timestamp); //ispisujemo timestamp
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	330f      	adds	r3, #15
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	4918      	ldr	r1, [pc, #96]	; (8001a2c <print+0x104>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f006 faf6 	bl	8007fbc <siprintf>
	memcpy(Izlazni_buffer, &Izlaz, sizeof(Izlaz)); //Upisujemo vrijednost u memoriju, from Izlazni_buffer -> &Izlaz
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <print+0x108>)
 80019d2:	461d      	mov	r5, r3
 80019d4:	f107 0408 	add.w	r4, r7, #8
 80019d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019da:	6028      	str	r0, [r5, #0]
 80019dc:	6069      	str	r1, [r5, #4]
 80019de:	60aa      	str	r2, [r5, #8]
 80019e0:	60eb      	str	r3, [r5, #12]
 80019e2:	cc03      	ldmia	r4!, {r0, r1}
 80019e4:	6128      	str	r0, [r5, #16]
 80019e6:	6169      	str	r1, [r5, #20]
 80019e8:	7823      	ldrb	r3, [r4, #0]
 80019ea:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart1, Izlazni_buffer, 25, 1000);
 80019ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f0:	2219      	movs	r2, #25
 80019f2:	490f      	ldr	r1, [pc, #60]	; (8001a30 <print+0x108>)
 80019f4:	480f      	ldr	r0, [pc, #60]	; (8001a34 <print+0x10c>)
 80019f6:	f003 f8c0 	bl	8004b7a <HAL_UART_Transmit>

}
 80019fa:	bf00      	nop
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bdb0      	pop	{r4, r5, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000047c 	.word	0x2000047c
 8001a08:	20000484 	.word	0x20000484
 8001a0c:	2000421c 	.word	0x2000421c
 8001a10:	20000480 	.word	0x20000480
 8001a14:	20000488 	.word	0x20000488
 8001a18:	2000420c 	.word	0x2000420c
 8001a1c:	20000478 	.word	0x20000478
 8001a20:	2000048c 	.word	0x2000048c
 8001a24:	20004308 	.word	0x20004308
 8001a28:	0800b178 	.word	0x0800b178
 8001a2c:	0800b17c 	.word	0x0800b17c
 8001a30:	20004314 	.word	0x20004314
 8001a34:	200042ac 	.word	0x200042ac

08001a38 <StartTask4>:

void StartTask4(void const * argument)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  */
  /* Infinite loop */
	while(1)
  {
		HAL_UART_Receive(&huart1, Ulazni_buffer, 8, 10000);
 8001a40:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a44:	2208      	movs	r2, #8
 8001a46:	4920      	ldr	r1, [pc, #128]	; (8001ac8 <StartTask4+0x90>)
 8001a48:	4820      	ldr	r0, [pc, #128]	; (8001acc <StartTask4+0x94>)
 8001a4a:	f003 f92f 	bl	8004cac <HAL_UART_Receive>
		struct dolaznaPoruka *Ulaz = (struct dolaznaPoruka *) Ulazni_buffer;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <StartTask4+0x90>)
 8001a50:	60fb      	str	r3, [r7, #12]
		if(Ulaz->tip == 1)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d10b      	bne.n	8001a72 <StartTask4+0x3a>
			{
				max_pH = strtof(Ulaz->vrijednost, NULL);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f007 f8f3 	bl	8008c4c <strtof>
 8001a66:	eef0 7a40 	vmov.f32	s15, s0
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <StartTask4+0x98>)
 8001a6c:	edc3 7a00 	vstr	s15, [r3]
 8001a70:	e7e6      	b.n	8001a40 <StartTask4+0x8>
			}
				else if(Ulaz->tip == 2)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d10b      	bne.n	8001a92 <StartTask4+0x5a>
				{
					max_temp = strtof(Ulaz->vrijednost, NULL);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f007 f8e3 	bl	8008c4c <strtof>
 8001a86:	eef0 7a40 	vmov.f32	s15, s0
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <StartTask4+0x9c>)
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
 8001a90:	e7d6      	b.n	8001a40 <StartTask4+0x8>
				}
					else if(Ulaz->tip == 3)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d10b      	bne.n	8001ab2 <StartTask4+0x7a>
						{
							max_level = strtof(Ulaz->vrijednost, NULL);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f007 f8d3 	bl	8008c4c <strtof>
 8001aa6:	eef0 7a40 	vmov.f32	s15, s0
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <StartTask4+0xa0>)
 8001aac:	edc3 7a00 	vstr	s15, [r3]
 8001ab0:	e7c6      	b.n	8001a40 <StartTask4+0x8>
						}
							else
								{
									print(1);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f7ff ff38 	bl	8001928 <print>
									print(2);
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f7ff ff35 	bl	8001928 <print>
									print(3);
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f7ff ff32 	bl	8001928 <print>
  {
 8001ac4:	e7bc      	b.n	8001a40 <StartTask4+0x8>
 8001ac6:	bf00      	nop
 8001ac8:	20004210 	.word	0x20004210
 8001acc:	200042ac 	.word	0x200042ac
 8001ad0:	2000047c 	.word	0x2000047c
 8001ad4:	20000480 	.word	0x20000480
 8001ad8:	20000478 	.word	0x20000478

08001adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aee:	f000 fb7f 	bl	80021f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40010000 	.word	0x40010000

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_MspInit+0x54>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_MspInit+0x54>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_MspInit+0x54>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_MspInit+0x54>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_MspInit+0x54>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_MspInit+0x54>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	210f      	movs	r1, #15
 8001b52:	f06f 0001 	mvn.w	r0, #1
 8001b56:	f001 f989 	bl	8002e6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a28      	ldr	r2, [pc, #160]	; (8001c28 <HAL_ADC_MspInit+0xc0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d149      	bne.n	8001c1e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_ADC_MspInit+0xc4>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <HAL_ADC_MspInit+0xc4>)
 8001b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_ADC_MspInit+0xc4>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_ADC_MspInit+0xc4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_ADC_MspInit+0xc4>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_ADC_MspInit+0xc4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_ADC_MspInit+0xc4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <HAL_ADC_MspInit+0xc4>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_ADC_MspInit+0xc4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bde:	23c0      	movs	r3, #192	; 0xc0
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be2:	2303      	movs	r3, #3
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480f      	ldr	r0, [pc, #60]	; (8001c30 <HAL_ADC_MspInit+0xc8>)
 8001bf2:	f001 fa79 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	480a      	ldr	r0, [pc, #40]	; (8001c34 <HAL_ADC_MspInit+0xcc>)
 8001c0a:	f001 fa6d 	bl	80030e8 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2105      	movs	r1, #5
 8001c12:	2012      	movs	r0, #18
 8001c14:	f001 f92a 	bl	8002e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c18:	2012      	movs	r0, #18
 8001c1a:	f001 f943 	bl	8002ea4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40012100 	.word	0x40012100
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400

08001c38 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <HAL_DAC_MspInit+0x8c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d12f      	bne.n	8001cba <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_DAC_MspInit+0x90>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_DAC_MspInit+0x90>)
 8001c64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_DAC_MspInit+0x90>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_DAC_MspInit+0x90>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_DAC_MspInit+0x90>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_DAC_MspInit+0x90>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c92:	2330      	movs	r3, #48	; 0x30
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c96:	2303      	movs	r3, #3
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4809      	ldr	r0, [pc, #36]	; (8001ccc <HAL_DAC_MspInit+0x94>)
 8001ca6:	f001 fa1f 	bl	80030e8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2105      	movs	r1, #5
 8001cae:	2036      	movs	r0, #54	; 0x36
 8001cb0:	f001 f8dc 	bl	8002e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cb4:	2036      	movs	r0, #54	; 0x36
 8001cb6:	f001 f8f5 	bl	8002ea4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40007400 	.word	0x40007400
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_TIM_Base_MspInit+0x3c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10d      	bne.n	8001cfe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_TIM_Base_MspInit+0x40>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_TIM_Base_MspInit+0x40>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_TIM_Base_MspInit+0x40>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_TIM_MspPostInit+0x68>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d11d      	bne.n	8001d72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_TIM_MspPostInit+0x6c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_TIM_MspPostInit+0x6c>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_TIM_MspPostInit+0x6c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d52:	2340      	movs	r3, #64	; 0x40
 8001d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HAL_TIM_MspPostInit+0x70>)
 8001d6e:	f001 f9bb 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020800 	.word	0x40020800

08001d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_UART_MspInit+0x94>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d134      	bne.n	8001e14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_UART_MspInit+0x98>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_UART_MspInit+0x98>)
 8001db4:	f043 0310 	orr.w	r3, r3, #16
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_UART_MspInit+0x98>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_UART_MspInit+0x98>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <HAL_UART_MspInit+0x98>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_UART_MspInit+0x98>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001de2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001df4:	2307      	movs	r3, #7
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4809      	ldr	r0, [pc, #36]	; (8001e24 <HAL_UART_MspInit+0x9c>)
 8001e00:	f001 f972 	bl	80030e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2105      	movs	r1, #5
 8001e08:	2025      	movs	r0, #37	; 0x25
 8001e0a:	f001 f82f 	bl	8002e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e0e:	2025      	movs	r0, #37	; 0x25
 8001e10:	f001 f848 	bl	8002ea4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40011000 	.word	0x40011000
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020000 	.word	0x40020000

08001e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	2019      	movs	r0, #25
 8001e3e:	f001 f815 	bl	8002e6c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e42:	2019      	movs	r0, #25
 8001e44:	f001 f82e 	bl	8002ea4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_InitTick+0xa4>)
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <HAL_InitTick+0xa4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6453      	str	r3, [r2, #68]	; 0x44
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_InitTick+0xa4>)
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e64:	f107 0210 	add.w	r2, r7, #16
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 ff20 	bl	8003cb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e74:	f001 ff0a 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <HAL_InitTick+0xa8>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0c9b      	lsrs	r3, r3, #18
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_InitTick+0xac>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <HAL_InitTick+0xb0>)
 8001e90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_InitTick+0xac>)
 8001e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <HAL_InitTick+0xac>)
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_InitTick+0xac>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_InitTick+0xac>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <HAL_InitTick+0xac>)
 8001eae:	f001 ff33 	bl	8003d18 <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <HAL_InitTick+0xac>)
 8001eba:	f001 ff58 	bl	8003d6e <HAL_TIM_Base_Start_IT>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3730      	adds	r7, #48	; 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	431bde83 	.word	0x431bde83
 8001ed4:	20004338 	.word	0x20004338
 8001ed8:	40010000 	.word	0x40010000

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <HardFault_Handler+0x4>

08001ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <MemManage_Handler+0x4>

08001ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <ADC_IRQHandler+0x10>)
 8001f16:	f000 fb4c 	bl	80025b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20004220 	.word	0x20004220

08001f24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f2a:	f001 ffb7 	bl	8003e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20004338 	.word	0x20004338

08001f38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <USART1_IRQHandler+0x10>)
 8001f3e:	f002 ff5b 	bl	8004df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200042ac 	.word	0x200042ac

08001f4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <TIM6_DAC_IRQHandler+0x10>)
 8001f52:	f000 ffd7 	bl	8002f04 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200042ec 	.word	0x200042ec

08001f60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	return 1;
 8001f64:	2301      	movs	r3, #1
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_kill>:

int _kill(int pid, int sig)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f7a:	f005 ffdf 	bl	8007f3c <__errno>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2216      	movs	r2, #22
 8001f82:	601a      	str	r2, [r3, #0]
	return -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_exit>:

void _exit (int status)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ffe7 	bl	8001f70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fa2:	e7fe      	b.n	8001fa2 <_exit+0x12>

08001fa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e00a      	b.n	8001fcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fb6:	f3af 8000 	nop.w
 8001fba:	4601      	mov	r1, r0
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	60ba      	str	r2, [r7, #8]
 8001fc2:	b2ca      	uxtb	r2, r1
 8001fc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbf0      	blt.n	8001fb6 <_read+0x12>
	}

return len;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e009      	b.n	8002004 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	60ba      	str	r2, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	dbf1      	blt.n	8001ff0 <_write+0x12>
	}
	return len;
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_close>:

int _close(int file)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
	return -1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203e:	605a      	str	r2, [r3, #4]
	return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_isatty>:

int _isatty(int file)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
	return 1;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
	return 0;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <_sbrk+0x5c>)
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <_sbrk+0x60>)
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <_sbrk+0x64>)
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <_sbrk+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d207      	bcs.n	80020c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b0:	f005 ff44 	bl	8007f3c <__errno>
 80020b4:	4603      	mov	r3, r0
 80020b6:	220c      	movs	r2, #12
 80020b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020be:	e009      	b.n	80020d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <_sbrk+0x64>)
 80020d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20030000 	.word	0x20030000
 80020e0:	00000400 	.word	0x00000400
 80020e4:	200004b4 	.word	0x200004b4
 80020e8:	20004390 	.word	0x20004390

080020ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <SystemInit+0x60>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	4a15      	ldr	r2, [pc, #84]	; (800214c <SystemInit+0x60>)
 80020f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <SystemInit+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a12      	ldr	r2, [pc, #72]	; (8002150 <SystemInit+0x64>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <SystemInit+0x64>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <SystemInit+0x64>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <SystemInit+0x64>)
 8002118:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800211c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <SystemInit+0x64>)
 8002124:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <SystemInit+0x68>)
 8002126:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <SystemInit+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a08      	ldr	r2, [pc, #32]	; (8002150 <SystemInit+0x64>)
 800212e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002132:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SystemInit+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <SystemInit+0x60>)
 800213c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002140:	609a      	str	r2, [r3, #8]
#endif
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	40023800 	.word	0x40023800
 8002154:	24003010 	.word	0x24003010

08002158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002190 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800215c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800215e:	e003      	b.n	8002168 <LoopCopyDataInit>

08002160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002166:	3104      	adds	r1, #4

08002168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800216c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800216e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002170:	d3f6      	bcc.n	8002160 <CopyDataInit>
  ldr  r2, =_sbss
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002174:	e002      	b.n	800217c <LoopFillZerobss>

08002176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002178:	f842 3b04 	str.w	r3, [r2], #4

0800217c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800217e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002180:	d3f9      	bcc.n	8002176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002182:	f7ff ffb3 	bl	80020ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002186:	f005 fedf 	bl	8007f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218a:	f7fe ff31 	bl	8000ff0 <main>
  bx  lr    
 800218e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002190:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002194:	0800b5ec 	.word	0x0800b5ec
  ldr  r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800219c:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 80021a0:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 80021a4:	2000438c 	.word	0x2000438c

080021a8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <CAN1_RX0_IRQHandler>
	...

080021ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <HAL_Init+0x40>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_Init+0x40>)
 80021c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_Init+0x40>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 fe3e 	bl	8002e56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff fe24 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fc96 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000028 	.word	0x20000028
 8002214:	20004378 	.word	0x20004378

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20004378 	.word	0x20004378

08002230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e033      	b.n	80022ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fc8a 	bl	8001b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d118      	bne.n	80022a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002276:	f023 0302 	bic.w	r3, r3, #2
 800227a:	f043 0202 	orr.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fc34 	bl	8002af0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
 800229e:	e001      	b.n	80022a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_Start+0x1a>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e0a5      	b.n	800241e <HAL_ADC_Start+0x166>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d018      	beq.n	800231a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_ADC_Start+0x174>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a4c      	ldr	r2, [pc, #304]	; (8002430 <HAL_ADC_Start+0x178>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9a      	lsrs	r2, r3, #18
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800230c:	e002      	b.n	8002314 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3b01      	subs	r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f9      	bne.n	800230e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d179      	bne.n	800241c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002352:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002366:	d106      	bne.n	8002376 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f023 0206 	bic.w	r2, r3, #6
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
 8002374:	e002      	b.n	800237c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_ADC_Start+0x17c>)
 8002386:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002390:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2b00      	cmp	r3, #0
 800239c:	d12a      	bne.n	80023f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a25      	ldr	r2, [pc, #148]	; (8002438 <HAL_ADC_Start+0x180>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d015      	beq.n	80023d4 <HAL_ADC_Start+0x11c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a23      	ldr	r2, [pc, #140]	; (800243c <HAL_ADC_Start+0x184>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d105      	bne.n	80023be <HAL_ADC_Start+0x106>
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_ADC_Start+0x17c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <HAL_ADC_Start+0x188>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d129      	bne.n	800241c <HAL_ADC_Start+0x164>
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_ADC_Start+0x17c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d123      	bne.n	800241c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11c      	bne.n	800241c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	e013      	b.n	800241c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_ADC_Start+0x180>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d10e      	bne.n	800241c <HAL_ADC_Start+0x164>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800241a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000024 	.word	0x20000024
 8002430:	431bde83 	.word	0x431bde83
 8002434:	40012300 	.word	0x40012300
 8002438:	40012000 	.word	0x40012000
 800243c:	40012100 	.word	0x40012100
 8002440:	40012200 	.word	0x40012200

08002444 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_ADC_Stop+0x16>
 8002456:	2302      	movs	r3, #2
 8002458:	e021      	b.n	800249e <HAL_ADC_Stop+0x5a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d113      	bne.n	80024f0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d6:	d10b      	bne.n	80024f0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e05c      	b.n	80025aa <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80024f0:	f7ff fe92 	bl	8002218 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024f6:	e01a      	b.n	800252e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024fe:	d016      	beq.n	800252e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_ADC_PollForConversion+0x6c>
 8002506:	f7ff fe87 	bl	8002218 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d20b      	bcs.n	800252e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e03d      	b.n	80025aa <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d1dd      	bne.n	80024f8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0212 	mvn.w	r2, #18
 8002544:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d123      	bne.n	80025a8 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002564:	2b00      	cmp	r3, #0
 8002566:	d11f      	bne.n	80025a8 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d049      	beq.n	8002688 <HAL_ADC_IRQHandler+0xd6>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d046      	beq.n	8002688 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d12b      	bne.n	8002678 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d127      	bne.n	8002678 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002640:	2b00      	cmp	r3, #0
 8002642:	d119      	bne.n	8002678 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0220 	bic.w	r2, r2, #32
 8002652:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f8e8 	bl	800284e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f06f 0212 	mvn.w	r2, #18
 8002686:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a8:	2b80      	cmp	r3, #128	; 0x80
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d057      	beq.n	800276a <HAL_ADC_IRQHandler+0x1b8>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d054      	beq.n	800276a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d139      	bne.n	800275a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d12b      	bne.n	800275a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d124      	bne.n	800275a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11d      	bne.n	800275a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002722:	2b00      	cmp	r3, #0
 8002724:	d119      	bne.n	800275a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002734:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f043 0201 	orr.w	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fac4 	bl	8002ce8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 020c 	mvn.w	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d017      	beq.n	80027cc <HAL_ADC_IRQHandler+0x21a>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10d      	bne.n	80027cc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f850 	bl	8002862 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f06f 0201 	mvn.w	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d015      	beq.n	800282c <HAL_ADC_IRQHandler+0x27a>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d012      	beq.n	800282c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f043 0202 	orr.w	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f06f 0220 	mvn.w	r2, #32
 800281a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f82a 	bl	8002876 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f06f 0220 	mvn.w	r2, #32
 800282a:	601a      	str	r2, [r3, #0]
  }
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1c>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e113      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x244>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	d925      	bls.n	8002904 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68d9      	ldr	r1, [r3, #12]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	3b1e      	subs	r3, #30
 80028ce:	2207      	movs	r2, #7
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43da      	mvns	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	400a      	ands	r2, r1
 80028dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68d9      	ldr	r1, [r3, #12]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	4603      	mov	r3, r0
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4403      	add	r3, r0
 80028f6:	3b1e      	subs	r3, #30
 80028f8:	409a      	lsls	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	e022      	b.n	800294a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6919      	ldr	r1, [r3, #16]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	2207      	movs	r2, #7
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	400a      	ands	r2, r1
 8002926:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6919      	ldr	r1, [r3, #16]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	4618      	mov	r0, r3
 800293a:	4603      	mov	r3, r0
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4403      	add	r3, r0
 8002940:	409a      	lsls	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b06      	cmp	r3, #6
 8002950:	d824      	bhi.n	800299c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	3b05      	subs	r3, #5
 8002964:	221f      	movs	r2, #31
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	400a      	ands	r2, r1
 8002972:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	4618      	mov	r0, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b05      	subs	r3, #5
 800298e:	fa00 f203 	lsl.w	r2, r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	635a      	str	r2, [r3, #52]	; 0x34
 800299a:	e04c      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d824      	bhi.n	80029ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	3b23      	subs	r3, #35	; 0x23
 80029b6:	221f      	movs	r2, #31
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43da      	mvns	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	400a      	ands	r2, r1
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	3b23      	subs	r3, #35	; 0x23
 80029e0:	fa00 f203 	lsl.w	r2, r0, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
 80029ec:	e023      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	3b41      	subs	r3, #65	; 0x41
 8002a00:	221f      	movs	r2, #31
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	3b41      	subs	r3, #65	; 0x41
 8002a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a36:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_ADC_ConfigChannel+0x250>)
 8002a38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <HAL_ADC_ConfigChannel+0x254>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10f      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1d8>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b12      	cmp	r3, #18
 8002a4a:	d10b      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1d      	ldr	r2, [pc, #116]	; (8002ae0 <HAL_ADC_ConfigChannel+0x254>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d12b      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x23a>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <HAL_ADC_ConfigChannel+0x258>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d003      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x1f4>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b11      	cmp	r3, #17
 8002a7e:	d122      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a11      	ldr	r2, [pc, #68]	; (8002ae4 <HAL_ADC_ConfigChannel+0x258>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d111      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_ADC_ConfigChannel+0x25c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_ADC_ConfigChannel+0x260>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	0c9a      	lsrs	r2, r3, #18
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ab8:	e002      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f9      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40012300 	.word	0x40012300
 8002ae0:	40012000 	.word	0x40012000
 8002ae4:	10000012 	.word	0x10000012
 8002ae8:	20000024 	.word	0x20000024
 8002aec:	431bde83 	.word	0x431bde83

08002af0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af8:	4b79      	ldr	r3, [pc, #484]	; (8002ce0 <ADC_Init+0x1f0>)
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	021a      	lsls	r2, r3, #8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6899      	ldr	r1, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <ADC_Init+0x1f4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d022      	beq.n	8002bce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6899      	ldr	r1, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e00f      	b.n	8002bee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0202 	bic.w	r2, r2, #2
 8002bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6899      	ldr	r1, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7e1b      	ldrb	r3, [r3, #24]
 8002c08:	005a      	lsls	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	3b01      	subs	r3, #1
 8002c48:	035a      	lsls	r2, r3, #13
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	e007      	b.n	8002c64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	051a      	lsls	r2, r3, #20
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ca6:	025a      	lsls	r2, r3, #9
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6899      	ldr	r1, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	029a      	lsls	r2, r3, #10
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40012300 	.word	0x40012300
 8002ce4:	0f000001 	.word	0x0f000001

08002ce8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4907      	ldr	r1, [pc, #28]	; (8002d98 <__NVIC_EnableIRQ+0x38>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	; (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	; (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ff4c 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e7e:	f7ff ff61 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002e82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	6978      	ldr	r0, [r7, #20]
 8002e8a:	f7ff ffb1 	bl	8002df0 <NVIC_EncodePriority>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff80 	bl	8002d9c <__NVIC_SetPriority>
}
 8002e9c:	bf00      	nop
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff54 	bl	8002d60 <__NVIC_EnableIRQ>
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e014      	b.n	8002efc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fea8 	bl	8001c38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1a:	d118      	bne.n	8002f4e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f46:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f825 	bl	8002f98 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f5c:	d118      	bne.n	8002f90 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2204      	movs	r2, #4
 8002f62:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f043 0202 	orr.w	r2, r3, #2
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002f88:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f880 	bl	8003090 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	795b      	ldrb	r3, [r3, #5]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_DAC_ConfigChannel+0x20>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e036      	b.n	800303a <HAL_DAC_ConfigChannel+0x8e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002fe0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6819      	ldr	r1, [r3, #0]
 800301a:	22c0      	movs	r2, #192	; 0xc0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	400a      	ands	r2, r1
 800302a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003046:	b480      	push	{r7}
 8003048:	b087      	sub	sp, #28
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	3308      	adds	r3, #8
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e004      	b.n	800307a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	3314      	adds	r3, #20
 8003078:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	461a      	mov	r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d004      	beq.n	80030c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e00c      	b.n	80030dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2205      	movs	r2, #5
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0201 	bic.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e177      	b.n	80033f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 8166 	bne.w	80033ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x4a>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b12      	cmp	r3, #18
 8003130:	d123      	bne.n	800317a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	220f      	movs	r2, #15
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	08da      	lsrs	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3208      	adds	r2, #8
 8003174:	69b9      	ldr	r1, [r7, #24]
 8003176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2203      	movs	r2, #3
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0203 	and.w	r2, r3, #3
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d00b      	beq.n	80031ce <HAL_GPIO_Init+0xe6>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d007      	beq.n	80031ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031c2:	2b11      	cmp	r3, #17
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b12      	cmp	r3, #18
 80031cc:	d130      	bne.n	8003230 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	2203      	movs	r2, #3
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003204:	2201      	movs	r2, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 0201 	and.w	r2, r3, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80c0 	beq.w	80033ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b66      	ldr	r3, [pc, #408]	; (800340c <HAL_GPIO_Init+0x324>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a65      	ldr	r2, [pc, #404]	; (800340c <HAL_GPIO_Init+0x324>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_GPIO_Init+0x324>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328a:	4a61      	ldr	r2, [pc, #388]	; (8003410 <HAL_GPIO_Init+0x328>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_GPIO_Init+0x32c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d037      	beq.n	8003326 <HAL_GPIO_Init+0x23e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a57      	ldr	r2, [pc, #348]	; (8003418 <HAL_GPIO_Init+0x330>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_GPIO_Init+0x23a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a56      	ldr	r2, [pc, #344]	; (800341c <HAL_GPIO_Init+0x334>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <HAL_GPIO_Init+0x236>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a55      	ldr	r2, [pc, #340]	; (8003420 <HAL_GPIO_Init+0x338>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d025      	beq.n	800331a <HAL_GPIO_Init+0x232>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a54      	ldr	r2, [pc, #336]	; (8003424 <HAL_GPIO_Init+0x33c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_GPIO_Init+0x22e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a53      	ldr	r2, [pc, #332]	; (8003428 <HAL_GPIO_Init+0x340>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_Init+0x22a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a52      	ldr	r2, [pc, #328]	; (800342c <HAL_GPIO_Init+0x344>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0x226>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a51      	ldr	r2, [pc, #324]	; (8003430 <HAL_GPIO_Init+0x348>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00d      	beq.n	800330a <HAL_GPIO_Init+0x222>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a50      	ldr	r2, [pc, #320]	; (8003434 <HAL_GPIO_Init+0x34c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <HAL_GPIO_Init+0x21e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4f      	ldr	r2, [pc, #316]	; (8003438 <HAL_GPIO_Init+0x350>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_GPIO_Init+0x21a>
 80032fe:	2309      	movs	r3, #9
 8003300:	e012      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003302:	230a      	movs	r3, #10
 8003304:	e010      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003306:	2308      	movs	r3, #8
 8003308:	e00e      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800330a:	2307      	movs	r3, #7
 800330c:	e00c      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800330e:	2306      	movs	r3, #6
 8003310:	e00a      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003312:	2305      	movs	r3, #5
 8003314:	e008      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003316:	2304      	movs	r3, #4
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800331a:	2303      	movs	r3, #3
 800331c:	e004      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800331e:	2302      	movs	r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003326:	2300      	movs	r3, #0
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f002 0203 	and.w	r2, r2, #3
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	4093      	lsls	r3, r2
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003338:	4935      	ldr	r1, [pc, #212]	; (8003410 <HAL_GPIO_Init+0x328>)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003346:	4b3d      	ldr	r3, [pc, #244]	; (800343c <HAL_GPIO_Init+0x354>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800336a:	4a34      	ldr	r2, [pc, #208]	; (800343c <HAL_GPIO_Init+0x354>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003370:	4b32      	ldr	r3, [pc, #200]	; (800343c <HAL_GPIO_Init+0x354>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003394:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_GPIO_Init+0x354>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339a:	4b28      	ldr	r3, [pc, #160]	; (800343c <HAL_GPIO_Init+0x354>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033be:	4a1f      	ldr	r2, [pc, #124]	; (800343c <HAL_GPIO_Init+0x354>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <HAL_GPIO_Init+0x354>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e8:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_GPIO_Init+0x354>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	f67f ae84 	bls.w	8003104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	40013800 	.word	0x40013800
 8003414:	40020000 	.word	0x40020000
 8003418:	40020400 	.word	0x40020400
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40021400 	.word	0x40021400
 800342c:	40021800 	.word	0x40021800
 8003430:	40021c00 	.word	0x40021c00
 8003434:	40022000 	.word	0x40022000
 8003438:	40022400 	.word	0x40022400
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e22d      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d075      	beq.n	800354a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800345e:	4ba3      	ldr	r3, [pc, #652]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b04      	cmp	r3, #4
 8003468:	d00c      	beq.n	8003484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4ba0      	ldr	r3, [pc, #640]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003472:	2b08      	cmp	r3, #8
 8003474:	d112      	bne.n	800349c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003476:	4b9d      	ldr	r3, [pc, #628]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003482:	d10b      	bne.n	800349c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	4b99      	ldr	r3, [pc, #612]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d05b      	beq.n	8003548 <HAL_RCC_OscConfig+0x108>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d157      	bne.n	8003548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e208      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a4:	d106      	bne.n	80034b4 <HAL_RCC_OscConfig+0x74>
 80034a6:	4b91      	ldr	r3, [pc, #580]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a90      	ldr	r2, [pc, #576]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e01d      	b.n	80034f0 <HAL_RCC_OscConfig+0xb0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x98>
 80034be:	4b8b      	ldr	r3, [pc, #556]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a8a      	ldr	r2, [pc, #552]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b88      	ldr	r3, [pc, #544]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a87      	ldr	r2, [pc, #540]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0xb0>
 80034d8:	4b84      	ldr	r3, [pc, #528]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a83      	ldr	r2, [pc, #524]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b81      	ldr	r3, [pc, #516]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a80      	ldr	r2, [pc, #512]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe fe8e 	bl	8002218 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003500:	f7fe fe8a 	bl	8002218 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1cd      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b76      	ldr	r3, [pc, #472]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0xc0>
 800351e:	e014      	b.n	800354a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe fe7a 	bl	8002218 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7fe fe76 	bl	8002218 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e1b9      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	4b6c      	ldr	r3, [pc, #432]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0xe8>
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d063      	beq.n	800361e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003556:	4b65      	ldr	r3, [pc, #404]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003562:	4b62      	ldr	r3, [pc, #392]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800356a:	2b08      	cmp	r3, #8
 800356c:	d11c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356e:	4b5f      	ldr	r3, [pc, #380]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d116      	bne.n	80035a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357a:	4b5c      	ldr	r3, [pc, #368]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_RCC_OscConfig+0x152>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e18d      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003592:	4b56      	ldr	r3, [pc, #344]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4952      	ldr	r1, [pc, #328]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	e03a      	b.n	800361e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d020      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b0:	4b4f      	ldr	r3, [pc, #316]	; (80036f0 <HAL_RCC_OscConfig+0x2b0>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fe fe2f 	bl	8002218 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035be:	f7fe fe2b 	bl	8002218 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e16e      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b43      	ldr	r3, [pc, #268]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4940      	ldr	r1, [pc, #256]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
 80035f0:	e015      	b.n	800361e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <HAL_RCC_OscConfig+0x2b0>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe fe0e 	bl	8002218 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003600:	f7fe fe0a 	bl	8002218 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e14d      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d030      	beq.n	800368c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003632:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <HAL_RCC_OscConfig+0x2b4>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fe fdee 	bl	8002218 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003640:	f7fe fdea 	bl	8002218 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e12d      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x200>
 800365e:	e015      	b.n	800368c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003660:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_RCC_OscConfig+0x2b4>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003666:	f7fe fdd7 	bl	8002218 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800366e:	f7fe fdd3 	bl	8002218 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e116      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a0 	beq.w	80037da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_OscConfig+0x2b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d121      	bne.n	800371a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HAL_RCC_OscConfig+0x2b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <HAL_RCC_OscConfig+0x2b8>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7fe fd99 	bl	8002218 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	e011      	b.n	800370e <HAL_RCC_OscConfig+0x2ce>
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	42470000 	.word	0x42470000
 80036f4:	42470e80 	.word	0x42470e80
 80036f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fc:	f7fe fd8c 	bl	8002218 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0cf      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <HAL_RCC_OscConfig+0x478>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d106      	bne.n	8003730 <HAL_RCC_OscConfig+0x2f0>
 8003722:	4b66      	ldr	r3, [pc, #408]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a65      	ldr	r2, [pc, #404]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	e01c      	b.n	800376a <HAL_RCC_OscConfig+0x32a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d10c      	bne.n	8003752 <HAL_RCC_OscConfig+0x312>
 8003738:	4b60      	ldr	r3, [pc, #384]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a5f      	ldr	r2, [pc, #380]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	4b5d      	ldr	r3, [pc, #372]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a5c      	ldr	r2, [pc, #368]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
 8003750:	e00b      	b.n	800376a <HAL_RCC_OscConfig+0x32a>
 8003752:	4b5a      	ldr	r3, [pc, #360]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a59      	ldr	r2, [pc, #356]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
 800375e:	4b57      	ldr	r3, [pc, #348]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a56      	ldr	r2, [pc, #344]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d015      	beq.n	800379e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fe fd51 	bl	8002218 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fe fd4d 	bl	8002218 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	; 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e08e      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003790:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ee      	beq.n	800377a <HAL_RCC_OscConfig+0x33a>
 800379c:	e014      	b.n	80037c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379e:	f7fe fd3b 	bl	8002218 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fe fd37 	bl	8002218 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e078      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037bc:	4b3f      	ldr	r3, [pc, #252]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ee      	bne.n	80037a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a3a      	ldr	r2, [pc, #232]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 80037d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d064      	beq.n	80038ac <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e2:	4b36      	ldr	r3, [pc, #216]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d05c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d141      	bne.n	800387a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <HAL_RCC_OscConfig+0x480>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe fd0c 	bl	8002218 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe fd08 	bl	8002218 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e04b      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	019b      	lsls	r3, r3, #6
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	3b01      	subs	r3, #1
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	491d      	ldr	r1, [pc, #116]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384c:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <HAL_RCC_OscConfig+0x480>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe fce1 	bl	8002218 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385a:	f7fe fcdd 	bl	8002218 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e020      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x41a>
 8003878:	e018      	b.n	80038ac <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_RCC_OscConfig+0x480>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fcca 	bl	8002218 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fcc6 	bl	8002218 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e009      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <HAL_RCC_OscConfig+0x47c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x448>
 80038a6:	e001      	b.n	80038ac <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40007000 	.word	0x40007000
 80038bc:	40023800 	.word	0x40023800
 80038c0:	42470060 	.word	0x42470060

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0ca      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d90c      	bls.n	8003900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b64      	ldr	r3, [pc, #400]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b62      	ldr	r3, [pc, #392]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0b6      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003918:	4b58      	ldr	r3, [pc, #352]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003930:	4b52      	ldr	r3, [pc, #328]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a51      	ldr	r2, [pc, #324]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b4f      	ldr	r3, [pc, #316]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	494c      	ldr	r1, [pc, #304]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d044      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d119      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07d      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d003      	beq.n	8003982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	2b03      	cmp	r3, #3
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06d      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	4b3a      	ldr	r3, [pc, #232]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e065      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4933      	ldr	r1, [pc, #204]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b4:	f7fe fc30 	bl	8002218 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fe fc2c 	bl	8002218 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e04d      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 020c 	and.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1eb      	bne.n	80039bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d20c      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e030      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4915      	ldr	r1, [pc, #84]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	490d      	ldr	r1, [pc, #52]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a4a:	f000 f81d 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	4909      	ldr	r1, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	5ccb      	ldrb	r3, [r1, r3]
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7fe f9de 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023c00 	.word	0x40023c00
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	0800b18c 	.word	0x0800b18c
 8003a84:	20000024 	.word	0x20000024

08003a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa0:	4b67      	ldr	r3, [pc, #412]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	f200 80bd 	bhi.w	8003c2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x34>
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aba:	e0b7      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b61      	ldr	r3, [pc, #388]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003abe:	60bb      	str	r3, [r7, #8]
       break;
 8003ac0:	e0b7      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac2:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ac4:	60bb      	str	r3, [r7, #8]
      break;
 8003ac6:	e0b4      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac8:	4b5d      	ldr	r3, [pc, #372]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad2:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04d      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ade:	4b58      	ldr	r3, [pc, #352]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	ea02 0800 	and.w	r8, r2, r0
 8003af6:	ea03 0901 	and.w	r9, r3, r1
 8003afa:	4640      	mov	r0, r8
 8003afc:	4649      	mov	r1, r9
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	014b      	lsls	r3, r1, #5
 8003b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b0c:	0142      	lsls	r2, r0, #5
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	ebb0 0008 	subs.w	r0, r0, r8
 8003b16:	eb61 0109 	sbc.w	r1, r1, r9
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	018b      	lsls	r3, r1, #6
 8003b24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b28:	0182      	lsls	r2, r0, #6
 8003b2a:	1a12      	subs	r2, r2, r0
 8003b2c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b30:	f04f 0000 	mov.w	r0, #0
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	00d9      	lsls	r1, r3, #3
 8003b3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b3e:	00d0      	lsls	r0, r2, #3
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	eb12 0208 	adds.w	r2, r2, r8
 8003b48:	eb43 0309 	adc.w	r3, r3, r9
 8003b4c:	f04f 0000 	mov.w	r0, #0
 8003b50:	f04f 0100 	mov.w	r1, #0
 8003b54:	0259      	lsls	r1, r3, #9
 8003b56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b5a:	0250      	lsls	r0, r2, #9
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	f7fd f874 	bl	8000c58 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4613      	mov	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e04a      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7a:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	461a      	mov	r2, r3
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	ea02 0400 	and.w	r4, r2, r0
 8003b92:	ea03 0501 	and.w	r5, r3, r1
 8003b96:	4620      	mov	r0, r4
 8003b98:	4629      	mov	r1, r5
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	014b      	lsls	r3, r1, #5
 8003ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ba8:	0142      	lsls	r2, r0, #5
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	1b00      	subs	r0, r0, r4
 8003bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	018b      	lsls	r3, r1, #6
 8003bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bc2:	0182      	lsls	r2, r0, #6
 8003bc4:	1a12      	subs	r2, r2, r0
 8003bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bca:	f04f 0000 	mov.w	r0, #0
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	00d9      	lsls	r1, r3, #3
 8003bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bd8:	00d0      	lsls	r0, r2, #3
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	1912      	adds	r2, r2, r4
 8003be0:	eb45 0303 	adc.w	r3, r5, r3
 8003be4:	f04f 0000 	mov.w	r0, #0
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	0299      	lsls	r1, r3, #10
 8003bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bf2:	0290      	lsls	r0, r2, #10
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	f7fd f828 	bl	8000c58 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	60bb      	str	r3, [r7, #8]
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c2e:	60bb      	str	r3, [r7, #8]
      break;
 8003c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c32:	68bb      	ldr	r3, [r7, #8]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	007a1200 	.word	0x007a1200

08003c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000024 	.word	0x20000024

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff0 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800b19c 	.word	0x0800b19c

08003c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c90:	f7ff ffdc 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	0b5b      	lsrs	r3, r3, #13
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	0800b19c 	.word	0x0800b19c

08003cb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_RCC_GetClockConfig+0x5c>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0203 	and.w	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <HAL_RCC_GetClockConfig+0x5c>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_GetClockConfig+0x5c>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	08db      	lsrs	r3, r3, #3
 8003cee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_RCC_GetClockConfig+0x60>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 020f 	and.w	r2, r3, #15
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	601a      	str	r2, [r3, #0]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40023c00 	.word	0x40023c00

08003d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e01d      	b.n	8003d66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd ffc6 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f000 fb5a 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d007      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e01d      	b.n	8003e04 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f815 	bl	8003e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f000 fb0b 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	6839      	ldr	r1, [r7, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fdd6 	bl	80049e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_TIM_PWM_Start+0x74>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_TIM_PWM_Start+0x2c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <HAL_TIM_PWM_Start+0x78>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIM_PWM_Start+0x30>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <HAL_TIM_PWM_Start+0x32>
 8003e50:	2300      	movs	r3, #0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b06      	cmp	r3, #6
 8003e76:	d007      	beq.n	8003e88 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40010400 	.word	0x40010400

08003e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0202 	mvn.w	r2, #2
 8003ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa78 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa6a 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fa7b 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0204 	mvn.w	r2, #4
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa4e 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa40 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fa51 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0208 	mvn.w	r2, #8
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2204      	movs	r2, #4
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa24 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fa16 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fa27 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0210 	mvn.w	r2, #16
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f9fa 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f9ec 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f9fd 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d10e      	bne.n	8004020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d107      	bne.n	8004020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0201 	mvn.w	r2, #1
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd fd5e 	bl	8001adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b80      	cmp	r3, #128	; 0x80
 800402c:	d10e      	bne.n	800404c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d107      	bne.n	800404c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fd40 	bl	8004acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d10e      	bne.n	8004078 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d107      	bne.n	8004078 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9c2 	bl	80043fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d10e      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b20      	cmp	r3, #32
 8004092:	d107      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0220 	mvn.w	r2, #32
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fd0a 	bl	8004ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e0b4      	b.n	8004230 <HAL_TIM_PWM_ConfigChannel+0x184>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b0c      	cmp	r3, #12
 80040da:	f200 809f 	bhi.w	800421c <HAL_TIM_PWM_ConfigChannel+0x170>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	08004119 	.word	0x08004119
 80040e8:	0800421d 	.word	0x0800421d
 80040ec:	0800421d 	.word	0x0800421d
 80040f0:	0800421d 	.word	0x0800421d
 80040f4:	08004159 	.word	0x08004159
 80040f8:	0800421d 	.word	0x0800421d
 80040fc:	0800421d 	.word	0x0800421d
 8004100:	0800421d 	.word	0x0800421d
 8004104:	0800419b 	.word	0x0800419b
 8004108:	0800421d 	.word	0x0800421d
 800410c:	0800421d 	.word	0x0800421d
 8004110:	0800421d 	.word	0x0800421d
 8004114:	080041db 	.word	0x080041db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fa16 	bl	8004550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0208 	orr.w	r2, r2, #8
 8004132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0204 	bic.w	r2, r2, #4
 8004142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6999      	ldr	r1, [r3, #24]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	619a      	str	r2, [r3, #24]
      break;
 8004156:	e062      	b.n	800421e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fa66 	bl	8004630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6999      	ldr	r1, [r3, #24]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	021a      	lsls	r2, r3, #8
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	619a      	str	r2, [r3, #24]
      break;
 8004198:	e041      	b.n	800421e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fabb 	bl	800471c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0208 	orr.w	r2, r2, #8
 80041b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0204 	bic.w	r2, r2, #4
 80041c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69d9      	ldr	r1, [r3, #28]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	61da      	str	r2, [r3, #28]
      break;
 80041d8:	e021      	b.n	800421e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fb0f 	bl	8004804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69d9      	ldr	r1, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	021a      	lsls	r2, r3, #8
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	61da      	str	r2, [r3, #28]
      break;
 800421a:	e000      	b.n	800421e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800421c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIM_ConfigClockSource+0x18>
 800424c:	2302      	movs	r3, #2
 800424e:	e0b3      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x180>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800426e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004276:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004288:	d03e      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0xd0>
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428e:	f200 8087 	bhi.w	80043a0 <HAL_TIM_ConfigClockSource+0x168>
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	f000 8085 	beq.w	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429e:	d87f      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x168>
 80042a0:	2b70      	cmp	r3, #112	; 0x70
 80042a2:	d01a      	beq.n	80042da <HAL_TIM_ConfigClockSource+0xa2>
 80042a4:	2b70      	cmp	r3, #112	; 0x70
 80042a6:	d87b      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x168>
 80042a8:	2b60      	cmp	r3, #96	; 0x60
 80042aa:	d050      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x116>
 80042ac:	2b60      	cmp	r3, #96	; 0x60
 80042ae:	d877      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x168>
 80042b0:	2b50      	cmp	r3, #80	; 0x50
 80042b2:	d03c      	beq.n	800432e <HAL_TIM_ConfigClockSource+0xf6>
 80042b4:	2b50      	cmp	r3, #80	; 0x50
 80042b6:	d873      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x168>
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d058      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x136>
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d86f      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x168>
 80042c0:	2b30      	cmp	r3, #48	; 0x30
 80042c2:	d064      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x156>
 80042c4:	2b30      	cmp	r3, #48	; 0x30
 80042c6:	d86b      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x168>
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d060      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x156>
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d867      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x168>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d05c      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x156>
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d05a      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80042d8:	e062      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6899      	ldr	r1, [r3, #8]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f000 fb5b 	bl	80049a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	609a      	str	r2, [r3, #8]
      break;
 8004306:	e04e      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6899      	ldr	r1, [r3, #8]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f000 fb44 	bl	80049a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800432a:	609a      	str	r2, [r3, #8]
      break;
 800432c:	e03b      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	f000 fab8 	bl	80048b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2150      	movs	r1, #80	; 0x50
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fb11 	bl	800496e <TIM_ITRx_SetConfig>
      break;
 800434c:	e02b      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	461a      	mov	r2, r3
 800435c:	f000 fad7 	bl	800490e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2160      	movs	r1, #96	; 0x60
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fb01 	bl	800496e <TIM_ITRx_SetConfig>
      break;
 800436c:	e01b      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	461a      	mov	r2, r3
 800437c:	f000 fa98 	bl	80048b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2140      	movs	r1, #64	; 0x40
 8004386:	4618      	mov	r0, r3
 8004388:	f000 faf1 	bl	800496e <TIM_ITRx_SetConfig>
      break;
 800438c:	e00b      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f000 fae8 	bl	800496e <TIM_ITRx_SetConfig>
      break;
 800439e:	e002      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a40      	ldr	r2, [pc, #256]	; (8004524 <TIM_Base_SetConfig+0x114>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442e:	d00f      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3d      	ldr	r2, [pc, #244]	; (8004528 <TIM_Base_SetConfig+0x118>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00b      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a3c      	ldr	r2, [pc, #240]	; (800452c <TIM_Base_SetConfig+0x11c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d007      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a3b      	ldr	r2, [pc, #236]	; (8004530 <TIM_Base_SetConfig+0x120>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a3a      	ldr	r2, [pc, #232]	; (8004534 <TIM_Base_SetConfig+0x124>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d108      	bne.n	8004462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <TIM_Base_SetConfig+0x114>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02b      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004470:	d027      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a2c      	ldr	r2, [pc, #176]	; (8004528 <TIM_Base_SetConfig+0x118>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d023      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2b      	ldr	r2, [pc, #172]	; (800452c <TIM_Base_SetConfig+0x11c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01f      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a2a      	ldr	r2, [pc, #168]	; (8004530 <TIM_Base_SetConfig+0x120>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01b      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a29      	ldr	r2, [pc, #164]	; (8004534 <TIM_Base_SetConfig+0x124>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d017      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a28      	ldr	r2, [pc, #160]	; (8004538 <TIM_Base_SetConfig+0x128>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a27      	ldr	r2, [pc, #156]	; (800453c <TIM_Base_SetConfig+0x12c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00f      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <TIM_Base_SetConfig+0x130>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a25      	ldr	r2, [pc, #148]	; (8004544 <TIM_Base_SetConfig+0x134>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a24      	ldr	r2, [pc, #144]	; (8004548 <TIM_Base_SetConfig+0x138>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a23      	ldr	r2, [pc, #140]	; (800454c <TIM_Base_SetConfig+0x13c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d108      	bne.n	80044d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <TIM_Base_SetConfig+0x114>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_Base_SetConfig+0xf8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a0c      	ldr	r2, [pc, #48]	; (8004534 <TIM_Base_SetConfig+0x124>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	615a      	str	r2, [r3, #20]
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40010400 	.word	0x40010400
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800
 8004544:	40001800 	.word	0x40001800
 8004548:	40001c00 	.word	0x40001c00
 800454c:	40002000 	.word	0x40002000

08004550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f023 0201 	bic.w	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0303 	bic.w	r3, r3, #3
 8004586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 0302 	bic.w	r3, r3, #2
 8004598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a20      	ldr	r2, [pc, #128]	; (8004628 <TIM_OC1_SetConfig+0xd8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_OC1_SetConfig+0x64>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a1f      	ldr	r2, [pc, #124]	; (800462c <TIM_OC1_SetConfig+0xdc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10c      	bne.n	80045ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 0308 	bic.w	r3, r3, #8
 80045ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 0304 	bic.w	r3, r3, #4
 80045cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <TIM_OC1_SetConfig+0xd8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_OC1_SetConfig+0x8e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <TIM_OC1_SetConfig+0xdc>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d111      	bne.n	8004602 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40010000 	.word	0x40010000
 800462c:	40010400 	.word	0x40010400

08004630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0210 	bic.w	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0320 	bic.w	r3, r3, #32
 800467a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a22      	ldr	r2, [pc, #136]	; (8004714 <TIM_OC2_SetConfig+0xe4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_OC2_SetConfig+0x68>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a21      	ldr	r2, [pc, #132]	; (8004718 <TIM_OC2_SetConfig+0xe8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d10d      	bne.n	80046b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800469e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a17      	ldr	r2, [pc, #92]	; (8004714 <TIM_OC2_SetConfig+0xe4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_OC2_SetConfig+0x94>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a16      	ldr	r2, [pc, #88]	; (8004718 <TIM_OC2_SetConfig+0xe8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d113      	bne.n	80046ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	621a      	str	r2, [r3, #32]
}
 8004706:	bf00      	nop
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000
 8004718:	40010400 	.word	0x40010400

0800471c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a21      	ldr	r2, [pc, #132]	; (80047fc <TIM_OC3_SetConfig+0xe0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_OC3_SetConfig+0x66>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a20      	ldr	r2, [pc, #128]	; (8004800 <TIM_OC3_SetConfig+0xe4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10d      	bne.n	800479e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800479c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a16      	ldr	r2, [pc, #88]	; (80047fc <TIM_OC3_SetConfig+0xe0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d003      	beq.n	80047ae <TIM_OC3_SetConfig+0x92>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <TIM_OC3_SetConfig+0xe4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d113      	bne.n	80047d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40010000 	.word	0x40010000
 8004800:	40010400 	.word	0x40010400

08004804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800484e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	031b      	lsls	r3, r3, #12
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <TIM_OC4_SetConfig+0xa4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_OC4_SetConfig+0x68>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a11      	ldr	r2, [pc, #68]	; (80048ac <TIM_OC4_SetConfig+0xa8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d109      	bne.n	8004880 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	019b      	lsls	r3, r3, #6
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40010400 	.word	0x40010400

080048b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f023 0201 	bic.w	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 030a 	bic.w	r3, r3, #10
 80048ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	621a      	str	r2, [r3, #32]
}
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800490e:	b480      	push	{r7}
 8004910:	b087      	sub	sp, #28
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0210 	bic.w	r2, r3, #16
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	031b      	lsls	r3, r3, #12
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800494a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	f043 0307 	orr.w	r3, r3, #7
 8004990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	609a      	str	r2, [r3, #8]
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	021a      	lsls	r2, r3, #8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	609a      	str	r2, [r3, #8]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2201      	movs	r2, #1
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a1a      	ldr	r2, [r3, #32]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	401a      	ands	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a1a      	ldr	r2, [r3, #32]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e032      	b.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a7e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e03f      	b.n	8004b72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fd f93e 	bl	8001d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2224      	movs	r2, #36	; 0x24
 8004b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fbeb 	bl	8005300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b088      	sub	sp, #32
 8004b7e:	af02      	add	r7, sp, #8
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	f040 8083 	bne.w	8004ca2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_UART_Transmit+0x2e>
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e07b      	b.n	8004ca4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Transmit+0x40>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e074      	b.n	8004ca4 <HAL_UART_Transmit+0x12a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2221      	movs	r2, #33	; 0x21
 8004bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bd0:	f7fd fb22 	bl	8002218 <HAL_GetTick>
 8004bd4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004be2:	e042      	b.n	8004c6a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfa:	d122      	bne.n	8004c42 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2180      	movs	r1, #128	; 0x80
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fa0e 	bl	8005028 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e046      	b.n	8004ca4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c28:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3302      	adds	r3, #2
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	e017      	b.n	8004c6a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	e013      	b.n	8004c6a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2180      	movs	r1, #128	; 0x80
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f9eb 	bl	8005028 <UART_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e023      	b.n	8004ca4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	60ba      	str	r2, [r7, #8]
 8004c62:	781a      	ldrb	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1b7      	bne.n	8004be4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2140      	movs	r1, #64	; 0x40
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f9d2 	bl	8005028 <UART_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e00a      	b.n	8004ca4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	f040 8090 	bne.w	8004dee <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_UART_Receive+0x2e>
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e088      	b.n	8004df0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Receive+0x40>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e081      	b.n	8004df0 <HAL_UART_Receive+0x144>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2222      	movs	r2, #34	; 0x22
 8004cfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d02:	f7fd fa89 	bl	8002218 <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	88fa      	ldrh	r2, [r7, #6]
 8004d0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d14:	e05c      	b.n	8004dd0 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2c:	d12b      	bne.n	8004d86 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2200      	movs	r2, #0
 8004d36:	2120      	movs	r1, #32
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f975 	bl	8005028 <UART_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e053      	b.n	8004df0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10c      	bne.n	8004d6e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	3302      	adds	r3, #2
 8004d6a:	60bb      	str	r3, [r7, #8]
 8004d6c:	e030      	b.n	8004dd0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	3301      	adds	r3, #1
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	e024      	b.n	8004dd0 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2120      	movs	r1, #32
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f949 	bl	8005028 <UART_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e027      	b.n	8004df0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d108      	bne.n	8004dba <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	60ba      	str	r2, [r7, #8]
 8004db4:	b2ca      	uxtb	r2, r1
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e00a      	b.n	8004dd0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1c59      	adds	r1, r3, #1
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d19d      	bne.n	8004d16 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10d      	bne.n	8004e4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_UART_IRQHandler+0x52>
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9da 	bl	80051fc <UART_Receive_IT>
      return;
 8004e48:	e0cb      	b.n	8004fe2 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80ab 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x1b0>
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <HAL_UART_IRQHandler+0x70>
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80a0 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_UART_IRQHandler+0x90>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e80:	f043 0201 	orr.w	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_UART_IRQHandler+0xb0>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea0:	f043 0202 	orr.w	r2, r3, #2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_UART_IRQHandler+0xd0>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	f043 0204 	orr.w	r2, r3, #4
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_UART_IRQHandler+0xf0>
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee0:	f043 0208 	orr.w	r2, r3, #8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d077      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_UART_IRQHandler+0x112>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f979 	bl	80051fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <HAL_UART_IRQHandler+0x13a>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d031      	beq.n	8004f96 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8c2 	bl	80050bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d123      	bne.n	8004f8e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f62:	4a21      	ldr	r2, [pc, #132]	; (8004fe8 <HAL_UART_IRQHandler+0x1f0>)
 8004f64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe f89a 	bl	80030a4 <HAL_DMA_Abort_IT>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f80:	4610      	mov	r0, r2
 8004f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e00e      	b.n	8004fa4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f844 	bl	8005014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e00a      	b.n	8004fa4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f840 	bl	8005014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	e006      	b.n	8004fa4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f83c 	bl	8005014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004fa2:	e01d      	b.n	8004fe0 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	bf00      	nop
    return;
 8004fa6:	e01b      	b.n	8004fe0 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x1cc>
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8af 	bl	8005120 <UART_Transmit_IT>
    return;
 8004fc2:	e00e      	b.n	8004fe2 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x1ea>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f8f7 	bl	80051cc <UART_EndTransmit_IT>
    return;
 8004fde:	e000      	b.n	8004fe2 <HAL_UART_IRQHandler+0x1ea>
    return;
 8004fe0:	bf00      	nop
  }
}
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	080050f9 	.word	0x080050f9

08004fec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005038:	e02c      	b.n	8005094 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005040:	d028      	beq.n	8005094 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <UART_WaitOnFlagUntilTimeout+0x30>
 8005048:	f7fd f8e6 	bl	8002218 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	429a      	cmp	r2, r3
 8005056:	d21d      	bcs.n	8005094 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005066:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0201 	bic.w	r2, r2, #1
 8005076:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e00f      	b.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4013      	ands	r3, r2
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d0c3      	beq.n	800503a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff ff7e 	bl	8005014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b21      	cmp	r3, #33	; 0x21
 8005132:	d144      	bne.n	80051be <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	d11a      	bne.n	8005174 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005152:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d105      	bne.n	8005168 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	1c9a      	adds	r2, r3, #2
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]
 8005166:	e00e      	b.n	8005186 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]
 8005172:	e008      	b.n	8005186 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	1c59      	adds	r1, r3, #1
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6211      	str	r1, [r2, #32]
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29b      	uxth	r3, r3
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4619      	mov	r1, r3
 8005194:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10f      	bne.n	80051ba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e000      	b.n	80051c0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80051be:	2302      	movs	r3, #2
  }
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fefd 	bl	8004fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b22      	cmp	r3, #34	; 0x22
 800520e:	d171      	bne.n	80052f4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005218:	d123      	bne.n	8005262 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10e      	bne.n	8005246 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	1c9a      	adds	r2, r3, #2
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
 8005244:	e029      	b.n	800529a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	b29b      	uxth	r3, r3
 800524e:	b2db      	uxtb	r3, r3
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	629a      	str	r2, [r3, #40]	; 0x28
 8005260:	e01b      	b.n	800529a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6858      	ldr	r0, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	1c59      	adds	r1, r3, #1
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6291      	str	r1, [r2, #40]	; 0x28
 800527a:	b2c2      	uxtb	r2, r0
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	e00c      	b.n	800529a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	1c58      	adds	r0, r3, #1
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	6288      	str	r0, [r1, #40]	; 0x28
 8005292:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4619      	mov	r1, r3
 80052a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d120      	bne.n	80052f0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0220 	bic.w	r2, r2, #32
 80052bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695a      	ldr	r2, [r3, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff fe8a 	bl	8005000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	e002      	b.n	80052f6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005340:	f023 030c 	bic.w	r3, r3, #12
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	68f9      	ldr	r1, [r7, #12]
 800534a:	430b      	orrs	r3, r1
 800534c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536c:	f040 80e4 	bne.w	8005538 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4aab      	ldr	r2, [pc, #684]	; (8005624 <UART_SetConfig+0x324>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <UART_SetConfig+0x84>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4aaa      	ldr	r2, [pc, #680]	; (8005628 <UART_SetConfig+0x328>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d16c      	bne.n	800545e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005384:	f7fe fc82 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8005388:	4602      	mov	r2, r0
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009a      	lsls	r2, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4aa3      	ldr	r2, [pc, #652]	; (800562c <UART_SetConfig+0x32c>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	011c      	lsls	r4, r3, #4
 80053a8:	f7fe fc70 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009a      	lsls	r2, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	fbb2 f5f3 	udiv	r5, r2, r3
 80053c2:	f7fe fc63 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009a      	lsls	r2, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	4a93      	ldr	r2, [pc, #588]	; (800562c <UART_SetConfig+0x32c>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2264      	movs	r2, #100	; 0x64
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	1aeb      	subs	r3, r5, r3
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	3332      	adds	r3, #50	; 0x32
 80053f0:	4a8e      	ldr	r2, [pc, #568]	; (800562c <UART_SetConfig+0x32c>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053fe:	441c      	add	r4, r3
 8005400:	f7fe fc44 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8005404:	4602      	mov	r2, r0
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009a      	lsls	r2, r3, #2
 800540e:	441a      	add	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	fbb2 f5f3 	udiv	r5, r2, r3
 800541a:	f7fe fc37 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 800541e:	4602      	mov	r2, r0
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009a      	lsls	r2, r3, #2
 8005428:	441a      	add	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	4a7d      	ldr	r2, [pc, #500]	; (800562c <UART_SetConfig+0x32c>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	2264      	movs	r2, #100	; 0x64
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	1aeb      	subs	r3, r5, r3
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	3332      	adds	r3, #50	; 0x32
 8005448:	4a78      	ldr	r2, [pc, #480]	; (800562c <UART_SetConfig+0x32c>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	f003 0207 	and.w	r2, r3, #7
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4422      	add	r2, r4
 800545a:	609a      	str	r2, [r3, #8]
 800545c:	e154      	b.n	8005708 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800545e:	f7fe fc01 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005462:	4602      	mov	r2, r0
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009a      	lsls	r2, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	4a6c      	ldr	r2, [pc, #432]	; (800562c <UART_SetConfig+0x32c>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	011c      	lsls	r4, r3, #4
 8005482:	f7fe fbef 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005486:	4602      	mov	r2, r0
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009a      	lsls	r2, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	fbb2 f5f3 	udiv	r5, r2, r3
 800549c:	f7fe fbe2 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009a      	lsls	r2, r3, #2
 80054aa:	441a      	add	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	4a5d      	ldr	r2, [pc, #372]	; (800562c <UART_SetConfig+0x32c>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	2264      	movs	r2, #100	; 0x64
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	1aeb      	subs	r3, r5, r3
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	3332      	adds	r3, #50	; 0x32
 80054ca:	4a58      	ldr	r2, [pc, #352]	; (800562c <UART_SetConfig+0x32c>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054d8:	441c      	add	r4, r3
 80054da:	f7fe fbc3 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80054de:	4602      	mov	r2, r0
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009a      	lsls	r2, r3, #2
 80054e8:	441a      	add	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80054f4:	f7fe fbb6 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80054f8:	4602      	mov	r2, r0
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009a      	lsls	r2, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	4a47      	ldr	r2, [pc, #284]	; (800562c <UART_SetConfig+0x32c>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	2264      	movs	r2, #100	; 0x64
 8005518:	fb02 f303 	mul.w	r3, r2, r3
 800551c:	1aeb      	subs	r3, r5, r3
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	3332      	adds	r3, #50	; 0x32
 8005522:	4a42      	ldr	r2, [pc, #264]	; (800562c <UART_SetConfig+0x32c>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	f003 0207 	and.w	r2, r3, #7
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4422      	add	r2, r4
 8005534:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005536:	e0e7      	b.n	8005708 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a39      	ldr	r2, [pc, #228]	; (8005624 <UART_SetConfig+0x324>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <UART_SetConfig+0x24c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a38      	ldr	r2, [pc, #224]	; (8005628 <UART_SetConfig+0x328>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d171      	bne.n	8005630 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800554c:	f7fe fb9e 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8005550:	4602      	mov	r2, r0
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	009a      	lsls	r2, r3, #2
 800555a:	441a      	add	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	4a31      	ldr	r2, [pc, #196]	; (800562c <UART_SetConfig+0x32c>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	011c      	lsls	r4, r3, #4
 8005570:	f7fe fb8c 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8005574:	4602      	mov	r2, r0
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009a      	lsls	r2, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	fbb2 f5f3 	udiv	r5, r2, r3
 800558a:	f7fe fb7f 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 800558e:	4602      	mov	r2, r0
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009a      	lsls	r2, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	4a21      	ldr	r2, [pc, #132]	; (800562c <UART_SetConfig+0x32c>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2264      	movs	r2, #100	; 0x64
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	1aeb      	subs	r3, r5, r3
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	3332      	adds	r3, #50	; 0x32
 80055b8:	4a1c      	ldr	r2, [pc, #112]	; (800562c <UART_SetConfig+0x32c>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c4:	441c      	add	r4, r3
 80055c6:	f7fe fb61 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 80055ca:	4602      	mov	r2, r0
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009a      	lsls	r2, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80055e0:	f7fe fb54 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009a      	lsls	r2, r3, #2
 80055ee:	441a      	add	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	4a0c      	ldr	r2, [pc, #48]	; (800562c <UART_SetConfig+0x32c>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	2264      	movs	r2, #100	; 0x64
 8005604:	fb02 f303 	mul.w	r3, r2, r3
 8005608:	1aeb      	subs	r3, r5, r3
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	3332      	adds	r3, #50	; 0x32
 800560e:	4a07      	ldr	r2, [pc, #28]	; (800562c <UART_SetConfig+0x32c>)
 8005610:	fba2 2303 	umull	r2, r3, r2, r3
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	f003 020f 	and.w	r2, r3, #15
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4422      	add	r2, r4
 8005620:	609a      	str	r2, [r3, #8]
 8005622:	e071      	b.n	8005708 <UART_SetConfig+0x408>
 8005624:	40011000 	.word	0x40011000
 8005628:	40011400 	.word	0x40011400
 800562c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005630:	f7fe fb18 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005634:	4602      	mov	r2, r0
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009a      	lsls	r2, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	4a31      	ldr	r2, [pc, #196]	; (8005710 <UART_SetConfig+0x410>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	011c      	lsls	r4, r3, #4
 8005654:	f7fe fb06 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005658:	4602      	mov	r2, r0
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009a      	lsls	r2, r3, #2
 8005662:	441a      	add	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	fbb2 f5f3 	udiv	r5, r2, r3
 800566e:	f7fe faf9 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005672:	4602      	mov	r2, r0
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009a      	lsls	r2, r3, #2
 800567c:	441a      	add	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	4a21      	ldr	r2, [pc, #132]	; (8005710 <UART_SetConfig+0x410>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2264      	movs	r2, #100	; 0x64
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	1aeb      	subs	r3, r5, r3
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	3332      	adds	r3, #50	; 0x32
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <UART_SetConfig+0x410>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a8:	441c      	add	r4, r3
 80056aa:	f7fe fadb 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80056ae:	4602      	mov	r2, r0
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	009a      	lsls	r2, r3, #2
 80056b8:	441a      	add	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80056c4:	f7fe face 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	009a      	lsls	r2, r3, #2
 80056d2:	441a      	add	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <UART_SetConfig+0x410>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	2264      	movs	r2, #100	; 0x64
 80056e8:	fb02 f303 	mul.w	r3, r2, r3
 80056ec:	1aeb      	subs	r3, r5, r3
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	3332      	adds	r3, #50	; 0x32
 80056f2:	4a07      	ldr	r2, [pc, #28]	; (8005710 <UART_SetConfig+0x410>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	f003 020f 	and.w	r2, r3, #15
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4422      	add	r2, r4
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	e7ff      	b.n	8005708 <UART_SetConfig+0x408>
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bdb0      	pop	{r4, r5, r7, pc}
 8005710:	51eb851f 	.word	0x51eb851f

08005714 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005726:	2b84      	cmp	r3, #132	; 0x84
 8005728:	d005      	beq.n	8005736 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800572a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	3303      	adds	r3, #3
 8005734:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800574a:	f3ef 8305 	mrs	r3, IPSR
 800574e:	607b      	str	r3, [r7, #4]
  return(result);
 8005750:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800576c:	f001 f94c 	bl	8006a08 <vTaskStartScheduler>
  
  return osOK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	bd80      	pop	{r7, pc}

08005776 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800577a:	f7ff ffe3 	bl	8005744 <inHandlerMode>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005784:	f001 fa5a 	bl	8006c3c <xTaskGetTickCountFromISR>
 8005788:	4603      	mov	r3, r0
 800578a:	e002      	b.n	8005792 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800578c:	f001 fa46 	bl	8006c1c <xTaskGetTickCount>
 8005790:	4603      	mov	r3, r0
  }
}
 8005792:	4618      	mov	r0, r3
 8005794:	bd80      	pop	{r7, pc}

08005796 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005798:	b089      	sub	sp, #36	; 0x24
 800579a:	af04      	add	r7, sp, #16
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <osThreadCreate+0x54>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01c      	beq.n	80057ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685c      	ldr	r4, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681d      	ldr	r5, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691e      	ldr	r6, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff ffa6 	bl	8005714 <makeFreeRtosPriority>
 80057c8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057d2:	9202      	str	r2, [sp, #8]
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	9100      	str	r1, [sp, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	4632      	mov	r2, r6
 80057dc:	4629      	mov	r1, r5
 80057de:	4620      	mov	r0, r4
 80057e0:	f000 ff54 	bl	800668c <xTaskCreateStatic>
 80057e4:	4603      	mov	r3, r0
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	e01c      	b.n	8005824 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685c      	ldr	r4, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057f6:	b29e      	uxth	r6, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff ff88 	bl	8005714 <makeFreeRtosPriority>
 8005804:	4602      	mov	r2, r0
 8005806:	f107 030c 	add.w	r3, r7, #12
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	9200      	str	r2, [sp, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	4632      	mov	r2, r6
 8005812:	4629      	mov	r1, r5
 8005814:	4620      	mov	r0, r4
 8005816:	f000 ff95 	bl	8006744 <xTaskCreate>
 800581a:	4603      	mov	r3, r0
 800581c:	2b01      	cmp	r3, #1
 800581e:	d001      	beq.n	8005824 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005820:	2300      	movs	r3, #0
 8005822:	e000      	b.n	8005826 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800582e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <osDelay+0x16>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	e000      	b.n	8005846 <osDelay+0x18>
 8005844:	2301      	movs	r3, #1
 8005846:	4618      	mov	r0, r3
 8005848:	f001 f8aa 	bl	80069a0 <vTaskDelay>
  
  return osOK;
 800584c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	4619      	mov	r1, r3
 800586c:	2001      	movs	r0, #1
 800586e:	f000 fab1 	bl	8005dd4 <xQueueCreateMutexStatic>
 8005872:	4603      	mov	r3, r0
 8005874:	e003      	b.n	800587e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005876:	2001      	movs	r0, #1
 8005878:	f000 fa94 	bl	8005da4 <xQueueCreateMutex>
 800587c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <osMutexWait+0x18>
    return osErrorParameter;
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	e03a      	b.n	8005916 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058aa:	d103      	bne.n	80058b4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80058ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	e009      	b.n	80058c8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d006      	beq.n	80058c8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <osMutexWait+0x40>
      ticks = 1;
 80058c4:	2301      	movs	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80058c8:	f7ff ff3c 	bl	8005744 <inHandlerMode>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058d2:	f107 0308 	add.w	r3, r7, #8
 80058d6:	461a      	mov	r2, r3
 80058d8:	2100      	movs	r1, #0
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fd2e 	bl	800633c <xQueueReceiveFromISR>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d001      	beq.n	80058ea <osMutexWait+0x62>
      return osErrorOS;
 80058e6:	23ff      	movs	r3, #255	; 0xff
 80058e8:	e015      	b.n	8005916 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d011      	beq.n	8005914 <osMutexWait+0x8c>
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <osMutexWait+0x98>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	e008      	b.n	8005914 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fc0d 	bl	8006124 <xQueueSemaphoreTake>
 800590a:	4603      	mov	r3, r0
 800590c:	2b01      	cmp	r3, #1
 800590e:	d001      	beq.n	8005914 <osMutexWait+0x8c>
    return osErrorOS;
 8005910:	23ff      	movs	r3, #255	; 0xff
 8005912:	e000      	b.n	8005916 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	e000ed04 	.word	0xe000ed04

08005924 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800592c:	2300      	movs	r3, #0
 800592e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005930:	2300      	movs	r3, #0
 8005932:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005934:	f7ff ff06 	bl	8005744 <inHandlerMode>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d016      	beq.n	800596c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800593e:	f107 0308 	add.w	r3, r7, #8
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb5f 	bl	8006008 <xQueueGiveFromISR>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d001      	beq.n	8005954 <osMutexRelease+0x30>
      return osErrorOS;
 8005950:	23ff      	movs	r3, #255	; 0xff
 8005952:	e017      	b.n	8005984 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d013      	beq.n	8005982 <osMutexRelease+0x5e>
 800595a:	4b0c      	ldr	r3, [pc, #48]	; (800598c <osMutexRelease+0x68>)
 800595c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	e00a      	b.n	8005982 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800596c:	2300      	movs	r3, #0
 800596e:	2200      	movs	r2, #0
 8005970:	2100      	movs	r1, #0
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fa4a 	bl	8005e0c <xQueueGenericSend>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d001      	beq.n	8005982 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800597e:	23ff      	movs	r3, #255	; 0xff
 8005980:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	e000ed04 	.word	0xe000ed04

08005990 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f103 0208 	add.w	r2, r3, #8
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f103 0208 	add.w	r2, r3, #8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f103 0208 	add.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059ea:	b480      	push	{r7}
 80059ec:	b085      	sub	sp, #20
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	601a      	str	r2, [r3, #0]
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a48:	d103      	bne.n	8005a52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	e00c      	b.n	8005a6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3308      	adds	r3, #8
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e002      	b.n	8005a60 <vListInsert+0x2e>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d2f6      	bcs.n	8005a5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6892      	ldr	r2, [r2, #8]
 8005aba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6852      	ldr	r2, [r2, #4]
 8005ac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d103      	bne.n	8005ad8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	1e5a      	subs	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b22:	f001 ff0f 	bl	8007944 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b32:	fb01 f303 	mul.w	r3, r1, r3
 8005b36:	441a      	add	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b52:	3b01      	subs	r3, #1
 8005b54:	68f9      	ldr	r1, [r7, #12]
 8005b56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b58:	fb01 f303 	mul.w	r3, r1, r3
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	22ff      	movs	r2, #255	; 0xff
 8005b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	22ff      	movs	r2, #255	; 0xff
 8005b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d114      	bne.n	8005ba2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01a      	beq.n	8005bb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3310      	adds	r3, #16
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 f9a9 	bl	8006edc <xTaskRemoveFromEventList>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d012      	beq.n	8005bb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b90:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <xQueueGenericReset+0xcc>)
 8005b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	e009      	b.n	8005bb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3310      	adds	r3, #16
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fef2 	bl	8005990 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3324      	adds	r3, #36	; 0x24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff feed 	bl	8005990 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bb6:	f001 fef5 	bl	80079a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bba:	2301      	movs	r3, #1
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08e      	sub	sp, #56	; 0x38
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <xQueueGenericCreateStatic+0x52>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <xQueueGenericCreateStatic+0x56>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <xQueueGenericCreateStatic+0x58>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	623b      	str	r3, [r7, #32]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d102      	bne.n	8005c46 <xQueueGenericCreateStatic+0x7e>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <xQueueGenericCreateStatic+0x82>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <xQueueGenericCreateStatic+0x84>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	61fb      	str	r3, [r7, #28]
}
 8005c62:	bf00      	nop
 8005c64:	e7fe      	b.n	8005c64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c66:	2348      	movs	r3, #72	; 0x48
 8005c68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b48      	cmp	r3, #72	; 0x48
 8005c6e:	d00a      	beq.n	8005c86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	61bb      	str	r3, [r7, #24]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00d      	beq.n	8005cac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c98:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f843 	bl	8005d32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3730      	adds	r7, #48	; 0x30
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b08a      	sub	sp, #40	; 0x28
 8005cba:	af02      	add	r7, sp, #8
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	613b      	str	r3, [r7, #16]
}
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	e004      	b.n	8005cf6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
 8005cf4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	3348      	adds	r3, #72	; 0x48
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 ff44 	bl	8007b88 <pvPortMalloc>
 8005d00:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00f      	beq.n	8005d28 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	3348      	adds	r3, #72	; 0x48
 8005d0c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d16:	79fa      	ldrb	r2, [r7, #7]
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f805 	bl	8005d32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005d28:	69bb      	ldr	r3, [r7, #24]
	}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d103      	bne.n	8005d4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e002      	b.n	8005d54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d60:	2101      	movs	r1, #1
 8005d62:	69b8      	ldr	r0, [r7, #24]
 8005d64:	f7ff fec8 	bl	8005af8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00e      	beq.n	8005d9c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d90:	2300      	movs	r3, #0
 8005d92:	2200      	movs	r2, #0
 8005d94:	2100      	movs	r1, #0
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f838 	bl	8005e0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dae:	2301      	movs	r3, #1
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	2300      	movs	r3, #0
 8005db4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	461a      	mov	r2, r3
 8005dba:	6939      	ldr	r1, [r7, #16]
 8005dbc:	6978      	ldr	r0, [r7, #20]
 8005dbe:	f7ff ff7a 	bl	8005cb6 <xQueueGenericCreate>
 8005dc2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff ffd3 	bl	8005d70 <prvInitialiseMutex>

		return pxNewQueue;
 8005dca:	68fb      	ldr	r3, [r7, #12]
	}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	4603      	mov	r3, r0
 8005ddc:	6039      	str	r1, [r7, #0]
 8005dde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005de0:	2301      	movs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	6939      	ldr	r1, [r7, #16]
 8005df2:	6978      	ldr	r0, [r7, #20]
 8005df4:	f7ff fee8 	bl	8005bc8 <xQueueGenericCreateStatic>
 8005df8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff ffb8 	bl	8005d70 <prvInitialiseMutex>

		return pxNewQueue;
 8005e00:	68fb      	ldr	r3, [r7, #12]
	}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08e      	sub	sp, #56	; 0x38
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xQueueGenericSend+0x32>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <xQueueGenericSend+0x40>
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <xQueueGenericSend+0x44>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <xQueueGenericSend+0x46>
 8005e50:	2300      	movs	r3, #0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <xQueueGenericSend+0x60>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d103      	bne.n	8005e7a <xQueueGenericSend+0x6e>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <xQueueGenericSend+0x72>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <xQueueGenericSend+0x74>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <xQueueGenericSend+0x8e>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	623b      	str	r3, [r7, #32]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e9a:	f001 f9e1 	bl	8007260 <xTaskGetSchedulerState>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <xQueueGenericSend+0x9e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <xQueueGenericSend+0xa2>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <xQueueGenericSend+0xa4>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <xQueueGenericSend+0xbe>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	61fb      	str	r3, [r7, #28]
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eca:	f001 fd3b 	bl	8007944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <xQueueGenericSend+0xd4>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d129      	bne.n	8005f34 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee6:	f000 fac1 	bl	800646c <prvCopyDataToQueue>
 8005eea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d010      	beq.n	8005f16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	3324      	adds	r3, #36	; 0x24
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 ffef 	bl	8006edc <xTaskRemoveFromEventList>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d013      	beq.n	8005f2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f04:	4b3f      	ldr	r3, [pc, #252]	; (8006004 <xQueueGenericSend+0x1f8>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	e00a      	b.n	8005f2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f1c:	4b39      	ldr	r3, [pc, #228]	; (8006004 <xQueueGenericSend+0x1f8>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f2c:	f001 fd3a 	bl	80079a4 <vPortExitCritical>
				return pdPASS;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e063      	b.n	8005ffc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f3a:	f001 fd33 	bl	80079a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e05c      	b.n	8005ffc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f48:	f107 0314 	add.w	r3, r7, #20
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 f827 	bl	8006fa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f52:	2301      	movs	r3, #1
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f56:	f001 fd25 	bl	80079a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f5a:	f000 fdb5 	bl	8006ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f5e:	f001 fcf1 	bl	8007944 <vPortEnterCritical>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f6e:	d103      	bne.n	8005f78 <xQueueGenericSend+0x16c>
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f7e:	b25b      	sxtb	r3, r3
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f84:	d103      	bne.n	8005f8e <xQueueGenericSend+0x182>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f8e:	f001 fd09 	bl	80079a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f92:	1d3a      	adds	r2, r7, #4
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f816 	bl	8006fcc <xTaskCheckForTimeOut>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d124      	bne.n	8005ff0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fa8:	f000 fb58 	bl	800665c <prvIsQueueFull>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d018      	beq.n	8005fe4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	3310      	adds	r3, #16
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 ff6a 	bl	8006e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fc2:	f000 fae3 	bl	800658c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fc6:	f000 fd8d 	bl	8006ae4 <xTaskResumeAll>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f47f af7c 	bne.w	8005eca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <xQueueGenericSend+0x1f8>)
 8005fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	e772      	b.n	8005eca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fe6:	f000 fad1 	bl	800658c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fea:	f000 fd7b 	bl	8006ae4 <xTaskResumeAll>
 8005fee:	e76c      	b.n	8005eca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ff2:	f000 facb 	bl	800658c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ff6:	f000 fd75 	bl	8006ae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ffa:	2300      	movs	r3, #0
		}
	}
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3738      	adds	r7, #56	; 0x38
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	623b      	str	r3, [r7, #32]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <xQueueGiveFromISR+0x48>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	61fb      	str	r3, [r7, #28]
}
 800604c:	bf00      	nop
 800604e:	e7fe      	b.n	800604e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d103      	bne.n	8006060 <xQueueGiveFromISR+0x58>
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <xQueueGiveFromISR+0x5c>
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <xQueueGiveFromISR+0x5e>
 8006064:	2300      	movs	r3, #0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <xQueueGiveFromISR+0x78>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	61bb      	str	r3, [r7, #24]
}
 800607c:	bf00      	nop
 800607e:	e7fe      	b.n	800607e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006080:	f001 fd42 	bl	8007b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006084:	f3ef 8211 	mrs	r2, BASEPRI
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	617a      	str	r2, [r7, #20]
 800609a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800609c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d22b      	bcs.n	8006108 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ca:	d112      	bne.n	80060f2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d016      	beq.n	8006102 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	3324      	adds	r3, #36	; 0x24
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 feff 	bl	8006edc <xTaskRemoveFromEventList>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00e      	beq.n	8006102 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00b      	beq.n	8006102 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	e007      	b.n	8006102 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f6:	3301      	adds	r3, #1
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	b25a      	sxtb	r2, r3
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006102:	2301      	movs	r3, #1
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
 8006106:	e001      	b.n	800610c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006108:	2300      	movs	r3, #0
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006116:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800611a:	4618      	mov	r0, r3
 800611c:	3738      	adds	r7, #56	; 0x38
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08e      	sub	sp, #56	; 0x38
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006136:	2300      	movs	r3, #0
 8006138:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	623b      	str	r3, [r7, #32]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	61fb      	str	r3, [r7, #28]
}
 8006170:	bf00      	nop
 8006172:	e7fe      	b.n	8006172 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006174:	f001 f874 	bl	8007260 <xTaskGetSchedulerState>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <xQueueSemaphoreTake+0x60>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <xQueueSemaphoreTake+0x64>
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <xQueueSemaphoreTake+0x66>
 8006188:	2300      	movs	r3, #0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	61bb      	str	r3, [r7, #24]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80061a4:	f001 fbce 	bl	8007944 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d024      	beq.n	80061fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	1e5a      	subs	r2, r3, #1
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80061c4:	f001 fa16 	bl	80075f4 <pvTaskIncrementMutexHeldCount>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00f      	beq.n	80061f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	3310      	adds	r3, #16
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fe7e 	bl	8006edc <xTaskRemoveFromEventList>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061e6:	4b54      	ldr	r3, [pc, #336]	; (8006338 <xQueueSemaphoreTake+0x214>)
 80061e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061f6:	f001 fbd5 	bl	80079a4 <vPortExitCritical>
				return pdPASS;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e097      	b.n	800632e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d111      	bne.n	8006228 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	617b      	str	r3, [r7, #20]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006220:	f001 fbc0 	bl	80079a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006224:	2300      	movs	r3, #0
 8006226:	e082      	b.n	800632e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800622e:	f107 030c 	add.w	r3, r7, #12
 8006232:	4618      	mov	r0, r3
 8006234:	f000 feb4 	bl	8006fa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800623c:	f001 fbb2 	bl	80079a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006240:	f000 fc42 	bl	8006ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006244:	f001 fb7e 	bl	8007944 <vPortEnterCritical>
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800624e:	b25b      	sxtb	r3, r3
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006254:	d103      	bne.n	800625e <xQueueSemaphoreTake+0x13a>
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006264:	b25b      	sxtb	r3, r3
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800626a:	d103      	bne.n	8006274 <xQueueSemaphoreTake+0x150>
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006274:	f001 fb96 	bl	80079a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006278:	463a      	mov	r2, r7
 800627a:	f107 030c 	add.w	r3, r7, #12
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fea3 	bl	8006fcc <xTaskCheckForTimeOut>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d132      	bne.n	80062f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800628c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800628e:	f000 f9cf 	bl	8006630 <prvIsQueueEmpty>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d026      	beq.n	80062e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80062a0:	f001 fb50 	bl	8007944 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fff7 	bl	800729c <xTaskPriorityInherit>
 80062ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80062b0:	f001 fb78 	bl	80079a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	3324      	adds	r3, #36	; 0x24
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	4611      	mov	r1, r2
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fde9 	bl	8006e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062c4:	f000 f962 	bl	800658c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062c8:	f000 fc0c 	bl	8006ae4 <xTaskResumeAll>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f47f af68 	bne.w	80061a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80062d4:	4b18      	ldr	r3, [pc, #96]	; (8006338 <xQueueSemaphoreTake+0x214>)
 80062d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	e75e      	b.n	80061a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062e8:	f000 f950 	bl	800658c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ec:	f000 fbfa 	bl	8006ae4 <xTaskResumeAll>
 80062f0:	e758      	b.n	80061a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062f4:	f000 f94a 	bl	800658c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f8:	f000 fbf4 	bl	8006ae4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062fe:	f000 f997 	bl	8006630 <prvIsQueueEmpty>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	f43f af4d 	beq.w	80061a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006310:	f001 fb18 	bl	8007944 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006316:	f000 f891 	bl	800643c <prvGetDisinheritPriorityAfterTimeout>
 800631a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006322:	4618      	mov	r0, r3
 8006324:	f001 f8c6 	bl	80074b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006328:	f001 fb3c 	bl	80079a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800632c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800632e:	4618      	mov	r0, r3
 8006330:	3738      	adds	r7, #56	; 0x38
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08e      	sub	sp, #56	; 0x38
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	623b      	str	r3, [r7, #32]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <xQueueReceiveFromISR+0x3a>
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <xQueueReceiveFromISR+0x3e>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <xQueueReceiveFromISR+0x40>
 800637a:	2300      	movs	r3, #0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	61fb      	str	r3, [r7, #28]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006396:	f001 fbb7 	bl	8007b08 <vPortValidateInterruptPriority>
	__asm volatile
 800639a:	f3ef 8211 	mrs	r2, BASEPRI
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	61ba      	str	r2, [r7, #24]
 80063b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80063b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d02f      	beq.n	8006422 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063d0:	f000 f8b6 	bl	8006540 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80063dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063e4:	d112      	bne.n	800640c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d016      	beq.n	800641c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	3310      	adds	r3, #16
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fd72 	bl	8006edc <xTaskRemoveFromEventList>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00e      	beq.n	800641c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e007      	b.n	800641c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800640c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006410:	3301      	adds	r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	b25a      	sxtb	r2, r3
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800641c:	2301      	movs	r3, #1
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
 8006420:	e001      	b.n	8006426 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006422:	2300      	movs	r3, #0
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	613b      	str	r3, [r7, #16]
	__asm volatile
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f383 8811 	msr	BASEPRI, r3
}
 8006430:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006434:	4618      	mov	r0, r3
 8006436:	3738      	adds	r7, #56	; 0x38
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d006      	beq.n	800645a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f1c3 0307 	rsb	r3, r3, #7
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e001      	b.n	800645e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800645e:	68fb      	ldr	r3, [r7, #12]
	}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10d      	bne.n	80064a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d14d      	bne.n	800652e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 ff86 	bl	80073a8 <xTaskPriorityDisinherit>
 800649c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	e043      	b.n	800652e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d119      	bne.n	80064e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6898      	ldr	r0, [r3, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	461a      	mov	r2, r3
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	f001 fd6a 	bl	8007f90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	441a      	add	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d32b      	bcc.n	800652e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	609a      	str	r2, [r3, #8]
 80064de:	e026      	b.n	800652e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68d8      	ldr	r0, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	461a      	mov	r2, r3
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	f001 fd50 	bl	8007f90 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	425b      	negs	r3, r3
 80064fa:	441a      	add	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d207      	bcs.n	800651c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	425b      	negs	r3, r3
 8006516:	441a      	add	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d105      	bne.n	800652e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	3b01      	subs	r3, #1
 800652c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006536:	697b      	ldr	r3, [r7, #20]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d018      	beq.n	8006584 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	441a      	add	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	429a      	cmp	r2, r3
 800656a:	d303      	bcc.n	8006574 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68d9      	ldr	r1, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	461a      	mov	r2, r3
 800657e:	6838      	ldr	r0, [r7, #0]
 8006580:	f001 fd06 	bl	8007f90 <memcpy>
	}
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006594:	f001 f9d6 	bl	8007944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800659e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065a0:	e011      	b.n	80065c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d012      	beq.n	80065d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3324      	adds	r3, #36	; 0x24
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fc94 	bl	8006edc <xTaskRemoveFromEventList>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065ba:	f000 fd69 	bl	8007090 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	dce9      	bgt.n	80065a2 <prvUnlockQueue+0x16>
 80065ce:	e000      	b.n	80065d2 <prvUnlockQueue+0x46>
					break;
 80065d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065da:	f001 f9e3 	bl	80079a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065de:	f001 f9b1 	bl	8007944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065ea:	e011      	b.n	8006610 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d012      	beq.n	800661a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3310      	adds	r3, #16
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fc6f 	bl	8006edc <xTaskRemoveFromEventList>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006604:	f000 fd44 	bl	8007090 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	3b01      	subs	r3, #1
 800660c:	b2db      	uxtb	r3, r3
 800660e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006614:	2b00      	cmp	r3, #0
 8006616:	dce9      	bgt.n	80065ec <prvUnlockQueue+0x60>
 8006618:	e000      	b.n	800661c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800661a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	22ff      	movs	r2, #255	; 0xff
 8006620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006624:	f001 f9be 	bl	80079a4 <vPortExitCritical>
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006638:	f001 f984 	bl	8007944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	2b00      	cmp	r3, #0
 8006642:	d102      	bne.n	800664a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006644:	2301      	movs	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e001      	b.n	800664e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800664e:	f001 f9a9 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 8006652:	68fb      	ldr	r3, [r7, #12]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006664:	f001 f96e 	bl	8007944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	429a      	cmp	r2, r3
 8006672:	d102      	bne.n	800667a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006674:	2301      	movs	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	e001      	b.n	800667e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800667e:	f001 f991 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 8006682:	68fb      	ldr	r3, [r7, #12]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08e      	sub	sp, #56	; 0x38
 8006690:	af04      	add	r7, sp, #16
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	623b      	str	r3, [r7, #32]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	61fb      	str	r3, [r7, #28]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066d2:	2354      	movs	r3, #84	; 0x54
 80066d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b54      	cmp	r3, #84	; 0x54
 80066da:	d00a      	beq.n	80066f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	61bb      	str	r3, [r7, #24]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01e      	beq.n	8006736 <xTaskCreateStatic+0xaa>
 80066f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01b      	beq.n	8006736 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006706:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006710:	2300      	movs	r3, #0
 8006712:	9303      	str	r3, [sp, #12]
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	9302      	str	r3, [sp, #8]
 8006718:	f107 0314 	add.w	r3, r7, #20
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f850 	bl	80067ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800672e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006730:	f000 f8cc 	bl	80068cc <prvAddNewTaskToReadyList>
 8006734:	e001      	b.n	800673a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800673a:	697b      	ldr	r3, [r7, #20]
	}
 800673c:	4618      	mov	r0, r3
 800673e:	3728      	adds	r7, #40	; 0x28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08c      	sub	sp, #48	; 0x30
 8006748:	af04      	add	r7, sp, #16
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4618      	mov	r0, r3
 800675a:	f001 fa15 	bl	8007b88 <pvPortMalloc>
 800675e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00e      	beq.n	8006784 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006766:	2054      	movs	r0, #84	; 0x54
 8006768:	f001 fa0e 	bl	8007b88 <pvPortMalloc>
 800676c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	631a      	str	r2, [r3, #48]	; 0x30
 800677a:	e005      	b.n	8006788 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800677c:	6978      	ldr	r0, [r7, #20]
 800677e:	f001 fac7 	bl	8007d10 <vPortFree>
 8006782:	e001      	b.n	8006788 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d017      	beq.n	80067be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	2300      	movs	r3, #0
 800679a:	9303      	str	r3, [sp, #12]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	9302      	str	r3, [sp, #8]
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f80e 	bl	80067ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067b2:	69f8      	ldr	r0, [r7, #28]
 80067b4:	f000 f88a 	bl	80068cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067b8:	2301      	movs	r3, #1
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	e002      	b.n	80067c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067c4:	69bb      	ldr	r3, [r7, #24]
	}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b088      	sub	sp, #32
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067e6:	3b01      	subs	r3, #1
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f023 0307 	bic.w	r3, r3, #7
 80067f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	617b      	str	r3, [r7, #20]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	e012      	b.n	8006842 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	4413      	add	r3, r2
 8006822:	7819      	ldrb	r1, [r3, #0]
 8006824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	3334      	adds	r3, #52	; 0x34
 800682c:	460a      	mov	r2, r1
 800682e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	4413      	add	r3, r2
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d006      	beq.n	800684a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	3301      	adds	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	2b0f      	cmp	r3, #15
 8006846:	d9e9      	bls.n	800681c <prvInitialiseNewTask+0x4e>
 8006848:	e000      	b.n	800684c <prvInitialiseNewTask+0x7e>
		{
			break;
 800684a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	2b06      	cmp	r3, #6
 8006858:	d901      	bls.n	800685e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800685a:	2306      	movs	r3, #6
 800685c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006868:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	2200      	movs	r2, #0
 800686e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	3304      	adds	r3, #4
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff f8ab 	bl	80059d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	3318      	adds	r3, #24
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff f8a6 	bl	80059d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006888:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	f1c3 0207 	rsb	r2, r3, #7
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006898:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	2200      	movs	r2, #0
 800689e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	69b8      	ldr	r0, [r7, #24]
 80068ae:	f000 ff1b 	bl	80076e8 <pxPortInitialiseStack>
 80068b2:	4602      	mov	r2, r0
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c4:	bf00      	nop
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068d4:	f001 f836 	bl	8007944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068d8:	4b2a      	ldr	r3, [pc, #168]	; (8006984 <prvAddNewTaskToReadyList+0xb8>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	4a29      	ldr	r2, [pc, #164]	; (8006984 <prvAddNewTaskToReadyList+0xb8>)
 80068e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068e2:	4b29      	ldr	r3, [pc, #164]	; (8006988 <prvAddNewTaskToReadyList+0xbc>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ea:	4a27      	ldr	r2, [pc, #156]	; (8006988 <prvAddNewTaskToReadyList+0xbc>)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068f0:	4b24      	ldr	r3, [pc, #144]	; (8006984 <prvAddNewTaskToReadyList+0xb8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d110      	bne.n	800691a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068f8:	f000 fbee 	bl	80070d8 <prvInitialiseTaskLists>
 80068fc:	e00d      	b.n	800691a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068fe:	4b23      	ldr	r3, [pc, #140]	; (800698c <prvAddNewTaskToReadyList+0xc0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006906:	4b20      	ldr	r3, [pc, #128]	; (8006988 <prvAddNewTaskToReadyList+0xbc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	429a      	cmp	r2, r3
 8006912:	d802      	bhi.n	800691a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006914:	4a1c      	ldr	r2, [pc, #112]	; (8006988 <prvAddNewTaskToReadyList+0xbc>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800691a:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <prvAddNewTaskToReadyList+0xc4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3301      	adds	r3, #1
 8006920:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <prvAddNewTaskToReadyList+0xc4>)
 8006922:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	2201      	movs	r2, #1
 800692a:	409a      	lsls	r2, r3
 800692c:	4b19      	ldr	r3, [pc, #100]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4313      	orrs	r3, r2
 8006932:	4a18      	ldr	r2, [pc, #96]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <prvAddNewTaskToReadyList+0xcc>)
 8006944:	441a      	add	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f7ff f84c 	bl	80059ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006952:	f001 f827 	bl	80079a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006956:	4b0d      	ldr	r3, [pc, #52]	; (800698c <prvAddNewTaskToReadyList+0xc0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00e      	beq.n	800697c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800695e:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <prvAddNewTaskToReadyList+0xbc>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	429a      	cmp	r2, r3
 800696a:	d207      	bcs.n	800697c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800696c:	4b0b      	ldr	r3, [pc, #44]	; (800699c <prvAddNewTaskToReadyList+0xd0>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	200005b8 	.word	0x200005b8
 8006988:	200004b8 	.word	0x200004b8
 800698c:	200005c4 	.word	0x200005c4
 8006990:	200005d4 	.word	0x200005d4
 8006994:	200005c0 	.word	0x200005c0
 8006998:	200004bc 	.word	0x200004bc
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d017      	beq.n	80069e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069b2:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <vTaskDelay+0x60>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <vTaskDelay+0x30>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	60bb      	str	r3, [r7, #8]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069d0:	f000 f87a 	bl	8006ac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069d4:	2100      	movs	r1, #0
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fe20 	bl	800761c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069dc:	f000 f882 	bl	8006ae4 <xTaskResumeAll>
 80069e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d107      	bne.n	80069f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069e8:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <vTaskDelay+0x64>)
 80069ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	200005e0 	.word	0x200005e0
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	; 0x28
 8006a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a16:	463a      	mov	r2, r7
 8006a18:	1d39      	adds	r1, r7, #4
 8006a1a:	f107 0308 	add.w	r3, r7, #8
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fa facc 	bl	8000fbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	9202      	str	r2, [sp, #8]
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	2300      	movs	r3, #0
 8006a34:	460a      	mov	r2, r1
 8006a36:	491e      	ldr	r1, [pc, #120]	; (8006ab0 <vTaskStartScheduler+0xa8>)
 8006a38:	481e      	ldr	r0, [pc, #120]	; (8006ab4 <vTaskStartScheduler+0xac>)
 8006a3a:	f7ff fe27 	bl	800668c <xTaskCreateStatic>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <vTaskStartScheduler+0xb0>)
 8006a42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a44:	4b1c      	ldr	r3, [pc, #112]	; (8006ab8 <vTaskStartScheduler+0xb0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	e001      	b.n	8006a56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d116      	bne.n	8006a8a <vTaskStartScheduler+0x82>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	613b      	str	r3, [r7, #16]
}
 8006a6e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <vTaskStartScheduler+0xb4>)
 8006a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a78:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <vTaskStartScheduler+0xb8>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a7e:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <vTaskStartScheduler+0xbc>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a84:	f000 febc 	bl	8007800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a88:	e00e      	b.n	8006aa8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a90:	d10a      	bne.n	8006aa8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	60fb      	str	r3, [r7, #12]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <vTaskStartScheduler+0x9e>
}
 8006aa8:	bf00      	nop
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	0800b184 	.word	0x0800b184
 8006ab4:	080070a9 	.word	0x080070a9
 8006ab8:	200005dc 	.word	0x200005dc
 8006abc:	200005d8 	.word	0x200005d8
 8006ac0:	200005c4 	.word	0x200005c4
 8006ac4:	200005bc 	.word	0x200005bc

08006ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006acc:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <vTaskSuspendAll+0x18>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	4a03      	ldr	r2, [pc, #12]	; (8006ae0 <vTaskSuspendAll+0x18>)
 8006ad4:	6013      	str	r3, [r2, #0]
}
 8006ad6:	bf00      	nop
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	200005e0 	.word	0x200005e0

08006ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006af2:	4b41      	ldr	r3, [pc, #260]	; (8006bf8 <xTaskResumeAll+0x114>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <xTaskResumeAll+0x2c>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	603b      	str	r3, [r7, #0]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b10:	f000 ff18 	bl	8007944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b14:	4b38      	ldr	r3, [pc, #224]	; (8006bf8 <xTaskResumeAll+0x114>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	4a37      	ldr	r2, [pc, #220]	; (8006bf8 <xTaskResumeAll+0x114>)
 8006b1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b1e:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <xTaskResumeAll+0x114>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d161      	bne.n	8006bea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b26:	4b35      	ldr	r3, [pc, #212]	; (8006bfc <xTaskResumeAll+0x118>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d05d      	beq.n	8006bea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b2e:	e02e      	b.n	8006b8e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b30:	4b33      	ldr	r3, [pc, #204]	; (8006c00 <xTaskResumeAll+0x11c>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3318      	adds	r3, #24
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe ffb1 	bl	8005aa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe ffac 	bl	8005aa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	2201      	movs	r2, #1
 8006b52:	409a      	lsls	r2, r3
 8006b54:	4b2b      	ldr	r3, [pc, #172]	; (8006c04 <xTaskResumeAll+0x120>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	4a2a      	ldr	r2, [pc, #168]	; (8006c04 <xTaskResumeAll+0x120>)
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	4613      	mov	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4a27      	ldr	r2, [pc, #156]	; (8006c08 <xTaskResumeAll+0x124>)
 8006b6c:	441a      	add	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4619      	mov	r1, r3
 8006b74:	4610      	mov	r0, r2
 8006b76:	f7fe ff38 	bl	80059ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7e:	4b23      	ldr	r3, [pc, #140]	; (8006c0c <xTaskResumeAll+0x128>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d302      	bcc.n	8006b8e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006b88:	4b21      	ldr	r3, [pc, #132]	; (8006c10 <xTaskResumeAll+0x12c>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b8e:	4b1c      	ldr	r3, [pc, #112]	; (8006c00 <xTaskResumeAll+0x11c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1cc      	bne.n	8006b30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b9c:	f000 fb3a 	bl	8007214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ba0:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <xTaskResumeAll+0x130>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d010      	beq.n	8006bce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bac:	f000 f858 	bl	8006c60 <xTaskIncrementTick>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006bb6:	4b16      	ldr	r3, [pc, #88]	; (8006c10 <xTaskResumeAll+0x12c>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1f1      	bne.n	8006bac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006bc8:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <xTaskResumeAll+0x130>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bce:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <xTaskResumeAll+0x12c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bda:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <xTaskResumeAll+0x134>)
 8006bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bea:	f000 fedb 	bl	80079a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006bee:	68bb      	ldr	r3, [r7, #8]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	200005e0 	.word	0x200005e0
 8006bfc:	200005b8 	.word	0x200005b8
 8006c00:	20000578 	.word	0x20000578
 8006c04:	200005c0 	.word	0x200005c0
 8006c08:	200004bc 	.word	0x200004bc
 8006c0c:	200004b8 	.word	0x200004b8
 8006c10:	200005cc 	.word	0x200005cc
 8006c14:	200005c8 	.word	0x200005c8
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <xTaskGetTickCount+0x1c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c28:	687b      	ldr	r3, [r7, #4]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	200005bc 	.word	0x200005bc

08006c3c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c42:	f000 ff61 	bl	8007b08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006c4a:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <xTaskGetTickCountFromISR+0x20>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c50:	683b      	ldr	r3, [r7, #0]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200005bc 	.word	0x200005bc

08006c60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c6a:	4b51      	ldr	r3, [pc, #324]	; (8006db0 <xTaskIncrementTick+0x150>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f040 808d 	bne.w	8006d8e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c74:	4b4f      	ldr	r3, [pc, #316]	; (8006db4 <xTaskIncrementTick+0x154>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c7c:	4a4d      	ldr	r2, [pc, #308]	; (8006db4 <xTaskIncrementTick+0x154>)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d120      	bne.n	8006cca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c88:	4b4b      	ldr	r3, [pc, #300]	; (8006db8 <xTaskIncrementTick+0x158>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	603b      	str	r3, [r7, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <xTaskIncrementTick+0x46>
 8006ca8:	4b43      	ldr	r3, [pc, #268]	; (8006db8 <xTaskIncrementTick+0x158>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	4b43      	ldr	r3, [pc, #268]	; (8006dbc <xTaskIncrementTick+0x15c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a41      	ldr	r2, [pc, #260]	; (8006db8 <xTaskIncrementTick+0x158>)
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	4a41      	ldr	r2, [pc, #260]	; (8006dbc <xTaskIncrementTick+0x15c>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	4b40      	ldr	r3, [pc, #256]	; (8006dc0 <xTaskIncrementTick+0x160>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	4a3f      	ldr	r2, [pc, #252]	; (8006dc0 <xTaskIncrementTick+0x160>)
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	f000 faa5 	bl	8007214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cca:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <xTaskIncrementTick+0x164>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d34d      	bcc.n	8006d70 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cd4:	4b38      	ldr	r3, [pc, #224]	; (8006db8 <xTaskIncrementTick+0x158>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <xTaskIncrementTick+0x82>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <xTaskIncrementTick+0x84>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce8:	4b36      	ldr	r3, [pc, #216]	; (8006dc4 <xTaskIncrementTick+0x164>)
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cee:	601a      	str	r2, [r3, #0]
					break;
 8006cf0:	e03e      	b.n	8006d70 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006cf2:	4b31      	ldr	r3, [pc, #196]	; (8006db8 <xTaskIncrementTick+0x158>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d203      	bcs.n	8006d12 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d0a:	4a2e      	ldr	r2, [pc, #184]	; (8006dc4 <xTaskIncrementTick+0x164>)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6013      	str	r3, [r2, #0]
						break;
 8006d10:	e02e      	b.n	8006d70 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	3304      	adds	r3, #4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fec4 	bl	8005aa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d004      	beq.n	8006d2e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	3318      	adds	r3, #24
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe febb 	bl	8005aa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	2201      	movs	r2, #1
 8006d34:	409a      	lsls	r2, r3
 8006d36:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <xTaskIncrementTick+0x168>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	4a22      	ldr	r2, [pc, #136]	; (8006dc8 <xTaskIncrementTick+0x168>)
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <xTaskIncrementTick+0x16c>)
 8006d4e:	441a      	add	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f7fe fe47 	bl	80059ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d60:	4b1b      	ldr	r3, [pc, #108]	; (8006dd0 <xTaskIncrementTick+0x170>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d3b4      	bcc.n	8006cd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d6e:	e7b1      	b.n	8006cd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d70:	4b17      	ldr	r3, [pc, #92]	; (8006dd0 <xTaskIncrementTick+0x170>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	4915      	ldr	r1, [pc, #84]	; (8006dcc <xTaskIncrementTick+0x16c>)
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d907      	bls.n	8006d98 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e004      	b.n	8006d98 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d8e:	4b11      	ldr	r3, [pc, #68]	; (8006dd4 <xTaskIncrementTick+0x174>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3301      	adds	r3, #1
 8006d94:	4a0f      	ldr	r2, [pc, #60]	; (8006dd4 <xTaskIncrementTick+0x174>)
 8006d96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d98:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <xTaskIncrementTick+0x178>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006da4:	697b      	ldr	r3, [r7, #20]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	200005e0 	.word	0x200005e0
 8006db4:	200005bc 	.word	0x200005bc
 8006db8:	20000570 	.word	0x20000570
 8006dbc:	20000574 	.word	0x20000574
 8006dc0:	200005d0 	.word	0x200005d0
 8006dc4:	200005d8 	.word	0x200005d8
 8006dc8:	200005c0 	.word	0x200005c0
 8006dcc:	200004bc 	.word	0x200004bc
 8006dd0:	200004b8 	.word	0x200004b8
 8006dd4:	200005c8 	.word	0x200005c8
 8006dd8:	200005cc 	.word	0x200005cc

08006ddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006de2:	4b27      	ldr	r3, [pc, #156]	; (8006e80 <vTaskSwitchContext+0xa4>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dea:	4b26      	ldr	r3, [pc, #152]	; (8006e84 <vTaskSwitchContext+0xa8>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006df0:	e03f      	b.n	8006e72 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <vTaskSwitchContext+0xa8>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006df8:	4b23      	ldr	r3, [pc, #140]	; (8006e88 <vTaskSwitchContext+0xac>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	fab3 f383 	clz	r3, r3
 8006e04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	f1c3 031f 	rsb	r3, r3, #31
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	491f      	ldr	r1, [pc, #124]	; (8006e8c <vTaskSwitchContext+0xb0>)
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4613      	mov	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	607b      	str	r3, [r7, #4]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <vTaskSwitchContext+0x5a>
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4a12      	ldr	r2, [pc, #72]	; (8006e8c <vTaskSwitchContext+0xb0>)
 8006e44:	4413      	add	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	605a      	str	r2, [r3, #4]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	3308      	adds	r3, #8
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d104      	bne.n	8006e68 <vTaskSwitchContext+0x8c>
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	605a      	str	r2, [r3, #4]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <vTaskSwitchContext+0xb4>)
 8006e70:	6013      	str	r3, [r2, #0]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	200005e0 	.word	0x200005e0
 8006e84:	200005cc 	.word	0x200005cc
 8006e88:	200005c0 	.word	0x200005c0
 8006e8c:	200004bc 	.word	0x200004bc
 8006e90:	200004b8 	.word	0x200004b8

08006e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	60fb      	str	r3, [r7, #12]
}
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eba:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <vTaskPlaceOnEventList+0x44>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3318      	adds	r3, #24
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fe fdb5 	bl	8005a32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ec8:	2101      	movs	r1, #1
 8006eca:	6838      	ldr	r0, [r7, #0]
 8006ecc:	f000 fba6 	bl	800761c <prvAddCurrentTaskToDelayedList>
}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	200004b8 	.word	0x200004b8

08006edc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	60fb      	str	r3, [r7, #12]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	3318      	adds	r3, #24
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fdc9 	bl	8005aa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f12:	4b1d      	ldr	r3, [pc, #116]	; (8006f88 <xTaskRemoveFromEventList+0xac>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d11c      	bne.n	8006f54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fdc0 	bl	8005aa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	2201      	movs	r2, #1
 8006f2a:	409a      	lsls	r2, r3
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <xTaskRemoveFromEventList+0xb0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	4a16      	ldr	r2, [pc, #88]	; (8006f8c <xTaskRemoveFromEventList+0xb0>)
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <xTaskRemoveFromEventList+0xb4>)
 8006f44:	441a      	add	r2, r3
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	f7fe fd4c 	bl	80059ea <vListInsertEnd>
 8006f52:	e005      	b.n	8006f60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3318      	adds	r3, #24
 8006f58:	4619      	mov	r1, r3
 8006f5a:	480e      	ldr	r0, [pc, #56]	; (8006f94 <xTaskRemoveFromEventList+0xb8>)
 8006f5c:	f7fe fd45 	bl	80059ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <xTaskRemoveFromEventList+0xbc>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d905      	bls.n	8006f7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f72:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <xTaskRemoveFromEventList+0xc0>)
 8006f74:	2201      	movs	r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e001      	b.n	8006f7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006f7e:	697b      	ldr	r3, [r7, #20]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200005e0 	.word	0x200005e0
 8006f8c:	200005c0 	.word	0x200005c0
 8006f90:	200004bc 	.word	0x200004bc
 8006f94:	20000578 	.word	0x20000578
 8006f98:	200004b8 	.word	0x200004b8
 8006f9c:	200005cc 	.word	0x200005cc

08006fa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <vTaskInternalSetTimeOutState+0x24>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <vTaskInternalSetTimeOutState+0x28>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	605a      	str	r2, [r3, #4]
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	200005d0 	.word	0x200005d0
 8006fc8:	200005bc 	.word	0x200005bc

08006fcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	613b      	str	r3, [r7, #16]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60fb      	str	r3, [r7, #12]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800700e:	f000 fc99 	bl	8007944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007012:	4b1d      	ldr	r3, [pc, #116]	; (8007088 <xTaskCheckForTimeOut+0xbc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702a:	d102      	bne.n	8007032 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800702c:	2300      	movs	r3, #0
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	e023      	b.n	800707a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4b15      	ldr	r3, [pc, #84]	; (800708c <xTaskCheckForTimeOut+0xc0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d007      	beq.n	800704e <xTaskCheckForTimeOut+0x82>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	429a      	cmp	r2, r3
 8007046:	d302      	bcc.n	800704e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007048:	2301      	movs	r3, #1
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e015      	b.n	800707a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	429a      	cmp	r2, r3
 8007056:	d20b      	bcs.n	8007070 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff ff9b 	bl	8006fa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	61fb      	str	r3, [r7, #28]
 800706e:	e004      	b.n	800707a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007076:	2301      	movs	r3, #1
 8007078:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800707a:	f000 fc93 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 800707e:	69fb      	ldr	r3, [r7, #28]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	200005bc 	.word	0x200005bc
 800708c:	200005d0 	.word	0x200005d0

08007090 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <vTaskMissedYield+0x14>)
 8007096:	2201      	movs	r2, #1
 8007098:	601a      	str	r2, [r3, #0]
}
 800709a:	bf00      	nop
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	200005cc 	.word	0x200005cc

080070a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070b0:	f000 f852 	bl	8007158 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070b4:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <prvIdleTask+0x28>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d9f9      	bls.n	80070b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <prvIdleTask+0x2c>)
 80070be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070cc:	e7f0      	b.n	80070b0 <prvIdleTask+0x8>
 80070ce:	bf00      	nop
 80070d0:	200004bc 	.word	0x200004bc
 80070d4:	e000ed04 	.word	0xe000ed04

080070d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070de:	2300      	movs	r3, #0
 80070e0:	607b      	str	r3, [r7, #4]
 80070e2:	e00c      	b.n	80070fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4a12      	ldr	r2, [pc, #72]	; (8007138 <prvInitialiseTaskLists+0x60>)
 80070f0:	4413      	add	r3, r2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fc4c 	bl	8005990 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3301      	adds	r3, #1
 80070fc:	607b      	str	r3, [r7, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b06      	cmp	r3, #6
 8007102:	d9ef      	bls.n	80070e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007104:	480d      	ldr	r0, [pc, #52]	; (800713c <prvInitialiseTaskLists+0x64>)
 8007106:	f7fe fc43 	bl	8005990 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800710a:	480d      	ldr	r0, [pc, #52]	; (8007140 <prvInitialiseTaskLists+0x68>)
 800710c:	f7fe fc40 	bl	8005990 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007110:	480c      	ldr	r0, [pc, #48]	; (8007144 <prvInitialiseTaskLists+0x6c>)
 8007112:	f7fe fc3d 	bl	8005990 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007116:	480c      	ldr	r0, [pc, #48]	; (8007148 <prvInitialiseTaskLists+0x70>)
 8007118:	f7fe fc3a 	bl	8005990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800711c:	480b      	ldr	r0, [pc, #44]	; (800714c <prvInitialiseTaskLists+0x74>)
 800711e:	f7fe fc37 	bl	8005990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007122:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <prvInitialiseTaskLists+0x78>)
 8007124:	4a05      	ldr	r2, [pc, #20]	; (800713c <prvInitialiseTaskLists+0x64>)
 8007126:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007128:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <prvInitialiseTaskLists+0x7c>)
 800712a:	4a05      	ldr	r2, [pc, #20]	; (8007140 <prvInitialiseTaskLists+0x68>)
 800712c:	601a      	str	r2, [r3, #0]
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200004bc 	.word	0x200004bc
 800713c:	20000548 	.word	0x20000548
 8007140:	2000055c 	.word	0x2000055c
 8007144:	20000578 	.word	0x20000578
 8007148:	2000058c 	.word	0x2000058c
 800714c:	200005a4 	.word	0x200005a4
 8007150:	20000570 	.word	0x20000570
 8007154:	20000574 	.word	0x20000574

08007158 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800715e:	e019      	b.n	8007194 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007160:	f000 fbf0 	bl	8007944 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007164:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <prvCheckTasksWaitingTermination+0x50>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3304      	adds	r3, #4
 8007170:	4618      	mov	r0, r3
 8007172:	f7fe fc97 	bl	8005aa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007176:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <prvCheckTasksWaitingTermination+0x54>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3b01      	subs	r3, #1
 800717c:	4a0b      	ldr	r2, [pc, #44]	; (80071ac <prvCheckTasksWaitingTermination+0x54>)
 800717e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <prvCheckTasksWaitingTermination+0x58>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3b01      	subs	r3, #1
 8007186:	4a0a      	ldr	r2, [pc, #40]	; (80071b0 <prvCheckTasksWaitingTermination+0x58>)
 8007188:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800718a:	f000 fc0b 	bl	80079a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f810 	bl	80071b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007194:	4b06      	ldr	r3, [pc, #24]	; (80071b0 <prvCheckTasksWaitingTermination+0x58>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e1      	bne.n	8007160 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	2000058c 	.word	0x2000058c
 80071ac:	200005b8 	.word	0x200005b8
 80071b0:	200005a0 	.word	0x200005a0

080071b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d108      	bne.n	80071d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fda0 	bl	8007d10 <vPortFree>
				vPortFree( pxTCB );
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fd9d 	bl	8007d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071d6:	e018      	b.n	800720a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d103      	bne.n	80071ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fd94 	bl	8007d10 <vPortFree>
	}
 80071e8:	e00f      	b.n	800720a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d00a      	beq.n	800720a <prvDeleteTCB+0x56>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	60fb      	str	r3, [r7, #12]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <prvDeleteTCB+0x54>
	}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <prvResetNextTaskUnblockTime+0x44>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <prvResetNextTaskUnblockTime+0x14>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <prvResetNextTaskUnblockTime+0x16>
 8007228:	2300      	movs	r3, #0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800722e:	4b0b      	ldr	r3, [pc, #44]	; (800725c <prvResetNextTaskUnblockTime+0x48>)
 8007230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007234:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007236:	e008      	b.n	800724a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007238:	4b07      	ldr	r3, [pc, #28]	; (8007258 <prvResetNextTaskUnblockTime+0x44>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	4a05      	ldr	r2, [pc, #20]	; (800725c <prvResetNextTaskUnblockTime+0x48>)
 8007248:	6013      	str	r3, [r2, #0]
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20000570 	.word	0x20000570
 800725c:	200005d8 	.word	0x200005d8

08007260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <xTaskGetSchedulerState+0x34>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800726e:	2301      	movs	r3, #1
 8007270:	607b      	str	r3, [r7, #4]
 8007272:	e008      	b.n	8007286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007274:	4b08      	ldr	r3, [pc, #32]	; (8007298 <xTaskGetSchedulerState+0x38>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800727c:	2302      	movs	r3, #2
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	e001      	b.n	8007286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007282:	2300      	movs	r3, #0
 8007284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007286:	687b      	ldr	r3, [r7, #4]
	}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	200005c4 	.word	0x200005c4
 8007298:	200005e0 	.word	0x200005e0

0800729c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d06e      	beq.n	8007390 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b6:	4b39      	ldr	r3, [pc, #228]	; (800739c <xTaskPriorityInherit+0x100>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	429a      	cmp	r2, r3
 80072be:	d25e      	bcs.n	800737e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	db06      	blt.n	80072d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072c8:	4b34      	ldr	r3, [pc, #208]	; (800739c <xTaskPriorityInherit+0x100>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	f1c3 0207 	rsb	r2, r3, #7
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6959      	ldr	r1, [r3, #20]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4a2e      	ldr	r2, [pc, #184]	; (80073a0 <xTaskPriorityInherit+0x104>)
 80072e8:	4413      	add	r3, r2
 80072ea:	4299      	cmp	r1, r3
 80072ec:	d101      	bne.n	80072f2 <xTaskPriorityInherit+0x56>
 80072ee:	2301      	movs	r3, #1
 80072f0:	e000      	b.n	80072f4 <xTaskPriorityInherit+0x58>
 80072f2:	2300      	movs	r3, #0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d03a      	beq.n	800736e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	3304      	adds	r3, #4
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe fbd1 	bl	8005aa4 <uxListRemove>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d115      	bne.n	8007334 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730c:	4924      	ldr	r1, [pc, #144]	; (80073a0 <xTaskPriorityInherit+0x104>)
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <xTaskPriorityInherit+0x98>
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	2201      	movs	r2, #1
 8007324:	fa02 f303 	lsl.w	r3, r2, r3
 8007328:	43da      	mvns	r2, r3
 800732a:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <xTaskPriorityInherit+0x108>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4013      	ands	r3, r2
 8007330:	4a1c      	ldr	r2, [pc, #112]	; (80073a4 <xTaskPriorityInherit+0x108>)
 8007332:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007334:	4b19      	ldr	r3, [pc, #100]	; (800739c <xTaskPriorityInherit+0x100>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	2201      	movs	r2, #1
 8007344:	409a      	lsls	r2, r3
 8007346:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <xTaskPriorityInherit+0x108>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4313      	orrs	r3, r2
 800734c:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <xTaskPriorityInherit+0x108>)
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007354:	4613      	mov	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4a10      	ldr	r2, [pc, #64]	; (80073a0 <xTaskPriorityInherit+0x104>)
 800735e:	441a      	add	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	3304      	adds	r3, #4
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f7fe fb3f 	bl	80059ea <vListInsertEnd>
 800736c:	e004      	b.n	8007378 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <xTaskPriorityInherit+0x100>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e008      	b.n	8007390 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007382:	4b06      	ldr	r3, [pc, #24]	; (800739c <xTaskPriorityInherit+0x100>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	429a      	cmp	r2, r3
 800738a:	d201      	bcs.n	8007390 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007390:	68fb      	ldr	r3, [r7, #12]
	}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	200004b8 	.word	0x200004b8
 80073a0:	200004bc 	.word	0x200004bc
 80073a4:	200005c0 	.word	0x200005c0

080073a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d06e      	beq.n	800749c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073be:	4b3a      	ldr	r3, [pc, #232]	; (80074a8 <xTaskPriorityDisinherit+0x100>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d00a      	beq.n	80073de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	60fb      	str	r3, [r7, #12]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	60bb      	str	r3, [r7, #8]
}
 80073f8:	bf00      	nop
 80073fa:	e7fe      	b.n	80073fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007400:	1e5a      	subs	r2, r3, #1
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740e:	429a      	cmp	r2, r3
 8007410:	d044      	beq.n	800749c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007416:	2b00      	cmp	r3, #0
 8007418:	d140      	bne.n	800749c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	3304      	adds	r3, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fb40 	bl	8005aa4 <uxListRemove>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d115      	bne.n	8007456 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742e:	491f      	ldr	r1, [pc, #124]	; (80074ac <xTaskPriorityDisinherit+0x104>)
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <xTaskPriorityDisinherit+0xae>
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	2201      	movs	r2, #1
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43da      	mvns	r2, r3
 800744c:	4b18      	ldr	r3, [pc, #96]	; (80074b0 <xTaskPriorityDisinherit+0x108>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4013      	ands	r3, r2
 8007452:	4a17      	ldr	r2, [pc, #92]	; (80074b0 <xTaskPriorityDisinherit+0x108>)
 8007454:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	f1c3 0207 	rsb	r2, r3, #7
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	2201      	movs	r2, #1
 8007470:	409a      	lsls	r2, r3
 8007472:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <xTaskPriorityDisinherit+0x108>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4313      	orrs	r3, r2
 8007478:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <xTaskPriorityDisinherit+0x108>)
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4a08      	ldr	r2, [pc, #32]	; (80074ac <xTaskPriorityDisinherit+0x104>)
 800748a:	441a      	add	r2, r3
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f7fe faa9 	bl	80059ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007498:	2301      	movs	r3, #1
 800749a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800749c:	697b      	ldr	r3, [r7, #20]
	}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200004b8 	.word	0x200004b8
 80074ac:	200004bc 	.word	0x200004bc
 80074b0:	200005c0 	.word	0x200005c0

080074b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074c2:	2301      	movs	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8088 	beq.w	80075de <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d902      	bls.n	80074fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	e002      	b.n	8007502 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007500:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	429a      	cmp	r2, r3
 800750a:	d068      	beq.n	80075de <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	429a      	cmp	r2, r3
 8007514:	d163      	bne.n	80075de <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007516:	4b34      	ldr	r3, [pc, #208]	; (80075e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	d10a      	bne.n	8007536 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60bb      	str	r3, [r7, #8]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	db04      	blt.n	8007554 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	f1c3 0207 	rsb	r2, r3, #7
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	6959      	ldr	r1, [r3, #20]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4a22      	ldr	r2, [pc, #136]	; (80075ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007564:	4413      	add	r3, r2
 8007566:	4299      	cmp	r1, r3
 8007568:	d101      	bne.n	800756e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800756a:	2301      	movs	r3, #1
 800756c:	e000      	b.n	8007570 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800756e:	2300      	movs	r3, #0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d034      	beq.n	80075de <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	3304      	adds	r3, #4
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fa93 	bl	8005aa4 <uxListRemove>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d115      	bne.n	80075b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007588:	4918      	ldr	r1, [pc, #96]	; (80075ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800758a:	4613      	mov	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	440b      	add	r3, r1
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10a      	bne.n	80075b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	2201      	movs	r2, #1
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	43da      	mvns	r2, r3
 80075a6:	4b12      	ldr	r3, [pc, #72]	; (80075f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4013      	ands	r3, r2
 80075ac:	4a10      	ldr	r2, [pc, #64]	; (80075f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80075ae:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	2201      	movs	r2, #1
 80075b6:	409a      	lsls	r2, r3
 80075b8:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4313      	orrs	r3, r2
 80075be:	4a0c      	ldr	r2, [pc, #48]	; (80075f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4a07      	ldr	r2, [pc, #28]	; (80075ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80075d0:	441a      	add	r2, r3
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f7fe fa06 	bl	80059ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075de:	bf00      	nop
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	200004b8 	.word	0x200004b8
 80075ec:	200004bc 	.word	0x200004bc
 80075f0:	200005c0 	.word	0x200005c0

080075f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <pvTaskIncrementMutexHeldCount+0x24>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007600:	4b05      	ldr	r3, [pc, #20]	; (8007618 <pvTaskIncrementMutexHeldCount+0x24>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007606:	3201      	adds	r2, #1
 8007608:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800760a:	4b03      	ldr	r3, [pc, #12]	; (8007618 <pvTaskIncrementMutexHeldCount+0x24>)
 800760c:	681b      	ldr	r3, [r3, #0]
	}
 800760e:	4618      	mov	r0, r3
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	200004b8 	.word	0x200004b8

0800761c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007626:	4b29      	ldr	r3, [pc, #164]	; (80076cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800762c:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3304      	adds	r3, #4
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fa36 	bl	8005aa4 <uxListRemove>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10b      	bne.n	8007656 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800763e:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	2201      	movs	r2, #1
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43da      	mvns	r2, r3
 800764c:	4b21      	ldr	r3, [pc, #132]	; (80076d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4013      	ands	r3, r2
 8007652:	4a20      	ldr	r2, [pc, #128]	; (80076d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007654:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800765c:	d10a      	bne.n	8007674 <prvAddCurrentTaskToDelayedList+0x58>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007664:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3304      	adds	r3, #4
 800766a:	4619      	mov	r1, r3
 800766c:	481a      	ldr	r0, [pc, #104]	; (80076d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800766e:	f7fe f9bc 	bl	80059ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007672:	e026      	b.n	80076c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800767c:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	429a      	cmp	r2, r3
 800768a:	d209      	bcs.n	80076a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800768c:	4b13      	ldr	r3, [pc, #76]	; (80076dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3304      	adds	r3, #4
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7fe f9ca 	bl	8005a32 <vListInsert>
}
 800769e:	e010      	b.n	80076c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a0:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fe f9c0 	bl	8005a32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076b2:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d202      	bcs.n	80076c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80076bc:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6013      	str	r3, [r2, #0]
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	200005bc 	.word	0x200005bc
 80076d0:	200004b8 	.word	0x200004b8
 80076d4:	200005c0 	.word	0x200005c0
 80076d8:	200005a4 	.word	0x200005a4
 80076dc:	20000574 	.word	0x20000574
 80076e0:	20000570 	.word	0x20000570
 80076e4:	200005d8 	.word	0x200005d8

080076e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3b04      	subs	r3, #4
 80076f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3b04      	subs	r3, #4
 8007706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f023 0201 	bic.w	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3b04      	subs	r3, #4
 8007716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007718:	4a0c      	ldr	r2, [pc, #48]	; (800774c <pxPortInitialiseStack+0x64>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3b14      	subs	r3, #20
 8007722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b04      	subs	r3, #4
 800772e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f06f 0202 	mvn.w	r2, #2
 8007736:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3b20      	subs	r3, #32
 800773c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800773e:	68fb      	ldr	r3, [r7, #12]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	08007751 	.word	0x08007751

08007750 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <prvTaskExitError+0x54>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007762:	d00a      	beq.n	800777a <prvTaskExitError+0x2a>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	60fb      	str	r3, [r7, #12]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <prvTaskExitError+0x28>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	60bb      	str	r3, [r7, #8]
}
 800778c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800778e:	bf00      	nop
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0fc      	beq.n	8007790 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007796:	bf00      	nop
 8007798:	bf00      	nop
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	2000002c 	.word	0x2000002c
	...

080077b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <pxCurrentTCBConst2>)
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	6808      	ldr	r0, [r1, #0]
 80077b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	f380 8809 	msr	PSP, r0
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8811 	msr	BASEPRI, r0
 80077ca:	4770      	bx	lr
 80077cc:	f3af 8000 	nop.w

080077d0 <pxCurrentTCBConst2>:
 80077d0:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop

080077d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077d8:	4808      	ldr	r0, [pc, #32]	; (80077fc <prvPortStartFirstTask+0x24>)
 80077da:	6800      	ldr	r0, [r0, #0]
 80077dc:	6800      	ldr	r0, [r0, #0]
 80077de:	f380 8808 	msr	MSP, r0
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8814 	msr	CONTROL, r0
 80077ea:	b662      	cpsie	i
 80077ec:	b661      	cpsie	f
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	df00      	svc	0
 80077f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077fa:	bf00      	nop
 80077fc:	e000ed08 	.word	0xe000ed08

08007800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007806:	4b46      	ldr	r3, [pc, #280]	; (8007920 <xPortStartScheduler+0x120>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a46      	ldr	r2, [pc, #280]	; (8007924 <xPortStartScheduler+0x124>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10a      	bne.n	8007826 <xPortStartScheduler+0x26>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	613b      	str	r3, [r7, #16]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007826:	4b3e      	ldr	r3, [pc, #248]	; (8007920 <xPortStartScheduler+0x120>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a3f      	ldr	r2, [pc, #252]	; (8007928 <xPortStartScheduler+0x128>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10a      	bne.n	8007846 <xPortStartScheduler+0x46>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60fb      	str	r3, [r7, #12]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007846:	4b39      	ldr	r3, [pc, #228]	; (800792c <xPortStartScheduler+0x12c>)
 8007848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007868:	b2da      	uxtb	r2, r3
 800786a:	4b31      	ldr	r3, [pc, #196]	; (8007930 <xPortStartScheduler+0x130>)
 800786c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800786e:	4b31      	ldr	r3, [pc, #196]	; (8007934 <xPortStartScheduler+0x134>)
 8007870:	2207      	movs	r2, #7
 8007872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007874:	e009      	b.n	800788a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <xPortStartScheduler+0x134>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3b01      	subs	r3, #1
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <xPortStartScheduler+0x134>)
 800787e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	b2db      	uxtb	r3, r3
 8007888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d0ef      	beq.n	8007876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007896:	4b27      	ldr	r3, [pc, #156]	; (8007934 <xPortStartScheduler+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1c3 0307 	rsb	r3, r3, #7
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d00a      	beq.n	80078b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60bb      	str	r3, [r7, #8]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <xPortStartScheduler+0x134>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <xPortStartScheduler+0x134>)
 80078c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078c2:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <xPortStartScheduler+0x134>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <xPortStartScheduler+0x134>)
 80078cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078d6:	4b18      	ldr	r3, [pc, #96]	; (8007938 <xPortStartScheduler+0x138>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <xPortStartScheduler+0x138>)
 80078dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <xPortStartScheduler+0x138>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a14      	ldr	r2, [pc, #80]	; (8007938 <xPortStartScheduler+0x138>)
 80078e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078ee:	f000 f8dd 	bl	8007aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078f2:	4b12      	ldr	r3, [pc, #72]	; (800793c <xPortStartScheduler+0x13c>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078f8:	f000 f8fc 	bl	8007af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078fc:	4b10      	ldr	r3, [pc, #64]	; (8007940 <xPortStartScheduler+0x140>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0f      	ldr	r2, [pc, #60]	; (8007940 <xPortStartScheduler+0x140>)
 8007902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007908:	f7ff ff66 	bl	80077d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800790c:	f7ff fa66 	bl	8006ddc <vTaskSwitchContext>
	prvTaskExitError();
 8007910:	f7ff ff1e 	bl	8007750 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	e000ed00 	.word	0xe000ed00
 8007924:	410fc271 	.word	0x410fc271
 8007928:	410fc270 	.word	0x410fc270
 800792c:	e000e400 	.word	0xe000e400
 8007930:	200005e4 	.word	0x200005e4
 8007934:	200005e8 	.word	0x200005e8
 8007938:	e000ed20 	.word	0xe000ed20
 800793c:	2000002c 	.word	0x2000002c
 8007940:	e000ef34 	.word	0xe000ef34

08007944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	607b      	str	r3, [r7, #4]
}
 800795c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <vPortEnterCritical+0x58>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	4a0d      	ldr	r2, [pc, #52]	; (800799c <vPortEnterCritical+0x58>)
 8007966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <vPortEnterCritical+0x58>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10f      	bne.n	8007990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <vPortEnterCritical+0x5c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <vPortEnterCritical+0x4c>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	603b      	str	r3, [r7, #0]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <vPortEnterCritical+0x4a>
	}
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	2000002c 	.word	0x2000002c
 80079a0:	e000ed04 	.word	0xe000ed04

080079a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079aa:	4b12      	ldr	r3, [pc, #72]	; (80079f4 <vPortExitCritical+0x50>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <vPortExitCritical+0x24>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	607b      	str	r3, [r7, #4]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <vPortExitCritical+0x50>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <vPortExitCritical+0x50>)
 80079d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <vPortExitCritical+0x50>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <vPortExitCritical+0x42>
 80079da:	2300      	movs	r3, #0
 80079dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	f383 8811 	msr	BASEPRI, r3
}
 80079e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	2000002c 	.word	0x2000002c
	...

08007a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a00:	f3ef 8009 	mrs	r0, PSP
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <pxCurrentTCBConst>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f01e 0f10 	tst.w	lr, #16
 8007a10:	bf08      	it	eq
 8007a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	6010      	str	r0, [r2, #0]
 8007a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a24:	f380 8811 	msr	BASEPRI, r0
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f7ff f9d4 	bl	8006ddc <vTaskSwitchContext>
 8007a34:	f04f 0000 	mov.w	r0, #0
 8007a38:	f380 8811 	msr	BASEPRI, r0
 8007a3c:	bc09      	pop	{r0, r3}
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a46:	f01e 0f10 	tst.w	lr, #16
 8007a4a:	bf08      	it	eq
 8007a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a50:	f380 8809 	msr	PSP, r0
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst>:
 8007a60:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a82:	f7ff f8ed 	bl	8006c60 <xTaskIncrementTick>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <SysTick_Handler+0x40>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <vPortSetupTimerInterrupt+0x38>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <vPortSetupTimerInterrupt+0x3c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <vPortSetupTimerInterrupt+0x40>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <vPortSetupTimerInterrupt+0x44>)
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	e000e010 	.word	0xe000e010
 8007ae4:	e000e018 	.word	0xe000e018
 8007ae8:	20000024 	.word	0x20000024
 8007aec:	10624dd3 	.word	0x10624dd3
 8007af0:	e000e014 	.word	0xe000e014

08007af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b04 <vPortEnableVFP+0x10>
 8007af8:	6801      	ldr	r1, [r0, #0]
 8007afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007afe:	6001      	str	r1, [r0, #0]
 8007b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b02:	bf00      	nop
 8007b04:	e000ed88 	.word	0xe000ed88

08007b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b0e:	f3ef 8305 	mrs	r3, IPSR
 8007b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b0f      	cmp	r3, #15
 8007b18:	d914      	bls.n	8007b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <vPortValidateInterruptPriority+0x70>)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b24:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <vPortValidateInterruptPriority+0x74>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	7afa      	ldrb	r2, [r7, #11]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d20a      	bcs.n	8007b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <vPortValidateInterruptPriority+0x78>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <vPortValidateInterruptPriority+0x7c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d90a      	bls.n	8007b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	603b      	str	r3, [r7, #0]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <vPortValidateInterruptPriority+0x60>
	}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	e000e3f0 	.word	0xe000e3f0
 8007b7c:	200005e4 	.word	0x200005e4
 8007b80:	e000ed0c 	.word	0xe000ed0c
 8007b84:	200005e8 	.word	0x200005e8

08007b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b94:	f7fe ff98 	bl	8006ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b98:	4b58      	ldr	r3, [pc, #352]	; (8007cfc <pvPortMalloc+0x174>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ba0:	f000 f910 	bl	8007dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ba4:	4b56      	ldr	r3, [pc, #344]	; (8007d00 <pvPortMalloc+0x178>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4013      	ands	r3, r2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f040 808e 	bne.w	8007cce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01d      	beq.n	8007bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bb8:	2208      	movs	r2, #8
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d014      	beq.n	8007bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f023 0307 	bic.w	r3, r3, #7
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	617b      	str	r3, [r7, #20]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d069      	beq.n	8007cce <pvPortMalloc+0x146>
 8007bfa:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <pvPortMalloc+0x17c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d864      	bhi.n	8007cce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c04:	4b40      	ldr	r3, [pc, #256]	; (8007d08 <pvPortMalloc+0x180>)
 8007c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c08:	4b3f      	ldr	r3, [pc, #252]	; (8007d08 <pvPortMalloc+0x180>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0e:	e004      	b.n	8007c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d903      	bls.n	8007c2c <pvPortMalloc+0xa4>
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1f1      	bne.n	8007c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c2c:	4b33      	ldr	r3, [pc, #204]	; (8007cfc <pvPortMalloc+0x174>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d04b      	beq.n	8007cce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	4413      	add	r3, r2
 8007c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	2308      	movs	r3, #8
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d91f      	bls.n	8007c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <pvPortMalloc+0xf8>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	613b      	str	r3, [r7, #16]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c92:	69b8      	ldr	r0, [r7, #24]
 8007c94:	f000 f8f8 	bl	8007e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c98:	4b1a      	ldr	r3, [pc, #104]	; (8007d04 <pvPortMalloc+0x17c>)
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	4a18      	ldr	r2, [pc, #96]	; (8007d04 <pvPortMalloc+0x17c>)
 8007ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ca6:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <pvPortMalloc+0x17c>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b18      	ldr	r3, [pc, #96]	; (8007d0c <pvPortMalloc+0x184>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d203      	bcs.n	8007cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cb2:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <pvPortMalloc+0x17c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a15      	ldr	r2, [pc, #84]	; (8007d0c <pvPortMalloc+0x184>)
 8007cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	4b10      	ldr	r3, [pc, #64]	; (8007d00 <pvPortMalloc+0x178>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cce:	f7fe ff09 	bl	8006ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <pvPortMalloc+0x16a>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	60fb      	str	r3, [r7, #12]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <pvPortMalloc+0x168>
	return pvReturn;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3728      	adds	r7, #40	; 0x28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	200041f4 	.word	0x200041f4
 8007d00:	20004200 	.word	0x20004200
 8007d04:	200041f8 	.word	0x200041f8
 8007d08:	200041ec 	.word	0x200041ec
 8007d0c:	200041fc 	.word	0x200041fc

08007d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d048      	beq.n	8007db4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d22:	2308      	movs	r3, #8
 8007d24:	425b      	negs	r3, r3
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4413      	add	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	4b21      	ldr	r3, [pc, #132]	; (8007dbc <vPortFree+0xac>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <vPortFree+0x44>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60fb      	str	r3, [r7, #12]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <vPortFree+0x62>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	60bb      	str	r3, [r7, #8]
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	4b11      	ldr	r3, [pc, #68]	; (8007dbc <vPortFree+0xac>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d019      	beq.n	8007db4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d115      	bne.n	8007db4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <vPortFree+0xac>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	43db      	mvns	r3, r3
 8007d92:	401a      	ands	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d98:	f7fe fe96 	bl	8006ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <vPortFree+0xb0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	4a06      	ldr	r2, [pc, #24]	; (8007dc0 <vPortFree+0xb0>)
 8007da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007daa:	6938      	ldr	r0, [r7, #16]
 8007dac:	f000 f86c 	bl	8007e88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007db0:	f7fe fe98 	bl	8006ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007db4:	bf00      	nop
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20004200 	.word	0x20004200
 8007dc0:	200041f8 	.word	0x200041f8

08007dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dd0:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <prvHeapInit+0xac>)
 8007dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00c      	beq.n	8007df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3307      	adds	r3, #7
 8007de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0307 	bic.w	r3, r3, #7
 8007dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	4a1f      	ldr	r2, [pc, #124]	; (8007e70 <prvHeapInit+0xac>)
 8007df4:	4413      	add	r3, r2
 8007df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dfc:	4a1d      	ldr	r2, [pc, #116]	; (8007e74 <prvHeapInit+0xb0>)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e02:	4b1c      	ldr	r3, [pc, #112]	; (8007e74 <prvHeapInit+0xb0>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e10:	2208      	movs	r2, #8
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0307 	bic.w	r3, r3, #7
 8007e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a15      	ldr	r2, [pc, #84]	; (8007e78 <prvHeapInit+0xb4>)
 8007e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e26:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <prvHeapInit+0xb4>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e2e:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <prvHeapInit+0xb4>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e44:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <prvHeapInit+0xb4>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	4a0a      	ldr	r2, [pc, #40]	; (8007e7c <prvHeapInit+0xb8>)
 8007e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	4a09      	ldr	r2, [pc, #36]	; (8007e80 <prvHeapInit+0xbc>)
 8007e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e5c:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <prvHeapInit+0xc0>)
 8007e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	200005ec 	.word	0x200005ec
 8007e74:	200041ec 	.word	0x200041ec
 8007e78:	200041f4 	.word	0x200041f4
 8007e7c:	200041fc 	.word	0x200041fc
 8007e80:	200041f8 	.word	0x200041f8
 8007e84:	20004200 	.word	0x20004200

08007e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e90:	4b28      	ldr	r3, [pc, #160]	; (8007f34 <prvInsertBlockIntoFreeList+0xac>)
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	e002      	b.n	8007e9c <prvInsertBlockIntoFreeList+0x14>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d8f7      	bhi.n	8007e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d108      	bne.n	8007eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	441a      	add	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	441a      	add	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d118      	bne.n	8007f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b15      	ldr	r3, [pc, #84]	; (8007f38 <prvInsertBlockIntoFreeList+0xb0>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d00d      	beq.n	8007f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	e008      	b.n	8007f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f06:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <prvInsertBlockIntoFreeList+0xb0>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e003      	b.n	8007f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d002      	beq.n	8007f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	200041ec 	.word	0x200041ec
 8007f38:	200041f4 	.word	0x200041f4

08007f3c <__errno>:
 8007f3c:	4b01      	ldr	r3, [pc, #4]	; (8007f44 <__errno+0x8>)
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20000030 	.word	0x20000030

08007f48 <__libc_init_array>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	4d0d      	ldr	r5, [pc, #52]	; (8007f80 <__libc_init_array+0x38>)
 8007f4c:	4c0d      	ldr	r4, [pc, #52]	; (8007f84 <__libc_init_array+0x3c>)
 8007f4e:	1b64      	subs	r4, r4, r5
 8007f50:	10a4      	asrs	r4, r4, #2
 8007f52:	2600      	movs	r6, #0
 8007f54:	42a6      	cmp	r6, r4
 8007f56:	d109      	bne.n	8007f6c <__libc_init_array+0x24>
 8007f58:	4d0b      	ldr	r5, [pc, #44]	; (8007f88 <__libc_init_array+0x40>)
 8007f5a:	4c0c      	ldr	r4, [pc, #48]	; (8007f8c <__libc_init_array+0x44>)
 8007f5c:	f003 f8b2 	bl	800b0c4 <_init>
 8007f60:	1b64      	subs	r4, r4, r5
 8007f62:	10a4      	asrs	r4, r4, #2
 8007f64:	2600      	movs	r6, #0
 8007f66:	42a6      	cmp	r6, r4
 8007f68:	d105      	bne.n	8007f76 <__libc_init_array+0x2e>
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}
 8007f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f70:	4798      	blx	r3
 8007f72:	3601      	adds	r6, #1
 8007f74:	e7ee      	b.n	8007f54 <__libc_init_array+0xc>
 8007f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7a:	4798      	blx	r3
 8007f7c:	3601      	adds	r6, #1
 8007f7e:	e7f2      	b.n	8007f66 <__libc_init_array+0x1e>
 8007f80:	0800b5e4 	.word	0x0800b5e4
 8007f84:	0800b5e4 	.word	0x0800b5e4
 8007f88:	0800b5e4 	.word	0x0800b5e4
 8007f8c:	0800b5e8 	.word	0x0800b5e8

08007f90 <memcpy>:
 8007f90:	440a      	add	r2, r1
 8007f92:	4291      	cmp	r1, r2
 8007f94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f98:	d100      	bne.n	8007f9c <memcpy+0xc>
 8007f9a:	4770      	bx	lr
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa6:	4291      	cmp	r1, r2
 8007fa8:	d1f9      	bne.n	8007f9e <memcpy+0xe>
 8007faa:	bd10      	pop	{r4, pc}

08007fac <memset>:
 8007fac:	4402      	add	r2, r0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d100      	bne.n	8007fb6 <memset+0xa>
 8007fb4:	4770      	bx	lr
 8007fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fba:	e7f9      	b.n	8007fb0 <memset+0x4>

08007fbc <siprintf>:
 8007fbc:	b40e      	push	{r1, r2, r3}
 8007fbe:	b500      	push	{lr}
 8007fc0:	b09c      	sub	sp, #112	; 0x70
 8007fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8007fc4:	9002      	str	r0, [sp, #8]
 8007fc6:	9006      	str	r0, [sp, #24]
 8007fc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fcc:	4809      	ldr	r0, [pc, #36]	; (8007ff4 <siprintf+0x38>)
 8007fce:	9107      	str	r1, [sp, #28]
 8007fd0:	9104      	str	r1, [sp, #16]
 8007fd2:	4909      	ldr	r1, [pc, #36]	; (8007ff8 <siprintf+0x3c>)
 8007fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd8:	9105      	str	r1, [sp, #20]
 8007fda:	6800      	ldr	r0, [r0, #0]
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	a902      	add	r1, sp, #8
 8007fe0:	f001 ff90 	bl	8009f04 <_svfiprintf_r>
 8007fe4:	9b02      	ldr	r3, [sp, #8]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	b01c      	add	sp, #112	; 0x70
 8007fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ff0:	b003      	add	sp, #12
 8007ff2:	4770      	bx	lr
 8007ff4:	20000030 	.word	0x20000030
 8007ff8:	ffff0208 	.word	0xffff0208

08007ffc <sulp>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4604      	mov	r4, r0
 8008000:	460d      	mov	r5, r1
 8008002:	ec45 4b10 	vmov	d0, r4, r5
 8008006:	4616      	mov	r6, r2
 8008008:	f001 fd68 	bl	8009adc <__ulp>
 800800c:	ec51 0b10 	vmov	r0, r1, d0
 8008010:	b17e      	cbz	r6, 8008032 <sulp+0x36>
 8008012:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008016:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800801a:	2b00      	cmp	r3, #0
 800801c:	dd09      	ble.n	8008032 <sulp+0x36>
 800801e:	051b      	lsls	r3, r3, #20
 8008020:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008024:	2400      	movs	r4, #0
 8008026:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800802a:	4622      	mov	r2, r4
 800802c:	462b      	mov	r3, r5
 800802e:	f7f8 faf3 	bl	8000618 <__aeabi_dmul>
 8008032:	bd70      	pop	{r4, r5, r6, pc}
 8008034:	0000      	movs	r0, r0
	...

08008038 <_strtod_l>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	b0a3      	sub	sp, #140	; 0x8c
 800803e:	461f      	mov	r7, r3
 8008040:	2300      	movs	r3, #0
 8008042:	931e      	str	r3, [sp, #120]	; 0x78
 8008044:	4ba4      	ldr	r3, [pc, #656]	; (80082d8 <_strtod_l+0x2a0>)
 8008046:	9219      	str	r2, [sp, #100]	; 0x64
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	9307      	str	r3, [sp, #28]
 800804c:	4604      	mov	r4, r0
 800804e:	4618      	mov	r0, r3
 8008050:	4688      	mov	r8, r1
 8008052:	f7f8 f8cd 	bl	80001f0 <strlen>
 8008056:	f04f 0a00 	mov.w	sl, #0
 800805a:	4605      	mov	r5, r0
 800805c:	f04f 0b00 	mov.w	fp, #0
 8008060:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008064:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008066:	781a      	ldrb	r2, [r3, #0]
 8008068:	2a2b      	cmp	r2, #43	; 0x2b
 800806a:	d04c      	beq.n	8008106 <_strtod_l+0xce>
 800806c:	d839      	bhi.n	80080e2 <_strtod_l+0xaa>
 800806e:	2a0d      	cmp	r2, #13
 8008070:	d832      	bhi.n	80080d8 <_strtod_l+0xa0>
 8008072:	2a08      	cmp	r2, #8
 8008074:	d832      	bhi.n	80080dc <_strtod_l+0xa4>
 8008076:	2a00      	cmp	r2, #0
 8008078:	d03c      	beq.n	80080f4 <_strtod_l+0xbc>
 800807a:	2300      	movs	r3, #0
 800807c:	930e      	str	r3, [sp, #56]	; 0x38
 800807e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008080:	7833      	ldrb	r3, [r6, #0]
 8008082:	2b30      	cmp	r3, #48	; 0x30
 8008084:	f040 80b4 	bne.w	80081f0 <_strtod_l+0x1b8>
 8008088:	7873      	ldrb	r3, [r6, #1]
 800808a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800808e:	2b58      	cmp	r3, #88	; 0x58
 8008090:	d16c      	bne.n	800816c <_strtod_l+0x134>
 8008092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	ab1e      	add	r3, sp, #120	; 0x78
 8008098:	9702      	str	r7, [sp, #8]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	4a8f      	ldr	r2, [pc, #572]	; (80082dc <_strtod_l+0x2a4>)
 800809e:	ab1f      	add	r3, sp, #124	; 0x7c
 80080a0:	a91d      	add	r1, sp, #116	; 0x74
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 fe94 	bl	8008dd0 <__gethex>
 80080a8:	f010 0707 	ands.w	r7, r0, #7
 80080ac:	4605      	mov	r5, r0
 80080ae:	d005      	beq.n	80080bc <_strtod_l+0x84>
 80080b0:	2f06      	cmp	r7, #6
 80080b2:	d12a      	bne.n	800810a <_strtod_l+0xd2>
 80080b4:	3601      	adds	r6, #1
 80080b6:	2300      	movs	r3, #0
 80080b8:	961d      	str	r6, [sp, #116]	; 0x74
 80080ba:	930e      	str	r3, [sp, #56]	; 0x38
 80080bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f040 8596 	bne.w	8008bf0 <_strtod_l+0xbb8>
 80080c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080c6:	b1db      	cbz	r3, 8008100 <_strtod_l+0xc8>
 80080c8:	4652      	mov	r2, sl
 80080ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80080ce:	ec43 2b10 	vmov	d0, r2, r3
 80080d2:	b023      	add	sp, #140	; 0x8c
 80080d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d8:	2a20      	cmp	r2, #32
 80080da:	d1ce      	bne.n	800807a <_strtod_l+0x42>
 80080dc:	3301      	adds	r3, #1
 80080de:	931d      	str	r3, [sp, #116]	; 0x74
 80080e0:	e7c0      	b.n	8008064 <_strtod_l+0x2c>
 80080e2:	2a2d      	cmp	r2, #45	; 0x2d
 80080e4:	d1c9      	bne.n	800807a <_strtod_l+0x42>
 80080e6:	2201      	movs	r2, #1
 80080e8:	920e      	str	r2, [sp, #56]	; 0x38
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	921d      	str	r2, [sp, #116]	; 0x74
 80080ee:	785b      	ldrb	r3, [r3, #1]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1c4      	bne.n	800807e <_strtod_l+0x46>
 80080f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f040 8576 	bne.w	8008bec <_strtod_l+0xbb4>
 8008100:	4652      	mov	r2, sl
 8008102:	465b      	mov	r3, fp
 8008104:	e7e3      	b.n	80080ce <_strtod_l+0x96>
 8008106:	2200      	movs	r2, #0
 8008108:	e7ee      	b.n	80080e8 <_strtod_l+0xb0>
 800810a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800810c:	b13a      	cbz	r2, 800811e <_strtod_l+0xe6>
 800810e:	2135      	movs	r1, #53	; 0x35
 8008110:	a820      	add	r0, sp, #128	; 0x80
 8008112:	f001 fdee 	bl	8009cf2 <__copybits>
 8008116:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008118:	4620      	mov	r0, r4
 800811a:	f001 f9b3 	bl	8009484 <_Bfree>
 800811e:	3f01      	subs	r7, #1
 8008120:	2f05      	cmp	r7, #5
 8008122:	d807      	bhi.n	8008134 <_strtod_l+0xfc>
 8008124:	e8df f007 	tbb	[pc, r7]
 8008128:	1d180b0e 	.word	0x1d180b0e
 800812c:	030e      	.short	0x030e
 800812e:	f04f 0b00 	mov.w	fp, #0
 8008132:	46da      	mov	sl, fp
 8008134:	0728      	lsls	r0, r5, #28
 8008136:	d5c1      	bpl.n	80080bc <_strtod_l+0x84>
 8008138:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800813c:	e7be      	b.n	80080bc <_strtod_l+0x84>
 800813e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008142:	e7f7      	b.n	8008134 <_strtod_l+0xfc>
 8008144:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008148:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800814a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800814e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008152:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008156:	e7ed      	b.n	8008134 <_strtod_l+0xfc>
 8008158:	f8df b184 	ldr.w	fp, [pc, #388]	; 80082e0 <_strtod_l+0x2a8>
 800815c:	f04f 0a00 	mov.w	sl, #0
 8008160:	e7e8      	b.n	8008134 <_strtod_l+0xfc>
 8008162:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008166:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800816a:	e7e3      	b.n	8008134 <_strtod_l+0xfc>
 800816c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	921d      	str	r2, [sp, #116]	; 0x74
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2b30      	cmp	r3, #48	; 0x30
 8008176:	d0f9      	beq.n	800816c <_strtod_l+0x134>
 8008178:	2b00      	cmp	r3, #0
 800817a:	d09f      	beq.n	80080bc <_strtod_l+0x84>
 800817c:	2301      	movs	r3, #1
 800817e:	f04f 0900 	mov.w	r9, #0
 8008182:	9304      	str	r3, [sp, #16]
 8008184:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008186:	930a      	str	r3, [sp, #40]	; 0x28
 8008188:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800818c:	464f      	mov	r7, r9
 800818e:	220a      	movs	r2, #10
 8008190:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008192:	7806      	ldrb	r6, [r0, #0]
 8008194:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008198:	b2d9      	uxtb	r1, r3
 800819a:	2909      	cmp	r1, #9
 800819c:	d92a      	bls.n	80081f4 <_strtod_l+0x1bc>
 800819e:	9907      	ldr	r1, [sp, #28]
 80081a0:	462a      	mov	r2, r5
 80081a2:	f002 f963 	bl	800a46c <strncmp>
 80081a6:	b398      	cbz	r0, 8008210 <_strtod_l+0x1d8>
 80081a8:	2000      	movs	r0, #0
 80081aa:	4633      	mov	r3, r6
 80081ac:	463d      	mov	r5, r7
 80081ae:	9007      	str	r0, [sp, #28]
 80081b0:	4602      	mov	r2, r0
 80081b2:	2b65      	cmp	r3, #101	; 0x65
 80081b4:	d001      	beq.n	80081ba <_strtod_l+0x182>
 80081b6:	2b45      	cmp	r3, #69	; 0x45
 80081b8:	d118      	bne.n	80081ec <_strtod_l+0x1b4>
 80081ba:	b91d      	cbnz	r5, 80081c4 <_strtod_l+0x18c>
 80081bc:	9b04      	ldr	r3, [sp, #16]
 80081be:	4303      	orrs	r3, r0
 80081c0:	d098      	beq.n	80080f4 <_strtod_l+0xbc>
 80081c2:	2500      	movs	r5, #0
 80081c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80081c8:	f108 0301 	add.w	r3, r8, #1
 80081cc:	931d      	str	r3, [sp, #116]	; 0x74
 80081ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80081d2:	2b2b      	cmp	r3, #43	; 0x2b
 80081d4:	d075      	beq.n	80082c2 <_strtod_l+0x28a>
 80081d6:	2b2d      	cmp	r3, #45	; 0x2d
 80081d8:	d07b      	beq.n	80082d2 <_strtod_l+0x29a>
 80081da:	f04f 0c00 	mov.w	ip, #0
 80081de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80081e2:	2909      	cmp	r1, #9
 80081e4:	f240 8082 	bls.w	80082ec <_strtod_l+0x2b4>
 80081e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80081ec:	2600      	movs	r6, #0
 80081ee:	e09d      	b.n	800832c <_strtod_l+0x2f4>
 80081f0:	2300      	movs	r3, #0
 80081f2:	e7c4      	b.n	800817e <_strtod_l+0x146>
 80081f4:	2f08      	cmp	r7, #8
 80081f6:	bfd8      	it	le
 80081f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80081fa:	f100 0001 	add.w	r0, r0, #1
 80081fe:	bfda      	itte	le
 8008200:	fb02 3301 	mlale	r3, r2, r1, r3
 8008204:	9309      	strle	r3, [sp, #36]	; 0x24
 8008206:	fb02 3909 	mlagt	r9, r2, r9, r3
 800820a:	3701      	adds	r7, #1
 800820c:	901d      	str	r0, [sp, #116]	; 0x74
 800820e:	e7bf      	b.n	8008190 <_strtod_l+0x158>
 8008210:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008212:	195a      	adds	r2, r3, r5
 8008214:	921d      	str	r2, [sp, #116]	; 0x74
 8008216:	5d5b      	ldrb	r3, [r3, r5]
 8008218:	2f00      	cmp	r7, #0
 800821a:	d037      	beq.n	800828c <_strtod_l+0x254>
 800821c:	9007      	str	r0, [sp, #28]
 800821e:	463d      	mov	r5, r7
 8008220:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008224:	2a09      	cmp	r2, #9
 8008226:	d912      	bls.n	800824e <_strtod_l+0x216>
 8008228:	2201      	movs	r2, #1
 800822a:	e7c2      	b.n	80081b2 <_strtod_l+0x17a>
 800822c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	921d      	str	r2, [sp, #116]	; 0x74
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	3001      	adds	r0, #1
 8008236:	2b30      	cmp	r3, #48	; 0x30
 8008238:	d0f8      	beq.n	800822c <_strtod_l+0x1f4>
 800823a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800823e:	2a08      	cmp	r2, #8
 8008240:	f200 84db 	bhi.w	8008bfa <_strtod_l+0xbc2>
 8008244:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008246:	9007      	str	r0, [sp, #28]
 8008248:	2000      	movs	r0, #0
 800824a:	920a      	str	r2, [sp, #40]	; 0x28
 800824c:	4605      	mov	r5, r0
 800824e:	3b30      	subs	r3, #48	; 0x30
 8008250:	f100 0201 	add.w	r2, r0, #1
 8008254:	d014      	beq.n	8008280 <_strtod_l+0x248>
 8008256:	9907      	ldr	r1, [sp, #28]
 8008258:	4411      	add	r1, r2
 800825a:	9107      	str	r1, [sp, #28]
 800825c:	462a      	mov	r2, r5
 800825e:	eb00 0e05 	add.w	lr, r0, r5
 8008262:	210a      	movs	r1, #10
 8008264:	4572      	cmp	r2, lr
 8008266:	d113      	bne.n	8008290 <_strtod_l+0x258>
 8008268:	182a      	adds	r2, r5, r0
 800826a:	2a08      	cmp	r2, #8
 800826c:	f105 0501 	add.w	r5, r5, #1
 8008270:	4405      	add	r5, r0
 8008272:	dc1c      	bgt.n	80082ae <_strtod_l+0x276>
 8008274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008276:	220a      	movs	r2, #10
 8008278:	fb02 3301 	mla	r3, r2, r1, r3
 800827c:	9309      	str	r3, [sp, #36]	; 0x24
 800827e:	2200      	movs	r2, #0
 8008280:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008282:	1c59      	adds	r1, r3, #1
 8008284:	911d      	str	r1, [sp, #116]	; 0x74
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	4610      	mov	r0, r2
 800828a:	e7c9      	b.n	8008220 <_strtod_l+0x1e8>
 800828c:	4638      	mov	r0, r7
 800828e:	e7d2      	b.n	8008236 <_strtod_l+0x1fe>
 8008290:	2a08      	cmp	r2, #8
 8008292:	dc04      	bgt.n	800829e <_strtod_l+0x266>
 8008294:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008296:	434e      	muls	r6, r1
 8008298:	9609      	str	r6, [sp, #36]	; 0x24
 800829a:	3201      	adds	r2, #1
 800829c:	e7e2      	b.n	8008264 <_strtod_l+0x22c>
 800829e:	f102 0c01 	add.w	ip, r2, #1
 80082a2:	f1bc 0f10 	cmp.w	ip, #16
 80082a6:	bfd8      	it	le
 80082a8:	fb01 f909 	mulle.w	r9, r1, r9
 80082ac:	e7f5      	b.n	800829a <_strtod_l+0x262>
 80082ae:	2d10      	cmp	r5, #16
 80082b0:	bfdc      	itt	le
 80082b2:	220a      	movle	r2, #10
 80082b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80082b8:	e7e1      	b.n	800827e <_strtod_l+0x246>
 80082ba:	2300      	movs	r3, #0
 80082bc:	9307      	str	r3, [sp, #28]
 80082be:	2201      	movs	r2, #1
 80082c0:	e77c      	b.n	80081bc <_strtod_l+0x184>
 80082c2:	f04f 0c00 	mov.w	ip, #0
 80082c6:	f108 0302 	add.w	r3, r8, #2
 80082ca:	931d      	str	r3, [sp, #116]	; 0x74
 80082cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80082d0:	e785      	b.n	80081de <_strtod_l+0x1a6>
 80082d2:	f04f 0c01 	mov.w	ip, #1
 80082d6:	e7f6      	b.n	80082c6 <_strtod_l+0x28e>
 80082d8:	0800b284 	.word	0x0800b284
 80082dc:	0800b1b4 	.word	0x0800b1b4
 80082e0:	7ff00000 	.word	0x7ff00000
 80082e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082e6:	1c59      	adds	r1, r3, #1
 80082e8:	911d      	str	r1, [sp, #116]	; 0x74
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	2b30      	cmp	r3, #48	; 0x30
 80082ee:	d0f9      	beq.n	80082e4 <_strtod_l+0x2ac>
 80082f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80082f4:	2908      	cmp	r1, #8
 80082f6:	f63f af79 	bhi.w	80081ec <_strtod_l+0x1b4>
 80082fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80082fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	911d      	str	r1, [sp, #116]	; 0x74
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800830e:	2e09      	cmp	r6, #9
 8008310:	d937      	bls.n	8008382 <_strtod_l+0x34a>
 8008312:	9e08      	ldr	r6, [sp, #32]
 8008314:	1b89      	subs	r1, r1, r6
 8008316:	2908      	cmp	r1, #8
 8008318:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800831c:	dc02      	bgt.n	8008324 <_strtod_l+0x2ec>
 800831e:	4576      	cmp	r6, lr
 8008320:	bfa8      	it	ge
 8008322:	4676      	movge	r6, lr
 8008324:	f1bc 0f00 	cmp.w	ip, #0
 8008328:	d000      	beq.n	800832c <_strtod_l+0x2f4>
 800832a:	4276      	negs	r6, r6
 800832c:	2d00      	cmp	r5, #0
 800832e:	d14f      	bne.n	80083d0 <_strtod_l+0x398>
 8008330:	9904      	ldr	r1, [sp, #16]
 8008332:	4301      	orrs	r1, r0
 8008334:	f47f aec2 	bne.w	80080bc <_strtod_l+0x84>
 8008338:	2a00      	cmp	r2, #0
 800833a:	f47f aedb 	bne.w	80080f4 <_strtod_l+0xbc>
 800833e:	2b69      	cmp	r3, #105	; 0x69
 8008340:	d027      	beq.n	8008392 <_strtod_l+0x35a>
 8008342:	dc24      	bgt.n	800838e <_strtod_l+0x356>
 8008344:	2b49      	cmp	r3, #73	; 0x49
 8008346:	d024      	beq.n	8008392 <_strtod_l+0x35a>
 8008348:	2b4e      	cmp	r3, #78	; 0x4e
 800834a:	f47f aed3 	bne.w	80080f4 <_strtod_l+0xbc>
 800834e:	499e      	ldr	r1, [pc, #632]	; (80085c8 <_strtod_l+0x590>)
 8008350:	a81d      	add	r0, sp, #116	; 0x74
 8008352:	f000 ff95 	bl	8009280 <__match>
 8008356:	2800      	cmp	r0, #0
 8008358:	f43f aecc 	beq.w	80080f4 <_strtod_l+0xbc>
 800835c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b28      	cmp	r3, #40	; 0x28
 8008362:	d12d      	bne.n	80083c0 <_strtod_l+0x388>
 8008364:	4999      	ldr	r1, [pc, #612]	; (80085cc <_strtod_l+0x594>)
 8008366:	aa20      	add	r2, sp, #128	; 0x80
 8008368:	a81d      	add	r0, sp, #116	; 0x74
 800836a:	f000 ff9d 	bl	80092a8 <__hexnan>
 800836e:	2805      	cmp	r0, #5
 8008370:	d126      	bne.n	80083c0 <_strtod_l+0x388>
 8008372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008374:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008378:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800837c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008380:	e69c      	b.n	80080bc <_strtod_l+0x84>
 8008382:	210a      	movs	r1, #10
 8008384:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008388:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800838c:	e7b9      	b.n	8008302 <_strtod_l+0x2ca>
 800838e:	2b6e      	cmp	r3, #110	; 0x6e
 8008390:	e7db      	b.n	800834a <_strtod_l+0x312>
 8008392:	498f      	ldr	r1, [pc, #572]	; (80085d0 <_strtod_l+0x598>)
 8008394:	a81d      	add	r0, sp, #116	; 0x74
 8008396:	f000 ff73 	bl	8009280 <__match>
 800839a:	2800      	cmp	r0, #0
 800839c:	f43f aeaa 	beq.w	80080f4 <_strtod_l+0xbc>
 80083a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083a2:	498c      	ldr	r1, [pc, #560]	; (80085d4 <_strtod_l+0x59c>)
 80083a4:	3b01      	subs	r3, #1
 80083a6:	a81d      	add	r0, sp, #116	; 0x74
 80083a8:	931d      	str	r3, [sp, #116]	; 0x74
 80083aa:	f000 ff69 	bl	8009280 <__match>
 80083ae:	b910      	cbnz	r0, 80083b6 <_strtod_l+0x37e>
 80083b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083b2:	3301      	adds	r3, #1
 80083b4:	931d      	str	r3, [sp, #116]	; 0x74
 80083b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80085e4 <_strtod_l+0x5ac>
 80083ba:	f04f 0a00 	mov.w	sl, #0
 80083be:	e67d      	b.n	80080bc <_strtod_l+0x84>
 80083c0:	4885      	ldr	r0, [pc, #532]	; (80085d8 <_strtod_l+0x5a0>)
 80083c2:	f002 f835 	bl	800a430 <nan>
 80083c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80083ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80083ce:	e675      	b.n	80080bc <_strtod_l+0x84>
 80083d0:	9b07      	ldr	r3, [sp, #28]
 80083d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083d4:	1af3      	subs	r3, r6, r3
 80083d6:	2f00      	cmp	r7, #0
 80083d8:	bf08      	it	eq
 80083da:	462f      	moveq	r7, r5
 80083dc:	2d10      	cmp	r5, #16
 80083de:	9308      	str	r3, [sp, #32]
 80083e0:	46a8      	mov	r8, r5
 80083e2:	bfa8      	it	ge
 80083e4:	f04f 0810 	movge.w	r8, #16
 80083e8:	f7f8 f89c 	bl	8000524 <__aeabi_ui2d>
 80083ec:	2d09      	cmp	r5, #9
 80083ee:	4682      	mov	sl, r0
 80083f0:	468b      	mov	fp, r1
 80083f2:	dd13      	ble.n	800841c <_strtod_l+0x3e4>
 80083f4:	4b79      	ldr	r3, [pc, #484]	; (80085dc <_strtod_l+0x5a4>)
 80083f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80083fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80083fe:	f7f8 f90b 	bl	8000618 <__aeabi_dmul>
 8008402:	4682      	mov	sl, r0
 8008404:	4648      	mov	r0, r9
 8008406:	468b      	mov	fp, r1
 8008408:	f7f8 f88c 	bl	8000524 <__aeabi_ui2d>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4650      	mov	r0, sl
 8008412:	4659      	mov	r1, fp
 8008414:	f7f7 ff4a 	bl	80002ac <__adddf3>
 8008418:	4682      	mov	sl, r0
 800841a:	468b      	mov	fp, r1
 800841c:	2d0f      	cmp	r5, #15
 800841e:	dc38      	bgt.n	8008492 <_strtod_l+0x45a>
 8008420:	9b08      	ldr	r3, [sp, #32]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f43f ae4a 	beq.w	80080bc <_strtod_l+0x84>
 8008428:	dd24      	ble.n	8008474 <_strtod_l+0x43c>
 800842a:	2b16      	cmp	r3, #22
 800842c:	dc0b      	bgt.n	8008446 <_strtod_l+0x40e>
 800842e:	4d6b      	ldr	r5, [pc, #428]	; (80085dc <_strtod_l+0x5a4>)
 8008430:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008434:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008438:	4652      	mov	r2, sl
 800843a:	465b      	mov	r3, fp
 800843c:	f7f8 f8ec 	bl	8000618 <__aeabi_dmul>
 8008440:	4682      	mov	sl, r0
 8008442:	468b      	mov	fp, r1
 8008444:	e63a      	b.n	80080bc <_strtod_l+0x84>
 8008446:	9a08      	ldr	r2, [sp, #32]
 8008448:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800844c:	4293      	cmp	r3, r2
 800844e:	db20      	blt.n	8008492 <_strtod_l+0x45a>
 8008450:	4c62      	ldr	r4, [pc, #392]	; (80085dc <_strtod_l+0x5a4>)
 8008452:	f1c5 050f 	rsb	r5, r5, #15
 8008456:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800845a:	4652      	mov	r2, sl
 800845c:	465b      	mov	r3, fp
 800845e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008462:	f7f8 f8d9 	bl	8000618 <__aeabi_dmul>
 8008466:	9b08      	ldr	r3, [sp, #32]
 8008468:	1b5d      	subs	r5, r3, r5
 800846a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800846e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008472:	e7e3      	b.n	800843c <_strtod_l+0x404>
 8008474:	9b08      	ldr	r3, [sp, #32]
 8008476:	3316      	adds	r3, #22
 8008478:	db0b      	blt.n	8008492 <_strtod_l+0x45a>
 800847a:	9b07      	ldr	r3, [sp, #28]
 800847c:	4a57      	ldr	r2, [pc, #348]	; (80085dc <_strtod_l+0x5a4>)
 800847e:	1b9e      	subs	r6, r3, r6
 8008480:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008484:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008488:	4650      	mov	r0, sl
 800848a:	4659      	mov	r1, fp
 800848c:	f7f8 f9ee 	bl	800086c <__aeabi_ddiv>
 8008490:	e7d6      	b.n	8008440 <_strtod_l+0x408>
 8008492:	9b08      	ldr	r3, [sp, #32]
 8008494:	eba5 0808 	sub.w	r8, r5, r8
 8008498:	4498      	add	r8, r3
 800849a:	f1b8 0f00 	cmp.w	r8, #0
 800849e:	dd71      	ble.n	8008584 <_strtod_l+0x54c>
 80084a0:	f018 030f 	ands.w	r3, r8, #15
 80084a4:	d00a      	beq.n	80084bc <_strtod_l+0x484>
 80084a6:	494d      	ldr	r1, [pc, #308]	; (80085dc <_strtod_l+0x5a4>)
 80084a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084ac:	4652      	mov	r2, sl
 80084ae:	465b      	mov	r3, fp
 80084b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084b4:	f7f8 f8b0 	bl	8000618 <__aeabi_dmul>
 80084b8:	4682      	mov	sl, r0
 80084ba:	468b      	mov	fp, r1
 80084bc:	f038 080f 	bics.w	r8, r8, #15
 80084c0:	d04d      	beq.n	800855e <_strtod_l+0x526>
 80084c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80084c6:	dd22      	ble.n	800850e <_strtod_l+0x4d6>
 80084c8:	2500      	movs	r5, #0
 80084ca:	462e      	mov	r6, r5
 80084cc:	9509      	str	r5, [sp, #36]	; 0x24
 80084ce:	9507      	str	r5, [sp, #28]
 80084d0:	2322      	movs	r3, #34	; 0x22
 80084d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80085e4 <_strtod_l+0x5ac>
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	f04f 0a00 	mov.w	sl, #0
 80084dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f43f adec 	beq.w	80080bc <_strtod_l+0x84>
 80084e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 ffcc 	bl	8009484 <_Bfree>
 80084ec:	9907      	ldr	r1, [sp, #28]
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 ffc8 	bl	8009484 <_Bfree>
 80084f4:	4631      	mov	r1, r6
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 ffc4 	bl	8009484 <_Bfree>
 80084fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 ffc0 	bl	8009484 <_Bfree>
 8008504:	4629      	mov	r1, r5
 8008506:	4620      	mov	r0, r4
 8008508:	f000 ffbc 	bl	8009484 <_Bfree>
 800850c:	e5d6      	b.n	80080bc <_strtod_l+0x84>
 800850e:	2300      	movs	r3, #0
 8008510:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008514:	4650      	mov	r0, sl
 8008516:	4659      	mov	r1, fp
 8008518:	4699      	mov	r9, r3
 800851a:	f1b8 0f01 	cmp.w	r8, #1
 800851e:	dc21      	bgt.n	8008564 <_strtod_l+0x52c>
 8008520:	b10b      	cbz	r3, 8008526 <_strtod_l+0x4ee>
 8008522:	4682      	mov	sl, r0
 8008524:	468b      	mov	fp, r1
 8008526:	4b2e      	ldr	r3, [pc, #184]	; (80085e0 <_strtod_l+0x5a8>)
 8008528:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800852c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008530:	4652      	mov	r2, sl
 8008532:	465b      	mov	r3, fp
 8008534:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008538:	f7f8 f86e 	bl	8000618 <__aeabi_dmul>
 800853c:	4b29      	ldr	r3, [pc, #164]	; (80085e4 <_strtod_l+0x5ac>)
 800853e:	460a      	mov	r2, r1
 8008540:	400b      	ands	r3, r1
 8008542:	4929      	ldr	r1, [pc, #164]	; (80085e8 <_strtod_l+0x5b0>)
 8008544:	428b      	cmp	r3, r1
 8008546:	4682      	mov	sl, r0
 8008548:	d8be      	bhi.n	80084c8 <_strtod_l+0x490>
 800854a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800854e:	428b      	cmp	r3, r1
 8008550:	bf86      	itte	hi
 8008552:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80085ec <_strtod_l+0x5b4>
 8008556:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800855a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800855e:	2300      	movs	r3, #0
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	e081      	b.n	8008668 <_strtod_l+0x630>
 8008564:	f018 0f01 	tst.w	r8, #1
 8008568:	d007      	beq.n	800857a <_strtod_l+0x542>
 800856a:	4b1d      	ldr	r3, [pc, #116]	; (80085e0 <_strtod_l+0x5a8>)
 800856c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f7f8 f850 	bl	8000618 <__aeabi_dmul>
 8008578:	2301      	movs	r3, #1
 800857a:	f109 0901 	add.w	r9, r9, #1
 800857e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008582:	e7ca      	b.n	800851a <_strtod_l+0x4e2>
 8008584:	d0eb      	beq.n	800855e <_strtod_l+0x526>
 8008586:	f1c8 0800 	rsb	r8, r8, #0
 800858a:	f018 020f 	ands.w	r2, r8, #15
 800858e:	d00a      	beq.n	80085a6 <_strtod_l+0x56e>
 8008590:	4b12      	ldr	r3, [pc, #72]	; (80085dc <_strtod_l+0x5a4>)
 8008592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008596:	4650      	mov	r0, sl
 8008598:	4659      	mov	r1, fp
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f8 f965 	bl	800086c <__aeabi_ddiv>
 80085a2:	4682      	mov	sl, r0
 80085a4:	468b      	mov	fp, r1
 80085a6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80085aa:	d0d8      	beq.n	800855e <_strtod_l+0x526>
 80085ac:	f1b8 0f1f 	cmp.w	r8, #31
 80085b0:	dd1e      	ble.n	80085f0 <_strtod_l+0x5b8>
 80085b2:	2500      	movs	r5, #0
 80085b4:	462e      	mov	r6, r5
 80085b6:	9509      	str	r5, [sp, #36]	; 0x24
 80085b8:	9507      	str	r5, [sp, #28]
 80085ba:	2322      	movs	r3, #34	; 0x22
 80085bc:	f04f 0a00 	mov.w	sl, #0
 80085c0:	f04f 0b00 	mov.w	fp, #0
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	e789      	b.n	80084dc <_strtod_l+0x4a4>
 80085c8:	0800b1b1 	.word	0x0800b1b1
 80085cc:	0800b1c8 	.word	0x0800b1c8
 80085d0:	0800b1a8 	.word	0x0800b1a8
 80085d4:	0800b1ab 	.word	0x0800b1ab
 80085d8:	0800b47a 	.word	0x0800b47a
 80085dc:	0800b338 	.word	0x0800b338
 80085e0:	0800b310 	.word	0x0800b310
 80085e4:	7ff00000 	.word	0x7ff00000
 80085e8:	7ca00000 	.word	0x7ca00000
 80085ec:	7fefffff 	.word	0x7fefffff
 80085f0:	f018 0310 	ands.w	r3, r8, #16
 80085f4:	bf18      	it	ne
 80085f6:	236a      	movne	r3, #106	; 0x6a
 80085f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80089b0 <_strtod_l+0x978>
 80085fc:	9304      	str	r3, [sp, #16]
 80085fe:	4650      	mov	r0, sl
 8008600:	4659      	mov	r1, fp
 8008602:	2300      	movs	r3, #0
 8008604:	f018 0f01 	tst.w	r8, #1
 8008608:	d004      	beq.n	8008614 <_strtod_l+0x5dc>
 800860a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800860e:	f7f8 f803 	bl	8000618 <__aeabi_dmul>
 8008612:	2301      	movs	r3, #1
 8008614:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008618:	f109 0908 	add.w	r9, r9, #8
 800861c:	d1f2      	bne.n	8008604 <_strtod_l+0x5cc>
 800861e:	b10b      	cbz	r3, 8008624 <_strtod_l+0x5ec>
 8008620:	4682      	mov	sl, r0
 8008622:	468b      	mov	fp, r1
 8008624:	9b04      	ldr	r3, [sp, #16]
 8008626:	b1bb      	cbz	r3, 8008658 <_strtod_l+0x620>
 8008628:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800862c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008630:	2b00      	cmp	r3, #0
 8008632:	4659      	mov	r1, fp
 8008634:	dd10      	ble.n	8008658 <_strtod_l+0x620>
 8008636:	2b1f      	cmp	r3, #31
 8008638:	f340 8128 	ble.w	800888c <_strtod_l+0x854>
 800863c:	2b34      	cmp	r3, #52	; 0x34
 800863e:	bfde      	ittt	le
 8008640:	3b20      	suble	r3, #32
 8008642:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008646:	fa02 f303 	lslle.w	r3, r2, r3
 800864a:	f04f 0a00 	mov.w	sl, #0
 800864e:	bfcc      	ite	gt
 8008650:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008654:	ea03 0b01 	andle.w	fp, r3, r1
 8008658:	2200      	movs	r2, #0
 800865a:	2300      	movs	r3, #0
 800865c:	4650      	mov	r0, sl
 800865e:	4659      	mov	r1, fp
 8008660:	f7f8 fa42 	bl	8000ae8 <__aeabi_dcmpeq>
 8008664:	2800      	cmp	r0, #0
 8008666:	d1a4      	bne.n	80085b2 <_strtod_l+0x57a>
 8008668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800866e:	462b      	mov	r3, r5
 8008670:	463a      	mov	r2, r7
 8008672:	4620      	mov	r0, r4
 8008674:	f000 ff72 	bl	800955c <__s2b>
 8008678:	9009      	str	r0, [sp, #36]	; 0x24
 800867a:	2800      	cmp	r0, #0
 800867c:	f43f af24 	beq.w	80084c8 <_strtod_l+0x490>
 8008680:	9b07      	ldr	r3, [sp, #28]
 8008682:	1b9e      	subs	r6, r3, r6
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfb4      	ite	lt
 800868a:	4633      	movlt	r3, r6
 800868c:	2300      	movge	r3, #0
 800868e:	9310      	str	r3, [sp, #64]	; 0x40
 8008690:	9b08      	ldr	r3, [sp, #32]
 8008692:	2500      	movs	r5, #0
 8008694:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008698:	9318      	str	r3, [sp, #96]	; 0x60
 800869a:	462e      	mov	r6, r5
 800869c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869e:	4620      	mov	r0, r4
 80086a0:	6859      	ldr	r1, [r3, #4]
 80086a2:	f000 feaf 	bl	8009404 <_Balloc>
 80086a6:	9007      	str	r0, [sp, #28]
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f43f af11 	beq.w	80084d0 <_strtod_l+0x498>
 80086ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	3202      	adds	r2, #2
 80086b4:	f103 010c 	add.w	r1, r3, #12
 80086b8:	0092      	lsls	r2, r2, #2
 80086ba:	300c      	adds	r0, #12
 80086bc:	f7ff fc68 	bl	8007f90 <memcpy>
 80086c0:	ec4b ab10 	vmov	d0, sl, fp
 80086c4:	aa20      	add	r2, sp, #128	; 0x80
 80086c6:	a91f      	add	r1, sp, #124	; 0x7c
 80086c8:	4620      	mov	r0, r4
 80086ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80086ce:	f001 fa81 	bl	8009bd4 <__d2b>
 80086d2:	901e      	str	r0, [sp, #120]	; 0x78
 80086d4:	2800      	cmp	r0, #0
 80086d6:	f43f aefb 	beq.w	80084d0 <_strtod_l+0x498>
 80086da:	2101      	movs	r1, #1
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 ffd7 	bl	8009690 <__i2b>
 80086e2:	4606      	mov	r6, r0
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f43f aef3 	beq.w	80084d0 <_strtod_l+0x498>
 80086ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086ec:	9904      	ldr	r1, [sp, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfab      	itete	ge
 80086f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80086f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80086f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80086f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80086fc:	bfac      	ite	ge
 80086fe:	eb03 0902 	addge.w	r9, r3, r2
 8008702:	1ad7      	sublt	r7, r2, r3
 8008704:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008706:	eba3 0801 	sub.w	r8, r3, r1
 800870a:	4490      	add	r8, r2
 800870c:	4ba3      	ldr	r3, [pc, #652]	; (800899c <_strtod_l+0x964>)
 800870e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008712:	4598      	cmp	r8, r3
 8008714:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008718:	f280 80cc 	bge.w	80088b4 <_strtod_l+0x87c>
 800871c:	eba3 0308 	sub.w	r3, r3, r8
 8008720:	2b1f      	cmp	r3, #31
 8008722:	eba2 0203 	sub.w	r2, r2, r3
 8008726:	f04f 0101 	mov.w	r1, #1
 800872a:	f300 80b6 	bgt.w	800889a <_strtod_l+0x862>
 800872e:	fa01 f303 	lsl.w	r3, r1, r3
 8008732:	9311      	str	r3, [sp, #68]	; 0x44
 8008734:	2300      	movs	r3, #0
 8008736:	930c      	str	r3, [sp, #48]	; 0x30
 8008738:	eb09 0802 	add.w	r8, r9, r2
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	45c1      	cmp	r9, r8
 8008740:	4417      	add	r7, r2
 8008742:	441f      	add	r7, r3
 8008744:	464b      	mov	r3, r9
 8008746:	bfa8      	it	ge
 8008748:	4643      	movge	r3, r8
 800874a:	42bb      	cmp	r3, r7
 800874c:	bfa8      	it	ge
 800874e:	463b      	movge	r3, r7
 8008750:	2b00      	cmp	r3, #0
 8008752:	bfc2      	ittt	gt
 8008754:	eba8 0803 	subgt.w	r8, r8, r3
 8008758:	1aff      	subgt	r7, r7, r3
 800875a:	eba9 0903 	subgt.w	r9, r9, r3
 800875e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	dd17      	ble.n	8008794 <_strtod_l+0x75c>
 8008764:	4631      	mov	r1, r6
 8008766:	461a      	mov	r2, r3
 8008768:	4620      	mov	r0, r4
 800876a:	f001 f84d 	bl	8009808 <__pow5mult>
 800876e:	4606      	mov	r6, r0
 8008770:	2800      	cmp	r0, #0
 8008772:	f43f aead 	beq.w	80084d0 <_strtod_l+0x498>
 8008776:	4601      	mov	r1, r0
 8008778:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800877a:	4620      	mov	r0, r4
 800877c:	f000 ff9e 	bl	80096bc <__multiply>
 8008780:	900f      	str	r0, [sp, #60]	; 0x3c
 8008782:	2800      	cmp	r0, #0
 8008784:	f43f aea4 	beq.w	80084d0 <_strtod_l+0x498>
 8008788:	991e      	ldr	r1, [sp, #120]	; 0x78
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fe7a 	bl	8009484 <_Bfree>
 8008790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008792:	931e      	str	r3, [sp, #120]	; 0x78
 8008794:	f1b8 0f00 	cmp.w	r8, #0
 8008798:	f300 8091 	bgt.w	80088be <_strtod_l+0x886>
 800879c:	9b08      	ldr	r3, [sp, #32]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	dd08      	ble.n	80087b4 <_strtod_l+0x77c>
 80087a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80087a4:	9907      	ldr	r1, [sp, #28]
 80087a6:	4620      	mov	r0, r4
 80087a8:	f001 f82e 	bl	8009808 <__pow5mult>
 80087ac:	9007      	str	r0, [sp, #28]
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f43f ae8e 	beq.w	80084d0 <_strtod_l+0x498>
 80087b4:	2f00      	cmp	r7, #0
 80087b6:	dd08      	ble.n	80087ca <_strtod_l+0x792>
 80087b8:	9907      	ldr	r1, [sp, #28]
 80087ba:	463a      	mov	r2, r7
 80087bc:	4620      	mov	r0, r4
 80087be:	f001 f87d 	bl	80098bc <__lshift>
 80087c2:	9007      	str	r0, [sp, #28]
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f43f ae83 	beq.w	80084d0 <_strtod_l+0x498>
 80087ca:	f1b9 0f00 	cmp.w	r9, #0
 80087ce:	dd08      	ble.n	80087e2 <_strtod_l+0x7aa>
 80087d0:	4631      	mov	r1, r6
 80087d2:	464a      	mov	r2, r9
 80087d4:	4620      	mov	r0, r4
 80087d6:	f001 f871 	bl	80098bc <__lshift>
 80087da:	4606      	mov	r6, r0
 80087dc:	2800      	cmp	r0, #0
 80087de:	f43f ae77 	beq.w	80084d0 <_strtod_l+0x498>
 80087e2:	9a07      	ldr	r2, [sp, #28]
 80087e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80087e6:	4620      	mov	r0, r4
 80087e8:	f001 f8f0 	bl	80099cc <__mdiff>
 80087ec:	4605      	mov	r5, r0
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f43f ae6e 	beq.w	80084d0 <_strtod_l+0x498>
 80087f4:	68c3      	ldr	r3, [r0, #12]
 80087f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087f8:	2300      	movs	r3, #0
 80087fa:	60c3      	str	r3, [r0, #12]
 80087fc:	4631      	mov	r1, r6
 80087fe:	f001 f8c9 	bl	8009994 <__mcmp>
 8008802:	2800      	cmp	r0, #0
 8008804:	da65      	bge.n	80088d2 <_strtod_l+0x89a>
 8008806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008808:	ea53 030a 	orrs.w	r3, r3, sl
 800880c:	f040 8087 	bne.w	800891e <_strtod_l+0x8e6>
 8008810:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008814:	2b00      	cmp	r3, #0
 8008816:	f040 8082 	bne.w	800891e <_strtod_l+0x8e6>
 800881a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800881e:	0d1b      	lsrs	r3, r3, #20
 8008820:	051b      	lsls	r3, r3, #20
 8008822:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008826:	d97a      	bls.n	800891e <_strtod_l+0x8e6>
 8008828:	696b      	ldr	r3, [r5, #20]
 800882a:	b913      	cbnz	r3, 8008832 <_strtod_l+0x7fa>
 800882c:	692b      	ldr	r3, [r5, #16]
 800882e:	2b01      	cmp	r3, #1
 8008830:	dd75      	ble.n	800891e <_strtod_l+0x8e6>
 8008832:	4629      	mov	r1, r5
 8008834:	2201      	movs	r2, #1
 8008836:	4620      	mov	r0, r4
 8008838:	f001 f840 	bl	80098bc <__lshift>
 800883c:	4631      	mov	r1, r6
 800883e:	4605      	mov	r5, r0
 8008840:	f001 f8a8 	bl	8009994 <__mcmp>
 8008844:	2800      	cmp	r0, #0
 8008846:	dd6a      	ble.n	800891e <_strtod_l+0x8e6>
 8008848:	9904      	ldr	r1, [sp, #16]
 800884a:	4a55      	ldr	r2, [pc, #340]	; (80089a0 <_strtod_l+0x968>)
 800884c:	465b      	mov	r3, fp
 800884e:	2900      	cmp	r1, #0
 8008850:	f000 8085 	beq.w	800895e <_strtod_l+0x926>
 8008854:	ea02 010b 	and.w	r1, r2, fp
 8008858:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800885c:	dc7f      	bgt.n	800895e <_strtod_l+0x926>
 800885e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008862:	f77f aeaa 	ble.w	80085ba <_strtod_l+0x582>
 8008866:	4a4f      	ldr	r2, [pc, #316]	; (80089a4 <_strtod_l+0x96c>)
 8008868:	2300      	movs	r3, #0
 800886a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800886e:	4650      	mov	r0, sl
 8008870:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008874:	4659      	mov	r1, fp
 8008876:	f7f7 fecf 	bl	8000618 <__aeabi_dmul>
 800887a:	460b      	mov	r3, r1
 800887c:	4303      	orrs	r3, r0
 800887e:	bf08      	it	eq
 8008880:	2322      	moveq	r3, #34	; 0x22
 8008882:	4682      	mov	sl, r0
 8008884:	468b      	mov	fp, r1
 8008886:	bf08      	it	eq
 8008888:	6023      	streq	r3, [r4, #0]
 800888a:	e62b      	b.n	80084e4 <_strtod_l+0x4ac>
 800888c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008890:	fa02 f303 	lsl.w	r3, r2, r3
 8008894:	ea03 0a0a 	and.w	sl, r3, sl
 8008898:	e6de      	b.n	8008658 <_strtod_l+0x620>
 800889a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800889e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80088a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80088a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80088aa:	fa01 f308 	lsl.w	r3, r1, r8
 80088ae:	930c      	str	r3, [sp, #48]	; 0x30
 80088b0:	9111      	str	r1, [sp, #68]	; 0x44
 80088b2:	e741      	b.n	8008738 <_strtod_l+0x700>
 80088b4:	2300      	movs	r3, #0
 80088b6:	930c      	str	r3, [sp, #48]	; 0x30
 80088b8:	2301      	movs	r3, #1
 80088ba:	9311      	str	r3, [sp, #68]	; 0x44
 80088bc:	e73c      	b.n	8008738 <_strtod_l+0x700>
 80088be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80088c0:	4642      	mov	r2, r8
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 fffa 	bl	80098bc <__lshift>
 80088c8:	901e      	str	r0, [sp, #120]	; 0x78
 80088ca:	2800      	cmp	r0, #0
 80088cc:	f47f af66 	bne.w	800879c <_strtod_l+0x764>
 80088d0:	e5fe      	b.n	80084d0 <_strtod_l+0x498>
 80088d2:	465f      	mov	r7, fp
 80088d4:	d16e      	bne.n	80089b4 <_strtod_l+0x97c>
 80088d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088dc:	b342      	cbz	r2, 8008930 <_strtod_l+0x8f8>
 80088de:	4a32      	ldr	r2, [pc, #200]	; (80089a8 <_strtod_l+0x970>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d128      	bne.n	8008936 <_strtod_l+0x8fe>
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	4650      	mov	r0, sl
 80088e8:	b1eb      	cbz	r3, 8008926 <_strtod_l+0x8ee>
 80088ea:	4a2d      	ldr	r2, [pc, #180]	; (80089a0 <_strtod_l+0x968>)
 80088ec:	403a      	ands	r2, r7
 80088ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80088f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80088f6:	d819      	bhi.n	800892c <_strtod_l+0x8f4>
 80088f8:	0d12      	lsrs	r2, r2, #20
 80088fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80088fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008902:	4298      	cmp	r0, r3
 8008904:	d117      	bne.n	8008936 <_strtod_l+0x8fe>
 8008906:	4b29      	ldr	r3, [pc, #164]	; (80089ac <_strtod_l+0x974>)
 8008908:	429f      	cmp	r7, r3
 800890a:	d102      	bne.n	8008912 <_strtod_l+0x8da>
 800890c:	3001      	adds	r0, #1
 800890e:	f43f addf 	beq.w	80084d0 <_strtod_l+0x498>
 8008912:	4b23      	ldr	r3, [pc, #140]	; (80089a0 <_strtod_l+0x968>)
 8008914:	403b      	ands	r3, r7
 8008916:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800891a:	f04f 0a00 	mov.w	sl, #0
 800891e:	9b04      	ldr	r3, [sp, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1a0      	bne.n	8008866 <_strtod_l+0x82e>
 8008924:	e5de      	b.n	80084e4 <_strtod_l+0x4ac>
 8008926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800892a:	e7ea      	b.n	8008902 <_strtod_l+0x8ca>
 800892c:	460b      	mov	r3, r1
 800892e:	e7e8      	b.n	8008902 <_strtod_l+0x8ca>
 8008930:	ea53 030a 	orrs.w	r3, r3, sl
 8008934:	d088      	beq.n	8008848 <_strtod_l+0x810>
 8008936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008938:	b1db      	cbz	r3, 8008972 <_strtod_l+0x93a>
 800893a:	423b      	tst	r3, r7
 800893c:	d0ef      	beq.n	800891e <_strtod_l+0x8e6>
 800893e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008940:	9a04      	ldr	r2, [sp, #16]
 8008942:	4650      	mov	r0, sl
 8008944:	4659      	mov	r1, fp
 8008946:	b1c3      	cbz	r3, 800897a <_strtod_l+0x942>
 8008948:	f7ff fb58 	bl	8007ffc <sulp>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008954:	f7f7 fcaa 	bl	80002ac <__adddf3>
 8008958:	4682      	mov	sl, r0
 800895a:	468b      	mov	fp, r1
 800895c:	e7df      	b.n	800891e <_strtod_l+0x8e6>
 800895e:	4013      	ands	r3, r2
 8008960:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008964:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008968:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800896c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008970:	e7d5      	b.n	800891e <_strtod_l+0x8e6>
 8008972:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008974:	ea13 0f0a 	tst.w	r3, sl
 8008978:	e7e0      	b.n	800893c <_strtod_l+0x904>
 800897a:	f7ff fb3f 	bl	8007ffc <sulp>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008986:	f7f7 fc8f 	bl	80002a8 <__aeabi_dsub>
 800898a:	2200      	movs	r2, #0
 800898c:	2300      	movs	r3, #0
 800898e:	4682      	mov	sl, r0
 8008990:	468b      	mov	fp, r1
 8008992:	f7f8 f8a9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008996:	2800      	cmp	r0, #0
 8008998:	d0c1      	beq.n	800891e <_strtod_l+0x8e6>
 800899a:	e60e      	b.n	80085ba <_strtod_l+0x582>
 800899c:	fffffc02 	.word	0xfffffc02
 80089a0:	7ff00000 	.word	0x7ff00000
 80089a4:	39500000 	.word	0x39500000
 80089a8:	000fffff 	.word	0x000fffff
 80089ac:	7fefffff 	.word	0x7fefffff
 80089b0:	0800b1e0 	.word	0x0800b1e0
 80089b4:	4631      	mov	r1, r6
 80089b6:	4628      	mov	r0, r5
 80089b8:	f001 f968 	bl	8009c8c <__ratio>
 80089bc:	ec59 8b10 	vmov	r8, r9, d0
 80089c0:	ee10 0a10 	vmov	r0, s0
 80089c4:	2200      	movs	r2, #0
 80089c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089ca:	4649      	mov	r1, r9
 80089cc:	f7f8 f8a0 	bl	8000b10 <__aeabi_dcmple>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d07c      	beq.n	8008ace <_strtod_l+0xa96>
 80089d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d04c      	beq.n	8008a74 <_strtod_l+0xa3c>
 80089da:	4b95      	ldr	r3, [pc, #596]	; (8008c30 <_strtod_l+0xbf8>)
 80089dc:	2200      	movs	r2, #0
 80089de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80089e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008c30 <_strtod_l+0xbf8>
 80089e6:	f04f 0800 	mov.w	r8, #0
 80089ea:	4b92      	ldr	r3, [pc, #584]	; (8008c34 <_strtod_l+0xbfc>)
 80089ec:	403b      	ands	r3, r7
 80089ee:	9311      	str	r3, [sp, #68]	; 0x44
 80089f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089f2:	4b91      	ldr	r3, [pc, #580]	; (8008c38 <_strtod_l+0xc00>)
 80089f4:	429a      	cmp	r2, r3
 80089f6:	f040 80b2 	bne.w	8008b5e <_strtod_l+0xb26>
 80089fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a02:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008a06:	ec4b ab10 	vmov	d0, sl, fp
 8008a0a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008a0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008a12:	f001 f863 	bl	8009adc <__ulp>
 8008a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a1a:	ec53 2b10 	vmov	r2, r3, d0
 8008a1e:	f7f7 fdfb 	bl	8000618 <__aeabi_dmul>
 8008a22:	4652      	mov	r2, sl
 8008a24:	465b      	mov	r3, fp
 8008a26:	f7f7 fc41 	bl	80002ac <__adddf3>
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4981      	ldr	r1, [pc, #516]	; (8008c34 <_strtod_l+0xbfc>)
 8008a2e:	4a83      	ldr	r2, [pc, #524]	; (8008c3c <_strtod_l+0xc04>)
 8008a30:	4019      	ands	r1, r3
 8008a32:	4291      	cmp	r1, r2
 8008a34:	4682      	mov	sl, r0
 8008a36:	d95e      	bls.n	8008af6 <_strtod_l+0xabe>
 8008a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a3a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d103      	bne.n	8008a4a <_strtod_l+0xa12>
 8008a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a44:	3301      	adds	r3, #1
 8008a46:	f43f ad43 	beq.w	80084d0 <_strtod_l+0x498>
 8008a4a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008c48 <_strtod_l+0xc10>
 8008a4e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008a52:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 fd15 	bl	8009484 <_Bfree>
 8008a5a:	9907      	ldr	r1, [sp, #28]
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 fd11 	bl	8009484 <_Bfree>
 8008a62:	4631      	mov	r1, r6
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 fd0d 	bl	8009484 <_Bfree>
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 fd09 	bl	8009484 <_Bfree>
 8008a72:	e613      	b.n	800869c <_strtod_l+0x664>
 8008a74:	f1ba 0f00 	cmp.w	sl, #0
 8008a78:	d11b      	bne.n	8008ab2 <_strtod_l+0xa7a>
 8008a7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a7e:	b9f3      	cbnz	r3, 8008abe <_strtod_l+0xa86>
 8008a80:	4b6b      	ldr	r3, [pc, #428]	; (8008c30 <_strtod_l+0xbf8>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	4640      	mov	r0, r8
 8008a86:	4649      	mov	r1, r9
 8008a88:	f7f8 f838 	bl	8000afc <__aeabi_dcmplt>
 8008a8c:	b9d0      	cbnz	r0, 8008ac4 <_strtod_l+0xa8c>
 8008a8e:	4640      	mov	r0, r8
 8008a90:	4649      	mov	r1, r9
 8008a92:	4b6b      	ldr	r3, [pc, #428]	; (8008c40 <_strtod_l+0xc08>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	f7f7 fdbf 	bl	8000618 <__aeabi_dmul>
 8008a9a:	4680      	mov	r8, r0
 8008a9c:	4689      	mov	r9, r1
 8008a9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008aa2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008aa6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008aa8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008aac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008ab0:	e79b      	b.n	80089ea <_strtod_l+0x9b2>
 8008ab2:	f1ba 0f01 	cmp.w	sl, #1
 8008ab6:	d102      	bne.n	8008abe <_strtod_l+0xa86>
 8008ab8:	2f00      	cmp	r7, #0
 8008aba:	f43f ad7e 	beq.w	80085ba <_strtod_l+0x582>
 8008abe:	4b61      	ldr	r3, [pc, #388]	; (8008c44 <_strtod_l+0xc0c>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	e78c      	b.n	80089de <_strtod_l+0x9a6>
 8008ac4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008c40 <_strtod_l+0xc08>
 8008ac8:	f04f 0800 	mov.w	r8, #0
 8008acc:	e7e7      	b.n	8008a9e <_strtod_l+0xa66>
 8008ace:	4b5c      	ldr	r3, [pc, #368]	; (8008c40 <_strtod_l+0xc08>)
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f7f7 fd9f 	bl	8000618 <__aeabi_dmul>
 8008ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008adc:	4680      	mov	r8, r0
 8008ade:	4689      	mov	r9, r1
 8008ae0:	b933      	cbnz	r3, 8008af0 <_strtod_l+0xab8>
 8008ae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ae6:	9012      	str	r0, [sp, #72]	; 0x48
 8008ae8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008aea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008aee:	e7dd      	b.n	8008aac <_strtod_l+0xa74>
 8008af0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008af4:	e7f9      	b.n	8008aea <_strtod_l+0xab2>
 8008af6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008afa:	9b04      	ldr	r3, [sp, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1a8      	bne.n	8008a52 <_strtod_l+0xa1a>
 8008b00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b06:	0d1b      	lsrs	r3, r3, #20
 8008b08:	051b      	lsls	r3, r3, #20
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d1a1      	bne.n	8008a52 <_strtod_l+0xa1a>
 8008b0e:	4640      	mov	r0, r8
 8008b10:	4649      	mov	r1, r9
 8008b12:	f7f8 f8b9 	bl	8000c88 <__aeabi_d2lz>
 8008b16:	f7f7 fd51 	bl	80005bc <__aeabi_l2d>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4640      	mov	r0, r8
 8008b20:	4649      	mov	r1, r9
 8008b22:	f7f7 fbc1 	bl	80002a8 <__aeabi_dsub>
 8008b26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b2c:	ea43 030a 	orr.w	r3, r3, sl
 8008b30:	4313      	orrs	r3, r2
 8008b32:	4680      	mov	r8, r0
 8008b34:	4689      	mov	r9, r1
 8008b36:	d053      	beq.n	8008be0 <_strtod_l+0xba8>
 8008b38:	a335      	add	r3, pc, #212	; (adr r3, 8008c10 <_strtod_l+0xbd8>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 ffdd 	bl	8000afc <__aeabi_dcmplt>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	f47f acce 	bne.w	80084e4 <_strtod_l+0x4ac>
 8008b48:	a333      	add	r3, pc, #204	; (adr r3, 8008c18 <_strtod_l+0xbe0>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	4640      	mov	r0, r8
 8008b50:	4649      	mov	r1, r9
 8008b52:	f7f7 fff1 	bl	8000b38 <__aeabi_dcmpgt>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f43f af7b 	beq.w	8008a52 <_strtod_l+0xa1a>
 8008b5c:	e4c2      	b.n	80084e4 <_strtod_l+0x4ac>
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	b333      	cbz	r3, 8008bb0 <_strtod_l+0xb78>
 8008b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b68:	d822      	bhi.n	8008bb0 <_strtod_l+0xb78>
 8008b6a:	a32d      	add	r3, pc, #180	; (adr r3, 8008c20 <_strtod_l+0xbe8>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	4640      	mov	r0, r8
 8008b72:	4649      	mov	r1, r9
 8008b74:	f7f7 ffcc 	bl	8000b10 <__aeabi_dcmple>
 8008b78:	b1a0      	cbz	r0, 8008ba4 <_strtod_l+0xb6c>
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	f7f7 fffb 	bl	8000b78 <__aeabi_d2uiz>
 8008b82:	2801      	cmp	r0, #1
 8008b84:	bf38      	it	cc
 8008b86:	2001      	movcc	r0, #1
 8008b88:	f7f7 fccc 	bl	8000524 <__aeabi_ui2d>
 8008b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b8e:	4680      	mov	r8, r0
 8008b90:	4689      	mov	r9, r1
 8008b92:	bb13      	cbnz	r3, 8008bda <_strtod_l+0xba2>
 8008b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b98:	9014      	str	r0, [sp, #80]	; 0x50
 8008b9a:	9315      	str	r3, [sp, #84]	; 0x54
 8008b9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008ba0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ba6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ba8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008bac:	1a9b      	subs	r3, r3, r2
 8008bae:	930d      	str	r3, [sp, #52]	; 0x34
 8008bb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bb4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008bb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008bbc:	f000 ff8e 	bl	8009adc <__ulp>
 8008bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bc4:	ec53 2b10 	vmov	r2, r3, d0
 8008bc8:	f7f7 fd26 	bl	8000618 <__aeabi_dmul>
 8008bcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008bd0:	f7f7 fb6c 	bl	80002ac <__adddf3>
 8008bd4:	4682      	mov	sl, r0
 8008bd6:	468b      	mov	fp, r1
 8008bd8:	e78f      	b.n	8008afa <_strtod_l+0xac2>
 8008bda:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008bde:	e7dd      	b.n	8008b9c <_strtod_l+0xb64>
 8008be0:	a311      	add	r3, pc, #68	; (adr r3, 8008c28 <_strtod_l+0xbf0>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f7f7 ff89 	bl	8000afc <__aeabi_dcmplt>
 8008bea:	e7b4      	b.n	8008b56 <_strtod_l+0xb1e>
 8008bec:	2300      	movs	r3, #0
 8008bee:	930e      	str	r3, [sp, #56]	; 0x38
 8008bf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	f7ff ba65 	b.w	80080c4 <_strtod_l+0x8c>
 8008bfa:	2b65      	cmp	r3, #101	; 0x65
 8008bfc:	f43f ab5d 	beq.w	80082ba <_strtod_l+0x282>
 8008c00:	2b45      	cmp	r3, #69	; 0x45
 8008c02:	f43f ab5a 	beq.w	80082ba <_strtod_l+0x282>
 8008c06:	2201      	movs	r2, #1
 8008c08:	f7ff bb92 	b.w	8008330 <_strtod_l+0x2f8>
 8008c0c:	f3af 8000 	nop.w
 8008c10:	94a03595 	.word	0x94a03595
 8008c14:	3fdfffff 	.word	0x3fdfffff
 8008c18:	35afe535 	.word	0x35afe535
 8008c1c:	3fe00000 	.word	0x3fe00000
 8008c20:	ffc00000 	.word	0xffc00000
 8008c24:	41dfffff 	.word	0x41dfffff
 8008c28:	94a03595 	.word	0x94a03595
 8008c2c:	3fcfffff 	.word	0x3fcfffff
 8008c30:	3ff00000 	.word	0x3ff00000
 8008c34:	7ff00000 	.word	0x7ff00000
 8008c38:	7fe00000 	.word	0x7fe00000
 8008c3c:	7c9fffff 	.word	0x7c9fffff
 8008c40:	3fe00000 	.word	0x3fe00000
 8008c44:	bff00000 	.word	0xbff00000
 8008c48:	7fefffff 	.word	0x7fefffff

08008c4c <strtof>:
 8008c4c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8008c50:	4e26      	ldr	r6, [pc, #152]	; (8008cec <strtof+0xa0>)
 8008c52:	4b27      	ldr	r3, [pc, #156]	; (8008cf0 <strtof+0xa4>)
 8008c54:	460a      	mov	r2, r1
 8008c56:	ed2d 8b02 	vpush	{d8}
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	6830      	ldr	r0, [r6, #0]
 8008c5e:	f7ff f9eb 	bl	8008038 <_strtod_l>
 8008c62:	ec55 4b10 	vmov	r4, r5, d0
 8008c66:	ee10 2a10 	vmov	r2, s0
 8008c6a:	ee10 0a10 	vmov	r0, s0
 8008c6e:	462b      	mov	r3, r5
 8008c70:	4629      	mov	r1, r5
 8008c72:	f7f7 ff6b 	bl	8000b4c <__aeabi_dcmpun>
 8008c76:	b190      	cbz	r0, 8008c9e <strtof+0x52>
 8008c78:	2d00      	cmp	r5, #0
 8008c7a:	481e      	ldr	r0, [pc, #120]	; (8008cf4 <strtof+0xa8>)
 8008c7c:	da09      	bge.n	8008c92 <strtof+0x46>
 8008c7e:	f001 fbef 	bl	800a460 <nanf>
 8008c82:	eeb1 8a40 	vneg.f32	s16, s0
 8008c86:	eeb0 0a48 	vmov.f32	s0, s16
 8008c8a:	ecbd 8b02 	vpop	{d8}
 8008c8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008c92:	ecbd 8b02 	vpop	{d8}
 8008c96:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8008c9a:	f001 bbe1 	b.w	800a460 <nanf>
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7f7 ff89 	bl	8000bb8 <__aeabi_d2f>
 8008ca6:	ee08 0a10 	vmov	s16, r0
 8008caa:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008cf8 <strtof+0xac>
 8008cae:	eeb0 7ac8 	vabs.f32	s14, s16
 8008cb2:	eeb4 7a67 	vcmp.f32	s14, s15
 8008cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cba:	dde4      	ble.n	8008c86 <strtof+0x3a>
 8008cbc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8008cc0:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <strtof+0xb0>)
 8008cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4649      	mov	r1, r9
 8008cca:	f7f7 ff3f 	bl	8000b4c <__aeabi_dcmpun>
 8008cce:	b940      	cbnz	r0, 8008ce2 <strtof+0x96>
 8008cd0:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <strtof+0xb0>)
 8008cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	4649      	mov	r1, r9
 8008cda:	f7f7 ff19 	bl	8000b10 <__aeabi_dcmple>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d0d1      	beq.n	8008c86 <strtof+0x3a>
 8008ce2:	6833      	ldr	r3, [r6, #0]
 8008ce4:	2222      	movs	r2, #34	; 0x22
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	e7cd      	b.n	8008c86 <strtof+0x3a>
 8008cea:	bf00      	nop
 8008cec:	20000030 	.word	0x20000030
 8008cf0:	20000098 	.word	0x20000098
 8008cf4:	0800b47a 	.word	0x0800b47a
 8008cf8:	7f7fffff 	.word	0x7f7fffff
 8008cfc:	7fefffff 	.word	0x7fefffff

08008d00 <rshift>:
 8008d00:	6903      	ldr	r3, [r0, #16]
 8008d02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d0e:	f100 0414 	add.w	r4, r0, #20
 8008d12:	dd45      	ble.n	8008da0 <rshift+0xa0>
 8008d14:	f011 011f 	ands.w	r1, r1, #31
 8008d18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d20:	d10c      	bne.n	8008d3c <rshift+0x3c>
 8008d22:	f100 0710 	add.w	r7, r0, #16
 8008d26:	4629      	mov	r1, r5
 8008d28:	42b1      	cmp	r1, r6
 8008d2a:	d334      	bcc.n	8008d96 <rshift+0x96>
 8008d2c:	1a9b      	subs	r3, r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	1eea      	subs	r2, r5, #3
 8008d32:	4296      	cmp	r6, r2
 8008d34:	bf38      	it	cc
 8008d36:	2300      	movcc	r3, #0
 8008d38:	4423      	add	r3, r4
 8008d3a:	e015      	b.n	8008d68 <rshift+0x68>
 8008d3c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d40:	f1c1 0820 	rsb	r8, r1, #32
 8008d44:	40cf      	lsrs	r7, r1
 8008d46:	f105 0e04 	add.w	lr, r5, #4
 8008d4a:	46a1      	mov	r9, r4
 8008d4c:	4576      	cmp	r6, lr
 8008d4e:	46f4      	mov	ip, lr
 8008d50:	d815      	bhi.n	8008d7e <rshift+0x7e>
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	009a      	lsls	r2, r3, #2
 8008d56:	3a04      	subs	r2, #4
 8008d58:	3501      	adds	r5, #1
 8008d5a:	42ae      	cmp	r6, r5
 8008d5c:	bf38      	it	cc
 8008d5e:	2200      	movcc	r2, #0
 8008d60:	18a3      	adds	r3, r4, r2
 8008d62:	50a7      	str	r7, [r4, r2]
 8008d64:	b107      	cbz	r7, 8008d68 <rshift+0x68>
 8008d66:	3304      	adds	r3, #4
 8008d68:	1b1a      	subs	r2, r3, r4
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d70:	bf08      	it	eq
 8008d72:	2300      	moveq	r3, #0
 8008d74:	6102      	str	r2, [r0, #16]
 8008d76:	bf08      	it	eq
 8008d78:	6143      	streq	r3, [r0, #20]
 8008d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d7e:	f8dc c000 	ldr.w	ip, [ip]
 8008d82:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d86:	ea4c 0707 	orr.w	r7, ip, r7
 8008d8a:	f849 7b04 	str.w	r7, [r9], #4
 8008d8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d92:	40cf      	lsrs	r7, r1
 8008d94:	e7da      	b.n	8008d4c <rshift+0x4c>
 8008d96:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d9a:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d9e:	e7c3      	b.n	8008d28 <rshift+0x28>
 8008da0:	4623      	mov	r3, r4
 8008da2:	e7e1      	b.n	8008d68 <rshift+0x68>

08008da4 <__hexdig_fun>:
 8008da4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008da8:	2b09      	cmp	r3, #9
 8008daa:	d802      	bhi.n	8008db2 <__hexdig_fun+0xe>
 8008dac:	3820      	subs	r0, #32
 8008dae:	b2c0      	uxtb	r0, r0
 8008db0:	4770      	bx	lr
 8008db2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008db6:	2b05      	cmp	r3, #5
 8008db8:	d801      	bhi.n	8008dbe <__hexdig_fun+0x1a>
 8008dba:	3847      	subs	r0, #71	; 0x47
 8008dbc:	e7f7      	b.n	8008dae <__hexdig_fun+0xa>
 8008dbe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008dc2:	2b05      	cmp	r3, #5
 8008dc4:	d801      	bhi.n	8008dca <__hexdig_fun+0x26>
 8008dc6:	3827      	subs	r0, #39	; 0x27
 8008dc8:	e7f1      	b.n	8008dae <__hexdig_fun+0xa>
 8008dca:	2000      	movs	r0, #0
 8008dcc:	4770      	bx	lr
	...

08008dd0 <__gethex>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	ed2d 8b02 	vpush	{d8}
 8008dd8:	b089      	sub	sp, #36	; 0x24
 8008dda:	ee08 0a10 	vmov	s16, r0
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	4bbc      	ldr	r3, [pc, #752]	; (80090d4 <__gethex+0x304>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	9301      	str	r3, [sp, #4]
 8008de6:	4618      	mov	r0, r3
 8008de8:	468b      	mov	fp, r1
 8008dea:	4690      	mov	r8, r2
 8008dec:	f7f7 fa00 	bl	80001f0 <strlen>
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	f8db 2000 	ldr.w	r2, [fp]
 8008df6:	4403      	add	r3, r0
 8008df8:	4682      	mov	sl, r0
 8008dfa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	1c93      	adds	r3, r2, #2
 8008e02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008e06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e0a:	32fe      	adds	r2, #254	; 0xfe
 8008e0c:	18d1      	adds	r1, r2, r3
 8008e0e:	461f      	mov	r7, r3
 8008e10:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e14:	9100      	str	r1, [sp, #0]
 8008e16:	2830      	cmp	r0, #48	; 0x30
 8008e18:	d0f8      	beq.n	8008e0c <__gethex+0x3c>
 8008e1a:	f7ff ffc3 	bl	8008da4 <__hexdig_fun>
 8008e1e:	4604      	mov	r4, r0
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d13a      	bne.n	8008e9a <__gethex+0xca>
 8008e24:	9901      	ldr	r1, [sp, #4]
 8008e26:	4652      	mov	r2, sl
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f001 fb1f 	bl	800a46c <strncmp>
 8008e2e:	4605      	mov	r5, r0
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d168      	bne.n	8008f06 <__gethex+0x136>
 8008e34:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e38:	eb07 060a 	add.w	r6, r7, sl
 8008e3c:	f7ff ffb2 	bl	8008da4 <__hexdig_fun>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d062      	beq.n	8008f0a <__gethex+0x13a>
 8008e44:	4633      	mov	r3, r6
 8008e46:	7818      	ldrb	r0, [r3, #0]
 8008e48:	2830      	cmp	r0, #48	; 0x30
 8008e4a:	461f      	mov	r7, r3
 8008e4c:	f103 0301 	add.w	r3, r3, #1
 8008e50:	d0f9      	beq.n	8008e46 <__gethex+0x76>
 8008e52:	f7ff ffa7 	bl	8008da4 <__hexdig_fun>
 8008e56:	2301      	movs	r3, #1
 8008e58:	fab0 f480 	clz	r4, r0
 8008e5c:	0964      	lsrs	r4, r4, #5
 8008e5e:	4635      	mov	r5, r6
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	463a      	mov	r2, r7
 8008e64:	4616      	mov	r6, r2
 8008e66:	3201      	adds	r2, #1
 8008e68:	7830      	ldrb	r0, [r6, #0]
 8008e6a:	f7ff ff9b 	bl	8008da4 <__hexdig_fun>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d1f8      	bne.n	8008e64 <__gethex+0x94>
 8008e72:	9901      	ldr	r1, [sp, #4]
 8008e74:	4652      	mov	r2, sl
 8008e76:	4630      	mov	r0, r6
 8008e78:	f001 faf8 	bl	800a46c <strncmp>
 8008e7c:	b980      	cbnz	r0, 8008ea0 <__gethex+0xd0>
 8008e7e:	b94d      	cbnz	r5, 8008e94 <__gethex+0xc4>
 8008e80:	eb06 050a 	add.w	r5, r6, sl
 8008e84:	462a      	mov	r2, r5
 8008e86:	4616      	mov	r6, r2
 8008e88:	3201      	adds	r2, #1
 8008e8a:	7830      	ldrb	r0, [r6, #0]
 8008e8c:	f7ff ff8a 	bl	8008da4 <__hexdig_fun>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d1f8      	bne.n	8008e86 <__gethex+0xb6>
 8008e94:	1bad      	subs	r5, r5, r6
 8008e96:	00ad      	lsls	r5, r5, #2
 8008e98:	e004      	b.n	8008ea4 <__gethex+0xd4>
 8008e9a:	2400      	movs	r4, #0
 8008e9c:	4625      	mov	r5, r4
 8008e9e:	e7e0      	b.n	8008e62 <__gethex+0x92>
 8008ea0:	2d00      	cmp	r5, #0
 8008ea2:	d1f7      	bne.n	8008e94 <__gethex+0xc4>
 8008ea4:	7833      	ldrb	r3, [r6, #0]
 8008ea6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008eaa:	2b50      	cmp	r3, #80	; 0x50
 8008eac:	d13b      	bne.n	8008f26 <__gethex+0x156>
 8008eae:	7873      	ldrb	r3, [r6, #1]
 8008eb0:	2b2b      	cmp	r3, #43	; 0x2b
 8008eb2:	d02c      	beq.n	8008f0e <__gethex+0x13e>
 8008eb4:	2b2d      	cmp	r3, #45	; 0x2d
 8008eb6:	d02e      	beq.n	8008f16 <__gethex+0x146>
 8008eb8:	1c71      	adds	r1, r6, #1
 8008eba:	f04f 0900 	mov.w	r9, #0
 8008ebe:	7808      	ldrb	r0, [r1, #0]
 8008ec0:	f7ff ff70 	bl	8008da4 <__hexdig_fun>
 8008ec4:	1e43      	subs	r3, r0, #1
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b18      	cmp	r3, #24
 8008eca:	d82c      	bhi.n	8008f26 <__gethex+0x156>
 8008ecc:	f1a0 0210 	sub.w	r2, r0, #16
 8008ed0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ed4:	f7ff ff66 	bl	8008da4 <__hexdig_fun>
 8008ed8:	1e43      	subs	r3, r0, #1
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b18      	cmp	r3, #24
 8008ede:	d91d      	bls.n	8008f1c <__gethex+0x14c>
 8008ee0:	f1b9 0f00 	cmp.w	r9, #0
 8008ee4:	d000      	beq.n	8008ee8 <__gethex+0x118>
 8008ee6:	4252      	negs	r2, r2
 8008ee8:	4415      	add	r5, r2
 8008eea:	f8cb 1000 	str.w	r1, [fp]
 8008eee:	b1e4      	cbz	r4, 8008f2a <__gethex+0x15a>
 8008ef0:	9b00      	ldr	r3, [sp, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bf14      	ite	ne
 8008ef6:	2700      	movne	r7, #0
 8008ef8:	2706      	moveq	r7, #6
 8008efa:	4638      	mov	r0, r7
 8008efc:	b009      	add	sp, #36	; 0x24
 8008efe:	ecbd 8b02 	vpop	{d8}
 8008f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f06:	463e      	mov	r6, r7
 8008f08:	4625      	mov	r5, r4
 8008f0a:	2401      	movs	r4, #1
 8008f0c:	e7ca      	b.n	8008ea4 <__gethex+0xd4>
 8008f0e:	f04f 0900 	mov.w	r9, #0
 8008f12:	1cb1      	adds	r1, r6, #2
 8008f14:	e7d3      	b.n	8008ebe <__gethex+0xee>
 8008f16:	f04f 0901 	mov.w	r9, #1
 8008f1a:	e7fa      	b.n	8008f12 <__gethex+0x142>
 8008f1c:	230a      	movs	r3, #10
 8008f1e:	fb03 0202 	mla	r2, r3, r2, r0
 8008f22:	3a10      	subs	r2, #16
 8008f24:	e7d4      	b.n	8008ed0 <__gethex+0x100>
 8008f26:	4631      	mov	r1, r6
 8008f28:	e7df      	b.n	8008eea <__gethex+0x11a>
 8008f2a:	1bf3      	subs	r3, r6, r7
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	4621      	mov	r1, r4
 8008f30:	2b07      	cmp	r3, #7
 8008f32:	dc0b      	bgt.n	8008f4c <__gethex+0x17c>
 8008f34:	ee18 0a10 	vmov	r0, s16
 8008f38:	f000 fa64 	bl	8009404 <_Balloc>
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	b940      	cbnz	r0, 8008f52 <__gethex+0x182>
 8008f40:	4b65      	ldr	r3, [pc, #404]	; (80090d8 <__gethex+0x308>)
 8008f42:	4602      	mov	r2, r0
 8008f44:	21de      	movs	r1, #222	; 0xde
 8008f46:	4865      	ldr	r0, [pc, #404]	; (80090dc <__gethex+0x30c>)
 8008f48:	f001 fab0 	bl	800a4ac <__assert_func>
 8008f4c:	3101      	adds	r1, #1
 8008f4e:	105b      	asrs	r3, r3, #1
 8008f50:	e7ee      	b.n	8008f30 <__gethex+0x160>
 8008f52:	f100 0914 	add.w	r9, r0, #20
 8008f56:	f04f 0b00 	mov.w	fp, #0
 8008f5a:	f1ca 0301 	rsb	r3, sl, #1
 8008f5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f62:	f8cd b000 	str.w	fp, [sp]
 8008f66:	9306      	str	r3, [sp, #24]
 8008f68:	42b7      	cmp	r7, r6
 8008f6a:	d340      	bcc.n	8008fee <__gethex+0x21e>
 8008f6c:	9802      	ldr	r0, [sp, #8]
 8008f6e:	9b00      	ldr	r3, [sp, #0]
 8008f70:	f840 3b04 	str.w	r3, [r0], #4
 8008f74:	eba0 0009 	sub.w	r0, r0, r9
 8008f78:	1080      	asrs	r0, r0, #2
 8008f7a:	0146      	lsls	r6, r0, #5
 8008f7c:	6120      	str	r0, [r4, #16]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fb36 	bl	80095f0 <__hi0bits>
 8008f84:	1a30      	subs	r0, r6, r0
 8008f86:	f8d8 6000 	ldr.w	r6, [r8]
 8008f8a:	42b0      	cmp	r0, r6
 8008f8c:	dd63      	ble.n	8009056 <__gethex+0x286>
 8008f8e:	1b87      	subs	r7, r0, r6
 8008f90:	4639      	mov	r1, r7
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 fed0 	bl	8009d38 <__any_on>
 8008f98:	4682      	mov	sl, r0
 8008f9a:	b1a8      	cbz	r0, 8008fc8 <__gethex+0x1f8>
 8008f9c:	1e7b      	subs	r3, r7, #1
 8008f9e:	1159      	asrs	r1, r3, #5
 8008fa0:	f003 021f 	and.w	r2, r3, #31
 8008fa4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008fa8:	f04f 0a01 	mov.w	sl, #1
 8008fac:	fa0a f202 	lsl.w	r2, sl, r2
 8008fb0:	420a      	tst	r2, r1
 8008fb2:	d009      	beq.n	8008fc8 <__gethex+0x1f8>
 8008fb4:	4553      	cmp	r3, sl
 8008fb6:	dd05      	ble.n	8008fc4 <__gethex+0x1f4>
 8008fb8:	1eb9      	subs	r1, r7, #2
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 febc 	bl	8009d38 <__any_on>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d145      	bne.n	8009050 <__gethex+0x280>
 8008fc4:	f04f 0a02 	mov.w	sl, #2
 8008fc8:	4639      	mov	r1, r7
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7ff fe98 	bl	8008d00 <rshift>
 8008fd0:	443d      	add	r5, r7
 8008fd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fd6:	42ab      	cmp	r3, r5
 8008fd8:	da4c      	bge.n	8009074 <__gethex+0x2a4>
 8008fda:	ee18 0a10 	vmov	r0, s16
 8008fde:	4621      	mov	r1, r4
 8008fe0:	f000 fa50 	bl	8009484 <_Bfree>
 8008fe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	27a3      	movs	r7, #163	; 0xa3
 8008fec:	e785      	b.n	8008efa <__gethex+0x12a>
 8008fee:	1e73      	subs	r3, r6, #1
 8008ff0:	9a05      	ldr	r2, [sp, #20]
 8008ff2:	9303      	str	r3, [sp, #12]
 8008ff4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d019      	beq.n	8009030 <__gethex+0x260>
 8008ffc:	f1bb 0f20 	cmp.w	fp, #32
 8009000:	d107      	bne.n	8009012 <__gethex+0x242>
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	9a00      	ldr	r2, [sp, #0]
 8009006:	f843 2b04 	str.w	r2, [r3], #4
 800900a:	9302      	str	r3, [sp, #8]
 800900c:	2300      	movs	r3, #0
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	469b      	mov	fp, r3
 8009012:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009016:	f7ff fec5 	bl	8008da4 <__hexdig_fun>
 800901a:	9b00      	ldr	r3, [sp, #0]
 800901c:	f000 000f 	and.w	r0, r0, #15
 8009020:	fa00 f00b 	lsl.w	r0, r0, fp
 8009024:	4303      	orrs	r3, r0
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	f10b 0b04 	add.w	fp, fp, #4
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	e00d      	b.n	800904c <__gethex+0x27c>
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	9a06      	ldr	r2, [sp, #24]
 8009034:	4413      	add	r3, r2
 8009036:	42bb      	cmp	r3, r7
 8009038:	d3e0      	bcc.n	8008ffc <__gethex+0x22c>
 800903a:	4618      	mov	r0, r3
 800903c:	9901      	ldr	r1, [sp, #4]
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	4652      	mov	r2, sl
 8009042:	f001 fa13 	bl	800a46c <strncmp>
 8009046:	9b07      	ldr	r3, [sp, #28]
 8009048:	2800      	cmp	r0, #0
 800904a:	d1d7      	bne.n	8008ffc <__gethex+0x22c>
 800904c:	461e      	mov	r6, r3
 800904e:	e78b      	b.n	8008f68 <__gethex+0x198>
 8009050:	f04f 0a03 	mov.w	sl, #3
 8009054:	e7b8      	b.n	8008fc8 <__gethex+0x1f8>
 8009056:	da0a      	bge.n	800906e <__gethex+0x29e>
 8009058:	1a37      	subs	r7, r6, r0
 800905a:	4621      	mov	r1, r4
 800905c:	ee18 0a10 	vmov	r0, s16
 8009060:	463a      	mov	r2, r7
 8009062:	f000 fc2b 	bl	80098bc <__lshift>
 8009066:	1bed      	subs	r5, r5, r7
 8009068:	4604      	mov	r4, r0
 800906a:	f100 0914 	add.w	r9, r0, #20
 800906e:	f04f 0a00 	mov.w	sl, #0
 8009072:	e7ae      	b.n	8008fd2 <__gethex+0x202>
 8009074:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009078:	42a8      	cmp	r0, r5
 800907a:	dd72      	ble.n	8009162 <__gethex+0x392>
 800907c:	1b45      	subs	r5, r0, r5
 800907e:	42ae      	cmp	r6, r5
 8009080:	dc36      	bgt.n	80090f0 <__gethex+0x320>
 8009082:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d02a      	beq.n	80090e0 <__gethex+0x310>
 800908a:	2b03      	cmp	r3, #3
 800908c:	d02c      	beq.n	80090e8 <__gethex+0x318>
 800908e:	2b01      	cmp	r3, #1
 8009090:	d115      	bne.n	80090be <__gethex+0x2ee>
 8009092:	42ae      	cmp	r6, r5
 8009094:	d113      	bne.n	80090be <__gethex+0x2ee>
 8009096:	2e01      	cmp	r6, #1
 8009098:	d10b      	bne.n	80090b2 <__gethex+0x2e2>
 800909a:	9a04      	ldr	r2, [sp, #16]
 800909c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	2301      	movs	r3, #1
 80090a4:	6123      	str	r3, [r4, #16]
 80090a6:	f8c9 3000 	str.w	r3, [r9]
 80090aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090ac:	2762      	movs	r7, #98	; 0x62
 80090ae:	601c      	str	r4, [r3, #0]
 80090b0:	e723      	b.n	8008efa <__gethex+0x12a>
 80090b2:	1e71      	subs	r1, r6, #1
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fe3f 	bl	8009d38 <__any_on>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d1ed      	bne.n	800909a <__gethex+0x2ca>
 80090be:	ee18 0a10 	vmov	r0, s16
 80090c2:	4621      	mov	r1, r4
 80090c4:	f000 f9de 	bl	8009484 <_Bfree>
 80090c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090ca:	2300      	movs	r3, #0
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	2750      	movs	r7, #80	; 0x50
 80090d0:	e713      	b.n	8008efa <__gethex+0x12a>
 80090d2:	bf00      	nop
 80090d4:	0800b284 	.word	0x0800b284
 80090d8:	0800b208 	.word	0x0800b208
 80090dc:	0800b219 	.word	0x0800b219
 80090e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1eb      	bne.n	80090be <__gethex+0x2ee>
 80090e6:	e7d8      	b.n	800909a <__gethex+0x2ca>
 80090e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1d5      	bne.n	800909a <__gethex+0x2ca>
 80090ee:	e7e6      	b.n	80090be <__gethex+0x2ee>
 80090f0:	1e6f      	subs	r7, r5, #1
 80090f2:	f1ba 0f00 	cmp.w	sl, #0
 80090f6:	d131      	bne.n	800915c <__gethex+0x38c>
 80090f8:	b127      	cbz	r7, 8009104 <__gethex+0x334>
 80090fa:	4639      	mov	r1, r7
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fe1b 	bl	8009d38 <__any_on>
 8009102:	4682      	mov	sl, r0
 8009104:	117b      	asrs	r3, r7, #5
 8009106:	2101      	movs	r1, #1
 8009108:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800910c:	f007 071f 	and.w	r7, r7, #31
 8009110:	fa01 f707 	lsl.w	r7, r1, r7
 8009114:	421f      	tst	r7, r3
 8009116:	4629      	mov	r1, r5
 8009118:	4620      	mov	r0, r4
 800911a:	bf18      	it	ne
 800911c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009120:	1b76      	subs	r6, r6, r5
 8009122:	f7ff fded 	bl	8008d00 <rshift>
 8009126:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800912a:	2702      	movs	r7, #2
 800912c:	f1ba 0f00 	cmp.w	sl, #0
 8009130:	d048      	beq.n	80091c4 <__gethex+0x3f4>
 8009132:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d015      	beq.n	8009166 <__gethex+0x396>
 800913a:	2b03      	cmp	r3, #3
 800913c:	d017      	beq.n	800916e <__gethex+0x39e>
 800913e:	2b01      	cmp	r3, #1
 8009140:	d109      	bne.n	8009156 <__gethex+0x386>
 8009142:	f01a 0f02 	tst.w	sl, #2
 8009146:	d006      	beq.n	8009156 <__gethex+0x386>
 8009148:	f8d9 0000 	ldr.w	r0, [r9]
 800914c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009150:	f01a 0f01 	tst.w	sl, #1
 8009154:	d10e      	bne.n	8009174 <__gethex+0x3a4>
 8009156:	f047 0710 	orr.w	r7, r7, #16
 800915a:	e033      	b.n	80091c4 <__gethex+0x3f4>
 800915c:	f04f 0a01 	mov.w	sl, #1
 8009160:	e7d0      	b.n	8009104 <__gethex+0x334>
 8009162:	2701      	movs	r7, #1
 8009164:	e7e2      	b.n	800912c <__gethex+0x35c>
 8009166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009168:	f1c3 0301 	rsb	r3, r3, #1
 800916c:	9315      	str	r3, [sp, #84]	; 0x54
 800916e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0f0      	beq.n	8009156 <__gethex+0x386>
 8009174:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009178:	f104 0314 	add.w	r3, r4, #20
 800917c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009180:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009184:	f04f 0c00 	mov.w	ip, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f853 2b04 	ldr.w	r2, [r3], #4
 800918e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009192:	d01c      	beq.n	80091ce <__gethex+0x3fe>
 8009194:	3201      	adds	r2, #1
 8009196:	6002      	str	r2, [r0, #0]
 8009198:	2f02      	cmp	r7, #2
 800919a:	f104 0314 	add.w	r3, r4, #20
 800919e:	d13f      	bne.n	8009220 <__gethex+0x450>
 80091a0:	f8d8 2000 	ldr.w	r2, [r8]
 80091a4:	3a01      	subs	r2, #1
 80091a6:	42b2      	cmp	r2, r6
 80091a8:	d10a      	bne.n	80091c0 <__gethex+0x3f0>
 80091aa:	1171      	asrs	r1, r6, #5
 80091ac:	2201      	movs	r2, #1
 80091ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091b2:	f006 061f 	and.w	r6, r6, #31
 80091b6:	fa02 f606 	lsl.w	r6, r2, r6
 80091ba:	421e      	tst	r6, r3
 80091bc:	bf18      	it	ne
 80091be:	4617      	movne	r7, r2
 80091c0:	f047 0720 	orr.w	r7, r7, #32
 80091c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091c6:	601c      	str	r4, [r3, #0]
 80091c8:	9b04      	ldr	r3, [sp, #16]
 80091ca:	601d      	str	r5, [r3, #0]
 80091cc:	e695      	b.n	8008efa <__gethex+0x12a>
 80091ce:	4299      	cmp	r1, r3
 80091d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80091d4:	d8d8      	bhi.n	8009188 <__gethex+0x3b8>
 80091d6:	68a3      	ldr	r3, [r4, #8]
 80091d8:	459b      	cmp	fp, r3
 80091da:	db19      	blt.n	8009210 <__gethex+0x440>
 80091dc:	6861      	ldr	r1, [r4, #4]
 80091de:	ee18 0a10 	vmov	r0, s16
 80091e2:	3101      	adds	r1, #1
 80091e4:	f000 f90e 	bl	8009404 <_Balloc>
 80091e8:	4681      	mov	r9, r0
 80091ea:	b918      	cbnz	r0, 80091f4 <__gethex+0x424>
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <__gethex+0x488>)
 80091ee:	4602      	mov	r2, r0
 80091f0:	2184      	movs	r1, #132	; 0x84
 80091f2:	e6a8      	b.n	8008f46 <__gethex+0x176>
 80091f4:	6922      	ldr	r2, [r4, #16]
 80091f6:	3202      	adds	r2, #2
 80091f8:	f104 010c 	add.w	r1, r4, #12
 80091fc:	0092      	lsls	r2, r2, #2
 80091fe:	300c      	adds	r0, #12
 8009200:	f7fe fec6 	bl	8007f90 <memcpy>
 8009204:	4621      	mov	r1, r4
 8009206:	ee18 0a10 	vmov	r0, s16
 800920a:	f000 f93b 	bl	8009484 <_Bfree>
 800920e:	464c      	mov	r4, r9
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009218:	6122      	str	r2, [r4, #16]
 800921a:	2201      	movs	r2, #1
 800921c:	615a      	str	r2, [r3, #20]
 800921e:	e7bb      	b.n	8009198 <__gethex+0x3c8>
 8009220:	6922      	ldr	r2, [r4, #16]
 8009222:	455a      	cmp	r2, fp
 8009224:	dd0b      	ble.n	800923e <__gethex+0x46e>
 8009226:	2101      	movs	r1, #1
 8009228:	4620      	mov	r0, r4
 800922a:	f7ff fd69 	bl	8008d00 <rshift>
 800922e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009232:	3501      	adds	r5, #1
 8009234:	42ab      	cmp	r3, r5
 8009236:	f6ff aed0 	blt.w	8008fda <__gethex+0x20a>
 800923a:	2701      	movs	r7, #1
 800923c:	e7c0      	b.n	80091c0 <__gethex+0x3f0>
 800923e:	f016 061f 	ands.w	r6, r6, #31
 8009242:	d0fa      	beq.n	800923a <__gethex+0x46a>
 8009244:	449a      	add	sl, r3
 8009246:	f1c6 0620 	rsb	r6, r6, #32
 800924a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800924e:	f000 f9cf 	bl	80095f0 <__hi0bits>
 8009252:	42b0      	cmp	r0, r6
 8009254:	dbe7      	blt.n	8009226 <__gethex+0x456>
 8009256:	e7f0      	b.n	800923a <__gethex+0x46a>
 8009258:	0800b208 	.word	0x0800b208

0800925c <L_shift>:
 800925c:	f1c2 0208 	rsb	r2, r2, #8
 8009260:	0092      	lsls	r2, r2, #2
 8009262:	b570      	push	{r4, r5, r6, lr}
 8009264:	f1c2 0620 	rsb	r6, r2, #32
 8009268:	6843      	ldr	r3, [r0, #4]
 800926a:	6804      	ldr	r4, [r0, #0]
 800926c:	fa03 f506 	lsl.w	r5, r3, r6
 8009270:	432c      	orrs	r4, r5
 8009272:	40d3      	lsrs	r3, r2
 8009274:	6004      	str	r4, [r0, #0]
 8009276:	f840 3f04 	str.w	r3, [r0, #4]!
 800927a:	4288      	cmp	r0, r1
 800927c:	d3f4      	bcc.n	8009268 <L_shift+0xc>
 800927e:	bd70      	pop	{r4, r5, r6, pc}

08009280 <__match>:
 8009280:	b530      	push	{r4, r5, lr}
 8009282:	6803      	ldr	r3, [r0, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800928a:	b914      	cbnz	r4, 8009292 <__match+0x12>
 800928c:	6003      	str	r3, [r0, #0]
 800928e:	2001      	movs	r0, #1
 8009290:	bd30      	pop	{r4, r5, pc}
 8009292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009296:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800929a:	2d19      	cmp	r5, #25
 800929c:	bf98      	it	ls
 800929e:	3220      	addls	r2, #32
 80092a0:	42a2      	cmp	r2, r4
 80092a2:	d0f0      	beq.n	8009286 <__match+0x6>
 80092a4:	2000      	movs	r0, #0
 80092a6:	e7f3      	b.n	8009290 <__match+0x10>

080092a8 <__hexnan>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	680b      	ldr	r3, [r1, #0]
 80092ae:	6801      	ldr	r1, [r0, #0]
 80092b0:	115e      	asrs	r6, r3, #5
 80092b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092b6:	f013 031f 	ands.w	r3, r3, #31
 80092ba:	b087      	sub	sp, #28
 80092bc:	bf18      	it	ne
 80092be:	3604      	addne	r6, #4
 80092c0:	2500      	movs	r5, #0
 80092c2:	1f37      	subs	r7, r6, #4
 80092c4:	4682      	mov	sl, r0
 80092c6:	4690      	mov	r8, r2
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80092ce:	46b9      	mov	r9, r7
 80092d0:	463c      	mov	r4, r7
 80092d2:	9502      	str	r5, [sp, #8]
 80092d4:	46ab      	mov	fp, r5
 80092d6:	784a      	ldrb	r2, [r1, #1]
 80092d8:	1c4b      	adds	r3, r1, #1
 80092da:	9303      	str	r3, [sp, #12]
 80092dc:	b342      	cbz	r2, 8009330 <__hexnan+0x88>
 80092de:	4610      	mov	r0, r2
 80092e0:	9105      	str	r1, [sp, #20]
 80092e2:	9204      	str	r2, [sp, #16]
 80092e4:	f7ff fd5e 	bl	8008da4 <__hexdig_fun>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d14f      	bne.n	800938c <__hexnan+0xe4>
 80092ec:	9a04      	ldr	r2, [sp, #16]
 80092ee:	9905      	ldr	r1, [sp, #20]
 80092f0:	2a20      	cmp	r2, #32
 80092f2:	d818      	bhi.n	8009326 <__hexnan+0x7e>
 80092f4:	9b02      	ldr	r3, [sp, #8]
 80092f6:	459b      	cmp	fp, r3
 80092f8:	dd13      	ble.n	8009322 <__hexnan+0x7a>
 80092fa:	454c      	cmp	r4, r9
 80092fc:	d206      	bcs.n	800930c <__hexnan+0x64>
 80092fe:	2d07      	cmp	r5, #7
 8009300:	dc04      	bgt.n	800930c <__hexnan+0x64>
 8009302:	462a      	mov	r2, r5
 8009304:	4649      	mov	r1, r9
 8009306:	4620      	mov	r0, r4
 8009308:	f7ff ffa8 	bl	800925c <L_shift>
 800930c:	4544      	cmp	r4, r8
 800930e:	d950      	bls.n	80093b2 <__hexnan+0x10a>
 8009310:	2300      	movs	r3, #0
 8009312:	f1a4 0904 	sub.w	r9, r4, #4
 8009316:	f844 3c04 	str.w	r3, [r4, #-4]
 800931a:	f8cd b008 	str.w	fp, [sp, #8]
 800931e:	464c      	mov	r4, r9
 8009320:	461d      	mov	r5, r3
 8009322:	9903      	ldr	r1, [sp, #12]
 8009324:	e7d7      	b.n	80092d6 <__hexnan+0x2e>
 8009326:	2a29      	cmp	r2, #41	; 0x29
 8009328:	d156      	bne.n	80093d8 <__hexnan+0x130>
 800932a:	3102      	adds	r1, #2
 800932c:	f8ca 1000 	str.w	r1, [sl]
 8009330:	f1bb 0f00 	cmp.w	fp, #0
 8009334:	d050      	beq.n	80093d8 <__hexnan+0x130>
 8009336:	454c      	cmp	r4, r9
 8009338:	d206      	bcs.n	8009348 <__hexnan+0xa0>
 800933a:	2d07      	cmp	r5, #7
 800933c:	dc04      	bgt.n	8009348 <__hexnan+0xa0>
 800933e:	462a      	mov	r2, r5
 8009340:	4649      	mov	r1, r9
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff ff8a 	bl	800925c <L_shift>
 8009348:	4544      	cmp	r4, r8
 800934a:	d934      	bls.n	80093b6 <__hexnan+0x10e>
 800934c:	f1a8 0204 	sub.w	r2, r8, #4
 8009350:	4623      	mov	r3, r4
 8009352:	f853 1b04 	ldr.w	r1, [r3], #4
 8009356:	f842 1f04 	str.w	r1, [r2, #4]!
 800935a:	429f      	cmp	r7, r3
 800935c:	d2f9      	bcs.n	8009352 <__hexnan+0xaa>
 800935e:	1b3b      	subs	r3, r7, r4
 8009360:	f023 0303 	bic.w	r3, r3, #3
 8009364:	3304      	adds	r3, #4
 8009366:	3401      	adds	r4, #1
 8009368:	3e03      	subs	r6, #3
 800936a:	42b4      	cmp	r4, r6
 800936c:	bf88      	it	hi
 800936e:	2304      	movhi	r3, #4
 8009370:	4443      	add	r3, r8
 8009372:	2200      	movs	r2, #0
 8009374:	f843 2b04 	str.w	r2, [r3], #4
 8009378:	429f      	cmp	r7, r3
 800937a:	d2fb      	bcs.n	8009374 <__hexnan+0xcc>
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	b91b      	cbnz	r3, 8009388 <__hexnan+0xe0>
 8009380:	4547      	cmp	r7, r8
 8009382:	d127      	bne.n	80093d4 <__hexnan+0x12c>
 8009384:	2301      	movs	r3, #1
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	2005      	movs	r0, #5
 800938a:	e026      	b.n	80093da <__hexnan+0x132>
 800938c:	3501      	adds	r5, #1
 800938e:	2d08      	cmp	r5, #8
 8009390:	f10b 0b01 	add.w	fp, fp, #1
 8009394:	dd06      	ble.n	80093a4 <__hexnan+0xfc>
 8009396:	4544      	cmp	r4, r8
 8009398:	d9c3      	bls.n	8009322 <__hexnan+0x7a>
 800939a:	2300      	movs	r3, #0
 800939c:	f844 3c04 	str.w	r3, [r4, #-4]
 80093a0:	2501      	movs	r5, #1
 80093a2:	3c04      	subs	r4, #4
 80093a4:	6822      	ldr	r2, [r4, #0]
 80093a6:	f000 000f 	and.w	r0, r0, #15
 80093aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80093ae:	6022      	str	r2, [r4, #0]
 80093b0:	e7b7      	b.n	8009322 <__hexnan+0x7a>
 80093b2:	2508      	movs	r5, #8
 80093b4:	e7b5      	b.n	8009322 <__hexnan+0x7a>
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0df      	beq.n	800937c <__hexnan+0xd4>
 80093bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093c0:	f1c3 0320 	rsb	r3, r3, #32
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
 80093c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80093cc:	401a      	ands	r2, r3
 80093ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80093d2:	e7d3      	b.n	800937c <__hexnan+0xd4>
 80093d4:	3f04      	subs	r7, #4
 80093d6:	e7d1      	b.n	800937c <__hexnan+0xd4>
 80093d8:	2004      	movs	r0, #4
 80093da:	b007      	add	sp, #28
 80093dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093e0 <__ascii_mbtowc>:
 80093e0:	b082      	sub	sp, #8
 80093e2:	b901      	cbnz	r1, 80093e6 <__ascii_mbtowc+0x6>
 80093e4:	a901      	add	r1, sp, #4
 80093e6:	b142      	cbz	r2, 80093fa <__ascii_mbtowc+0x1a>
 80093e8:	b14b      	cbz	r3, 80093fe <__ascii_mbtowc+0x1e>
 80093ea:	7813      	ldrb	r3, [r2, #0]
 80093ec:	600b      	str	r3, [r1, #0]
 80093ee:	7812      	ldrb	r2, [r2, #0]
 80093f0:	1e10      	subs	r0, r2, #0
 80093f2:	bf18      	it	ne
 80093f4:	2001      	movne	r0, #1
 80093f6:	b002      	add	sp, #8
 80093f8:	4770      	bx	lr
 80093fa:	4610      	mov	r0, r2
 80093fc:	e7fb      	b.n	80093f6 <__ascii_mbtowc+0x16>
 80093fe:	f06f 0001 	mvn.w	r0, #1
 8009402:	e7f8      	b.n	80093f6 <__ascii_mbtowc+0x16>

08009404 <_Balloc>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	b976      	cbnz	r6, 800942c <_Balloc+0x28>
 800940e:	2010      	movs	r0, #16
 8009410:	f001 f87c 	bl	800a50c <malloc>
 8009414:	4602      	mov	r2, r0
 8009416:	6260      	str	r0, [r4, #36]	; 0x24
 8009418:	b920      	cbnz	r0, 8009424 <_Balloc+0x20>
 800941a:	4b18      	ldr	r3, [pc, #96]	; (800947c <_Balloc+0x78>)
 800941c:	4818      	ldr	r0, [pc, #96]	; (8009480 <_Balloc+0x7c>)
 800941e:	2166      	movs	r1, #102	; 0x66
 8009420:	f001 f844 	bl	800a4ac <__assert_func>
 8009424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009428:	6006      	str	r6, [r0, #0]
 800942a:	60c6      	str	r6, [r0, #12]
 800942c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800942e:	68f3      	ldr	r3, [r6, #12]
 8009430:	b183      	cbz	r3, 8009454 <_Balloc+0x50>
 8009432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800943a:	b9b8      	cbnz	r0, 800946c <_Balloc+0x68>
 800943c:	2101      	movs	r1, #1
 800943e:	fa01 f605 	lsl.w	r6, r1, r5
 8009442:	1d72      	adds	r2, r6, #5
 8009444:	0092      	lsls	r2, r2, #2
 8009446:	4620      	mov	r0, r4
 8009448:	f000 fc97 	bl	8009d7a <_calloc_r>
 800944c:	b160      	cbz	r0, 8009468 <_Balloc+0x64>
 800944e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009452:	e00e      	b.n	8009472 <_Balloc+0x6e>
 8009454:	2221      	movs	r2, #33	; 0x21
 8009456:	2104      	movs	r1, #4
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fc8e 	bl	8009d7a <_calloc_r>
 800945e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009460:	60f0      	str	r0, [r6, #12]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e4      	bne.n	8009432 <_Balloc+0x2e>
 8009468:	2000      	movs	r0, #0
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	6802      	ldr	r2, [r0, #0]
 800946e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009472:	2300      	movs	r3, #0
 8009474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009478:	e7f7      	b.n	800946a <_Balloc+0x66>
 800947a:	bf00      	nop
 800947c:	0800b298 	.word	0x0800b298
 8009480:	0800b2af 	.word	0x0800b2af

08009484 <_Bfree>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009488:	4605      	mov	r5, r0
 800948a:	460c      	mov	r4, r1
 800948c:	b976      	cbnz	r6, 80094ac <_Bfree+0x28>
 800948e:	2010      	movs	r0, #16
 8009490:	f001 f83c 	bl	800a50c <malloc>
 8009494:	4602      	mov	r2, r0
 8009496:	6268      	str	r0, [r5, #36]	; 0x24
 8009498:	b920      	cbnz	r0, 80094a4 <_Bfree+0x20>
 800949a:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <_Bfree+0x3c>)
 800949c:	4809      	ldr	r0, [pc, #36]	; (80094c4 <_Bfree+0x40>)
 800949e:	218a      	movs	r1, #138	; 0x8a
 80094a0:	f001 f804 	bl	800a4ac <__assert_func>
 80094a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a8:	6006      	str	r6, [r0, #0]
 80094aa:	60c6      	str	r6, [r0, #12]
 80094ac:	b13c      	cbz	r4, 80094be <_Bfree+0x3a>
 80094ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094b0:	6862      	ldr	r2, [r4, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094b8:	6021      	str	r1, [r4, #0]
 80094ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	0800b298 	.word	0x0800b298
 80094c4:	0800b2af 	.word	0x0800b2af

080094c8 <__multadd>:
 80094c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	690e      	ldr	r6, [r1, #16]
 80094ce:	4607      	mov	r7, r0
 80094d0:	4698      	mov	r8, r3
 80094d2:	460c      	mov	r4, r1
 80094d4:	f101 0014 	add.w	r0, r1, #20
 80094d8:	2300      	movs	r3, #0
 80094da:	6805      	ldr	r5, [r0, #0]
 80094dc:	b2a9      	uxth	r1, r5
 80094de:	fb02 8101 	mla	r1, r2, r1, r8
 80094e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80094e6:	0c2d      	lsrs	r5, r5, #16
 80094e8:	fb02 c505 	mla	r5, r2, r5, ip
 80094ec:	b289      	uxth	r1, r1
 80094ee:	3301      	adds	r3, #1
 80094f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80094f4:	429e      	cmp	r6, r3
 80094f6:	f840 1b04 	str.w	r1, [r0], #4
 80094fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80094fe:	dcec      	bgt.n	80094da <__multadd+0x12>
 8009500:	f1b8 0f00 	cmp.w	r8, #0
 8009504:	d022      	beq.n	800954c <__multadd+0x84>
 8009506:	68a3      	ldr	r3, [r4, #8]
 8009508:	42b3      	cmp	r3, r6
 800950a:	dc19      	bgt.n	8009540 <__multadd+0x78>
 800950c:	6861      	ldr	r1, [r4, #4]
 800950e:	4638      	mov	r0, r7
 8009510:	3101      	adds	r1, #1
 8009512:	f7ff ff77 	bl	8009404 <_Balloc>
 8009516:	4605      	mov	r5, r0
 8009518:	b928      	cbnz	r0, 8009526 <__multadd+0x5e>
 800951a:	4602      	mov	r2, r0
 800951c:	4b0d      	ldr	r3, [pc, #52]	; (8009554 <__multadd+0x8c>)
 800951e:	480e      	ldr	r0, [pc, #56]	; (8009558 <__multadd+0x90>)
 8009520:	21b5      	movs	r1, #181	; 0xb5
 8009522:	f000 ffc3 	bl	800a4ac <__assert_func>
 8009526:	6922      	ldr	r2, [r4, #16]
 8009528:	3202      	adds	r2, #2
 800952a:	f104 010c 	add.w	r1, r4, #12
 800952e:	0092      	lsls	r2, r2, #2
 8009530:	300c      	adds	r0, #12
 8009532:	f7fe fd2d 	bl	8007f90 <memcpy>
 8009536:	4621      	mov	r1, r4
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff ffa3 	bl	8009484 <_Bfree>
 800953e:	462c      	mov	r4, r5
 8009540:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009544:	3601      	adds	r6, #1
 8009546:	f8c3 8014 	str.w	r8, [r3, #20]
 800954a:	6126      	str	r6, [r4, #16]
 800954c:	4620      	mov	r0, r4
 800954e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009552:	bf00      	nop
 8009554:	0800b208 	.word	0x0800b208
 8009558:	0800b2af 	.word	0x0800b2af

0800955c <__s2b>:
 800955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009560:	460c      	mov	r4, r1
 8009562:	4615      	mov	r5, r2
 8009564:	461f      	mov	r7, r3
 8009566:	2209      	movs	r2, #9
 8009568:	3308      	adds	r3, #8
 800956a:	4606      	mov	r6, r0
 800956c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009570:	2100      	movs	r1, #0
 8009572:	2201      	movs	r2, #1
 8009574:	429a      	cmp	r2, r3
 8009576:	db09      	blt.n	800958c <__s2b+0x30>
 8009578:	4630      	mov	r0, r6
 800957a:	f7ff ff43 	bl	8009404 <_Balloc>
 800957e:	b940      	cbnz	r0, 8009592 <__s2b+0x36>
 8009580:	4602      	mov	r2, r0
 8009582:	4b19      	ldr	r3, [pc, #100]	; (80095e8 <__s2b+0x8c>)
 8009584:	4819      	ldr	r0, [pc, #100]	; (80095ec <__s2b+0x90>)
 8009586:	21ce      	movs	r1, #206	; 0xce
 8009588:	f000 ff90 	bl	800a4ac <__assert_func>
 800958c:	0052      	lsls	r2, r2, #1
 800958e:	3101      	adds	r1, #1
 8009590:	e7f0      	b.n	8009574 <__s2b+0x18>
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	6143      	str	r3, [r0, #20]
 8009596:	2d09      	cmp	r5, #9
 8009598:	f04f 0301 	mov.w	r3, #1
 800959c:	6103      	str	r3, [r0, #16]
 800959e:	dd16      	ble.n	80095ce <__s2b+0x72>
 80095a0:	f104 0909 	add.w	r9, r4, #9
 80095a4:	46c8      	mov	r8, r9
 80095a6:	442c      	add	r4, r5
 80095a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095ac:	4601      	mov	r1, r0
 80095ae:	3b30      	subs	r3, #48	; 0x30
 80095b0:	220a      	movs	r2, #10
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ff88 	bl	80094c8 <__multadd>
 80095b8:	45a0      	cmp	r8, r4
 80095ba:	d1f5      	bne.n	80095a8 <__s2b+0x4c>
 80095bc:	f1a5 0408 	sub.w	r4, r5, #8
 80095c0:	444c      	add	r4, r9
 80095c2:	1b2d      	subs	r5, r5, r4
 80095c4:	1963      	adds	r3, r4, r5
 80095c6:	42bb      	cmp	r3, r7
 80095c8:	db04      	blt.n	80095d4 <__s2b+0x78>
 80095ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ce:	340a      	adds	r4, #10
 80095d0:	2509      	movs	r5, #9
 80095d2:	e7f6      	b.n	80095c2 <__s2b+0x66>
 80095d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095d8:	4601      	mov	r1, r0
 80095da:	3b30      	subs	r3, #48	; 0x30
 80095dc:	220a      	movs	r2, #10
 80095de:	4630      	mov	r0, r6
 80095e0:	f7ff ff72 	bl	80094c8 <__multadd>
 80095e4:	e7ee      	b.n	80095c4 <__s2b+0x68>
 80095e6:	bf00      	nop
 80095e8:	0800b208 	.word	0x0800b208
 80095ec:	0800b2af 	.word	0x0800b2af

080095f0 <__hi0bits>:
 80095f0:	0c03      	lsrs	r3, r0, #16
 80095f2:	041b      	lsls	r3, r3, #16
 80095f4:	b9d3      	cbnz	r3, 800962c <__hi0bits+0x3c>
 80095f6:	0400      	lsls	r0, r0, #16
 80095f8:	2310      	movs	r3, #16
 80095fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095fe:	bf04      	itt	eq
 8009600:	0200      	lsleq	r0, r0, #8
 8009602:	3308      	addeq	r3, #8
 8009604:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009608:	bf04      	itt	eq
 800960a:	0100      	lsleq	r0, r0, #4
 800960c:	3304      	addeq	r3, #4
 800960e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009612:	bf04      	itt	eq
 8009614:	0080      	lsleq	r0, r0, #2
 8009616:	3302      	addeq	r3, #2
 8009618:	2800      	cmp	r0, #0
 800961a:	db05      	blt.n	8009628 <__hi0bits+0x38>
 800961c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009620:	f103 0301 	add.w	r3, r3, #1
 8009624:	bf08      	it	eq
 8009626:	2320      	moveq	r3, #32
 8009628:	4618      	mov	r0, r3
 800962a:	4770      	bx	lr
 800962c:	2300      	movs	r3, #0
 800962e:	e7e4      	b.n	80095fa <__hi0bits+0xa>

08009630 <__lo0bits>:
 8009630:	6803      	ldr	r3, [r0, #0]
 8009632:	f013 0207 	ands.w	r2, r3, #7
 8009636:	4601      	mov	r1, r0
 8009638:	d00b      	beq.n	8009652 <__lo0bits+0x22>
 800963a:	07da      	lsls	r2, r3, #31
 800963c:	d424      	bmi.n	8009688 <__lo0bits+0x58>
 800963e:	0798      	lsls	r0, r3, #30
 8009640:	bf49      	itett	mi
 8009642:	085b      	lsrmi	r3, r3, #1
 8009644:	089b      	lsrpl	r3, r3, #2
 8009646:	2001      	movmi	r0, #1
 8009648:	600b      	strmi	r3, [r1, #0]
 800964a:	bf5c      	itt	pl
 800964c:	600b      	strpl	r3, [r1, #0]
 800964e:	2002      	movpl	r0, #2
 8009650:	4770      	bx	lr
 8009652:	b298      	uxth	r0, r3
 8009654:	b9b0      	cbnz	r0, 8009684 <__lo0bits+0x54>
 8009656:	0c1b      	lsrs	r3, r3, #16
 8009658:	2010      	movs	r0, #16
 800965a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800965e:	bf04      	itt	eq
 8009660:	0a1b      	lsreq	r3, r3, #8
 8009662:	3008      	addeq	r0, #8
 8009664:	071a      	lsls	r2, r3, #28
 8009666:	bf04      	itt	eq
 8009668:	091b      	lsreq	r3, r3, #4
 800966a:	3004      	addeq	r0, #4
 800966c:	079a      	lsls	r2, r3, #30
 800966e:	bf04      	itt	eq
 8009670:	089b      	lsreq	r3, r3, #2
 8009672:	3002      	addeq	r0, #2
 8009674:	07da      	lsls	r2, r3, #31
 8009676:	d403      	bmi.n	8009680 <__lo0bits+0x50>
 8009678:	085b      	lsrs	r3, r3, #1
 800967a:	f100 0001 	add.w	r0, r0, #1
 800967e:	d005      	beq.n	800968c <__lo0bits+0x5c>
 8009680:	600b      	str	r3, [r1, #0]
 8009682:	4770      	bx	lr
 8009684:	4610      	mov	r0, r2
 8009686:	e7e8      	b.n	800965a <__lo0bits+0x2a>
 8009688:	2000      	movs	r0, #0
 800968a:	4770      	bx	lr
 800968c:	2020      	movs	r0, #32
 800968e:	4770      	bx	lr

08009690 <__i2b>:
 8009690:	b510      	push	{r4, lr}
 8009692:	460c      	mov	r4, r1
 8009694:	2101      	movs	r1, #1
 8009696:	f7ff feb5 	bl	8009404 <_Balloc>
 800969a:	4602      	mov	r2, r0
 800969c:	b928      	cbnz	r0, 80096aa <__i2b+0x1a>
 800969e:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <__i2b+0x24>)
 80096a0:	4805      	ldr	r0, [pc, #20]	; (80096b8 <__i2b+0x28>)
 80096a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096a6:	f000 ff01 	bl	800a4ac <__assert_func>
 80096aa:	2301      	movs	r3, #1
 80096ac:	6144      	str	r4, [r0, #20]
 80096ae:	6103      	str	r3, [r0, #16]
 80096b0:	bd10      	pop	{r4, pc}
 80096b2:	bf00      	nop
 80096b4:	0800b208 	.word	0x0800b208
 80096b8:	0800b2af 	.word	0x0800b2af

080096bc <__multiply>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	4614      	mov	r4, r2
 80096c2:	690a      	ldr	r2, [r1, #16]
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	bfb8      	it	lt
 80096ca:	460b      	movlt	r3, r1
 80096cc:	460d      	mov	r5, r1
 80096ce:	bfbc      	itt	lt
 80096d0:	4625      	movlt	r5, r4
 80096d2:	461c      	movlt	r4, r3
 80096d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80096d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80096dc:	68ab      	ldr	r3, [r5, #8]
 80096de:	6869      	ldr	r1, [r5, #4]
 80096e0:	eb0a 0709 	add.w	r7, sl, r9
 80096e4:	42bb      	cmp	r3, r7
 80096e6:	b085      	sub	sp, #20
 80096e8:	bfb8      	it	lt
 80096ea:	3101      	addlt	r1, #1
 80096ec:	f7ff fe8a 	bl	8009404 <_Balloc>
 80096f0:	b930      	cbnz	r0, 8009700 <__multiply+0x44>
 80096f2:	4602      	mov	r2, r0
 80096f4:	4b42      	ldr	r3, [pc, #264]	; (8009800 <__multiply+0x144>)
 80096f6:	4843      	ldr	r0, [pc, #268]	; (8009804 <__multiply+0x148>)
 80096f8:	f240 115d 	movw	r1, #349	; 0x15d
 80096fc:	f000 fed6 	bl	800a4ac <__assert_func>
 8009700:	f100 0614 	add.w	r6, r0, #20
 8009704:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009708:	4633      	mov	r3, r6
 800970a:	2200      	movs	r2, #0
 800970c:	4543      	cmp	r3, r8
 800970e:	d31e      	bcc.n	800974e <__multiply+0x92>
 8009710:	f105 0c14 	add.w	ip, r5, #20
 8009714:	f104 0314 	add.w	r3, r4, #20
 8009718:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800971c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009720:	9202      	str	r2, [sp, #8]
 8009722:	ebac 0205 	sub.w	r2, ip, r5
 8009726:	3a15      	subs	r2, #21
 8009728:	f022 0203 	bic.w	r2, r2, #3
 800972c:	3204      	adds	r2, #4
 800972e:	f105 0115 	add.w	r1, r5, #21
 8009732:	458c      	cmp	ip, r1
 8009734:	bf38      	it	cc
 8009736:	2204      	movcc	r2, #4
 8009738:	9201      	str	r2, [sp, #4]
 800973a:	9a02      	ldr	r2, [sp, #8]
 800973c:	9303      	str	r3, [sp, #12]
 800973e:	429a      	cmp	r2, r3
 8009740:	d808      	bhi.n	8009754 <__multiply+0x98>
 8009742:	2f00      	cmp	r7, #0
 8009744:	dc55      	bgt.n	80097f2 <__multiply+0x136>
 8009746:	6107      	str	r7, [r0, #16]
 8009748:	b005      	add	sp, #20
 800974a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974e:	f843 2b04 	str.w	r2, [r3], #4
 8009752:	e7db      	b.n	800970c <__multiply+0x50>
 8009754:	f8b3 a000 	ldrh.w	sl, [r3]
 8009758:	f1ba 0f00 	cmp.w	sl, #0
 800975c:	d020      	beq.n	80097a0 <__multiply+0xe4>
 800975e:	f105 0e14 	add.w	lr, r5, #20
 8009762:	46b1      	mov	r9, r6
 8009764:	2200      	movs	r2, #0
 8009766:	f85e 4b04 	ldr.w	r4, [lr], #4
 800976a:	f8d9 b000 	ldr.w	fp, [r9]
 800976e:	b2a1      	uxth	r1, r4
 8009770:	fa1f fb8b 	uxth.w	fp, fp
 8009774:	fb0a b101 	mla	r1, sl, r1, fp
 8009778:	4411      	add	r1, r2
 800977a:	f8d9 2000 	ldr.w	r2, [r9]
 800977e:	0c24      	lsrs	r4, r4, #16
 8009780:	0c12      	lsrs	r2, r2, #16
 8009782:	fb0a 2404 	mla	r4, sl, r4, r2
 8009786:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800978a:	b289      	uxth	r1, r1
 800978c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009790:	45f4      	cmp	ip, lr
 8009792:	f849 1b04 	str.w	r1, [r9], #4
 8009796:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800979a:	d8e4      	bhi.n	8009766 <__multiply+0xaa>
 800979c:	9901      	ldr	r1, [sp, #4]
 800979e:	5072      	str	r2, [r6, r1]
 80097a0:	9a03      	ldr	r2, [sp, #12]
 80097a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097a6:	3304      	adds	r3, #4
 80097a8:	f1b9 0f00 	cmp.w	r9, #0
 80097ac:	d01f      	beq.n	80097ee <__multiply+0x132>
 80097ae:	6834      	ldr	r4, [r6, #0]
 80097b0:	f105 0114 	add.w	r1, r5, #20
 80097b4:	46b6      	mov	lr, r6
 80097b6:	f04f 0a00 	mov.w	sl, #0
 80097ba:	880a      	ldrh	r2, [r1, #0]
 80097bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80097c0:	fb09 b202 	mla	r2, r9, r2, fp
 80097c4:	4492      	add	sl, r2
 80097c6:	b2a4      	uxth	r4, r4
 80097c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80097cc:	f84e 4b04 	str.w	r4, [lr], #4
 80097d0:	f851 4b04 	ldr.w	r4, [r1], #4
 80097d4:	f8be 2000 	ldrh.w	r2, [lr]
 80097d8:	0c24      	lsrs	r4, r4, #16
 80097da:	fb09 2404 	mla	r4, r9, r4, r2
 80097de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80097e2:	458c      	cmp	ip, r1
 80097e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80097e8:	d8e7      	bhi.n	80097ba <__multiply+0xfe>
 80097ea:	9a01      	ldr	r2, [sp, #4]
 80097ec:	50b4      	str	r4, [r6, r2]
 80097ee:	3604      	adds	r6, #4
 80097f0:	e7a3      	b.n	800973a <__multiply+0x7e>
 80097f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1a5      	bne.n	8009746 <__multiply+0x8a>
 80097fa:	3f01      	subs	r7, #1
 80097fc:	e7a1      	b.n	8009742 <__multiply+0x86>
 80097fe:	bf00      	nop
 8009800:	0800b208 	.word	0x0800b208
 8009804:	0800b2af 	.word	0x0800b2af

08009808 <__pow5mult>:
 8009808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800980c:	4615      	mov	r5, r2
 800980e:	f012 0203 	ands.w	r2, r2, #3
 8009812:	4606      	mov	r6, r0
 8009814:	460f      	mov	r7, r1
 8009816:	d007      	beq.n	8009828 <__pow5mult+0x20>
 8009818:	4c25      	ldr	r4, [pc, #148]	; (80098b0 <__pow5mult+0xa8>)
 800981a:	3a01      	subs	r2, #1
 800981c:	2300      	movs	r3, #0
 800981e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009822:	f7ff fe51 	bl	80094c8 <__multadd>
 8009826:	4607      	mov	r7, r0
 8009828:	10ad      	asrs	r5, r5, #2
 800982a:	d03d      	beq.n	80098a8 <__pow5mult+0xa0>
 800982c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800982e:	b97c      	cbnz	r4, 8009850 <__pow5mult+0x48>
 8009830:	2010      	movs	r0, #16
 8009832:	f000 fe6b 	bl	800a50c <malloc>
 8009836:	4602      	mov	r2, r0
 8009838:	6270      	str	r0, [r6, #36]	; 0x24
 800983a:	b928      	cbnz	r0, 8009848 <__pow5mult+0x40>
 800983c:	4b1d      	ldr	r3, [pc, #116]	; (80098b4 <__pow5mult+0xac>)
 800983e:	481e      	ldr	r0, [pc, #120]	; (80098b8 <__pow5mult+0xb0>)
 8009840:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009844:	f000 fe32 	bl	800a4ac <__assert_func>
 8009848:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800984c:	6004      	str	r4, [r0, #0]
 800984e:	60c4      	str	r4, [r0, #12]
 8009850:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009858:	b94c      	cbnz	r4, 800986e <__pow5mult+0x66>
 800985a:	f240 2171 	movw	r1, #625	; 0x271
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ff16 	bl	8009690 <__i2b>
 8009864:	2300      	movs	r3, #0
 8009866:	f8c8 0008 	str.w	r0, [r8, #8]
 800986a:	4604      	mov	r4, r0
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	f04f 0900 	mov.w	r9, #0
 8009872:	07eb      	lsls	r3, r5, #31
 8009874:	d50a      	bpl.n	800988c <__pow5mult+0x84>
 8009876:	4639      	mov	r1, r7
 8009878:	4622      	mov	r2, r4
 800987a:	4630      	mov	r0, r6
 800987c:	f7ff ff1e 	bl	80096bc <__multiply>
 8009880:	4639      	mov	r1, r7
 8009882:	4680      	mov	r8, r0
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff fdfd 	bl	8009484 <_Bfree>
 800988a:	4647      	mov	r7, r8
 800988c:	106d      	asrs	r5, r5, #1
 800988e:	d00b      	beq.n	80098a8 <__pow5mult+0xa0>
 8009890:	6820      	ldr	r0, [r4, #0]
 8009892:	b938      	cbnz	r0, 80098a4 <__pow5mult+0x9c>
 8009894:	4622      	mov	r2, r4
 8009896:	4621      	mov	r1, r4
 8009898:	4630      	mov	r0, r6
 800989a:	f7ff ff0f 	bl	80096bc <__multiply>
 800989e:	6020      	str	r0, [r4, #0]
 80098a0:	f8c0 9000 	str.w	r9, [r0]
 80098a4:	4604      	mov	r4, r0
 80098a6:	e7e4      	b.n	8009872 <__pow5mult+0x6a>
 80098a8:	4638      	mov	r0, r7
 80098aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ae:	bf00      	nop
 80098b0:	0800b400 	.word	0x0800b400
 80098b4:	0800b298 	.word	0x0800b298
 80098b8:	0800b2af 	.word	0x0800b2af

080098bc <__lshift>:
 80098bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	460c      	mov	r4, r1
 80098c2:	6849      	ldr	r1, [r1, #4]
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	4607      	mov	r7, r0
 80098ce:	4691      	mov	r9, r2
 80098d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098d4:	f108 0601 	add.w	r6, r8, #1
 80098d8:	42b3      	cmp	r3, r6
 80098da:	db0b      	blt.n	80098f4 <__lshift+0x38>
 80098dc:	4638      	mov	r0, r7
 80098de:	f7ff fd91 	bl	8009404 <_Balloc>
 80098e2:	4605      	mov	r5, r0
 80098e4:	b948      	cbnz	r0, 80098fa <__lshift+0x3e>
 80098e6:	4602      	mov	r2, r0
 80098e8:	4b28      	ldr	r3, [pc, #160]	; (800998c <__lshift+0xd0>)
 80098ea:	4829      	ldr	r0, [pc, #164]	; (8009990 <__lshift+0xd4>)
 80098ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80098f0:	f000 fddc 	bl	800a4ac <__assert_func>
 80098f4:	3101      	adds	r1, #1
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	e7ee      	b.n	80098d8 <__lshift+0x1c>
 80098fa:	2300      	movs	r3, #0
 80098fc:	f100 0114 	add.w	r1, r0, #20
 8009900:	f100 0210 	add.w	r2, r0, #16
 8009904:	4618      	mov	r0, r3
 8009906:	4553      	cmp	r3, sl
 8009908:	db33      	blt.n	8009972 <__lshift+0xb6>
 800990a:	6920      	ldr	r0, [r4, #16]
 800990c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009910:	f104 0314 	add.w	r3, r4, #20
 8009914:	f019 091f 	ands.w	r9, r9, #31
 8009918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800991c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009920:	d02b      	beq.n	800997a <__lshift+0xbe>
 8009922:	f1c9 0e20 	rsb	lr, r9, #32
 8009926:	468a      	mov	sl, r1
 8009928:	2200      	movs	r2, #0
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	fa00 f009 	lsl.w	r0, r0, r9
 8009930:	4302      	orrs	r2, r0
 8009932:	f84a 2b04 	str.w	r2, [sl], #4
 8009936:	f853 2b04 	ldr.w	r2, [r3], #4
 800993a:	459c      	cmp	ip, r3
 800993c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009940:	d8f3      	bhi.n	800992a <__lshift+0x6e>
 8009942:	ebac 0304 	sub.w	r3, ip, r4
 8009946:	3b15      	subs	r3, #21
 8009948:	f023 0303 	bic.w	r3, r3, #3
 800994c:	3304      	adds	r3, #4
 800994e:	f104 0015 	add.w	r0, r4, #21
 8009952:	4584      	cmp	ip, r0
 8009954:	bf38      	it	cc
 8009956:	2304      	movcc	r3, #4
 8009958:	50ca      	str	r2, [r1, r3]
 800995a:	b10a      	cbz	r2, 8009960 <__lshift+0xa4>
 800995c:	f108 0602 	add.w	r6, r8, #2
 8009960:	3e01      	subs	r6, #1
 8009962:	4638      	mov	r0, r7
 8009964:	612e      	str	r6, [r5, #16]
 8009966:	4621      	mov	r1, r4
 8009968:	f7ff fd8c 	bl	8009484 <_Bfree>
 800996c:	4628      	mov	r0, r5
 800996e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009972:	f842 0f04 	str.w	r0, [r2, #4]!
 8009976:	3301      	adds	r3, #1
 8009978:	e7c5      	b.n	8009906 <__lshift+0x4a>
 800997a:	3904      	subs	r1, #4
 800997c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009980:	f841 2f04 	str.w	r2, [r1, #4]!
 8009984:	459c      	cmp	ip, r3
 8009986:	d8f9      	bhi.n	800997c <__lshift+0xc0>
 8009988:	e7ea      	b.n	8009960 <__lshift+0xa4>
 800998a:	bf00      	nop
 800998c:	0800b208 	.word	0x0800b208
 8009990:	0800b2af 	.word	0x0800b2af

08009994 <__mcmp>:
 8009994:	b530      	push	{r4, r5, lr}
 8009996:	6902      	ldr	r2, [r0, #16]
 8009998:	690c      	ldr	r4, [r1, #16]
 800999a:	1b12      	subs	r2, r2, r4
 800999c:	d10e      	bne.n	80099bc <__mcmp+0x28>
 800999e:	f100 0314 	add.w	r3, r0, #20
 80099a2:	3114      	adds	r1, #20
 80099a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099b4:	42a5      	cmp	r5, r4
 80099b6:	d003      	beq.n	80099c0 <__mcmp+0x2c>
 80099b8:	d305      	bcc.n	80099c6 <__mcmp+0x32>
 80099ba:	2201      	movs	r2, #1
 80099bc:	4610      	mov	r0, r2
 80099be:	bd30      	pop	{r4, r5, pc}
 80099c0:	4283      	cmp	r3, r0
 80099c2:	d3f3      	bcc.n	80099ac <__mcmp+0x18>
 80099c4:	e7fa      	b.n	80099bc <__mcmp+0x28>
 80099c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099ca:	e7f7      	b.n	80099bc <__mcmp+0x28>

080099cc <__mdiff>:
 80099cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	460c      	mov	r4, r1
 80099d2:	4606      	mov	r6, r0
 80099d4:	4611      	mov	r1, r2
 80099d6:	4620      	mov	r0, r4
 80099d8:	4617      	mov	r7, r2
 80099da:	f7ff ffdb 	bl	8009994 <__mcmp>
 80099de:	1e05      	subs	r5, r0, #0
 80099e0:	d110      	bne.n	8009a04 <__mdiff+0x38>
 80099e2:	4629      	mov	r1, r5
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7ff fd0d 	bl	8009404 <_Balloc>
 80099ea:	b930      	cbnz	r0, 80099fa <__mdiff+0x2e>
 80099ec:	4b39      	ldr	r3, [pc, #228]	; (8009ad4 <__mdiff+0x108>)
 80099ee:	4602      	mov	r2, r0
 80099f0:	f240 2132 	movw	r1, #562	; 0x232
 80099f4:	4838      	ldr	r0, [pc, #224]	; (8009ad8 <__mdiff+0x10c>)
 80099f6:	f000 fd59 	bl	800a4ac <__assert_func>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a04:	bfa4      	itt	ge
 8009a06:	463b      	movge	r3, r7
 8009a08:	4627      	movge	r7, r4
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	6879      	ldr	r1, [r7, #4]
 8009a0e:	bfa6      	itte	ge
 8009a10:	461c      	movge	r4, r3
 8009a12:	2500      	movge	r5, #0
 8009a14:	2501      	movlt	r5, #1
 8009a16:	f7ff fcf5 	bl	8009404 <_Balloc>
 8009a1a:	b920      	cbnz	r0, 8009a26 <__mdiff+0x5a>
 8009a1c:	4b2d      	ldr	r3, [pc, #180]	; (8009ad4 <__mdiff+0x108>)
 8009a1e:	4602      	mov	r2, r0
 8009a20:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a24:	e7e6      	b.n	80099f4 <__mdiff+0x28>
 8009a26:	693e      	ldr	r6, [r7, #16]
 8009a28:	60c5      	str	r5, [r0, #12]
 8009a2a:	6925      	ldr	r5, [r4, #16]
 8009a2c:	f107 0114 	add.w	r1, r7, #20
 8009a30:	f104 0914 	add.w	r9, r4, #20
 8009a34:	f100 0e14 	add.w	lr, r0, #20
 8009a38:	f107 0210 	add.w	r2, r7, #16
 8009a3c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009a40:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009a44:	46f2      	mov	sl, lr
 8009a46:	2700      	movs	r7, #0
 8009a48:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a50:	fa1f f883 	uxth.w	r8, r3
 8009a54:	fa17 f78b 	uxtah	r7, r7, fp
 8009a58:	0c1b      	lsrs	r3, r3, #16
 8009a5a:	eba7 0808 	sub.w	r8, r7, r8
 8009a5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a66:	fa1f f888 	uxth.w	r8, r8
 8009a6a:	141f      	asrs	r7, r3, #16
 8009a6c:	454d      	cmp	r5, r9
 8009a6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a72:	f84a 3b04 	str.w	r3, [sl], #4
 8009a76:	d8e7      	bhi.n	8009a48 <__mdiff+0x7c>
 8009a78:	1b2b      	subs	r3, r5, r4
 8009a7a:	3b15      	subs	r3, #21
 8009a7c:	f023 0303 	bic.w	r3, r3, #3
 8009a80:	3304      	adds	r3, #4
 8009a82:	3415      	adds	r4, #21
 8009a84:	42a5      	cmp	r5, r4
 8009a86:	bf38      	it	cc
 8009a88:	2304      	movcc	r3, #4
 8009a8a:	4419      	add	r1, r3
 8009a8c:	4473      	add	r3, lr
 8009a8e:	469e      	mov	lr, r3
 8009a90:	460d      	mov	r5, r1
 8009a92:	4565      	cmp	r5, ip
 8009a94:	d30e      	bcc.n	8009ab4 <__mdiff+0xe8>
 8009a96:	f10c 0203 	add.w	r2, ip, #3
 8009a9a:	1a52      	subs	r2, r2, r1
 8009a9c:	f022 0203 	bic.w	r2, r2, #3
 8009aa0:	3903      	subs	r1, #3
 8009aa2:	458c      	cmp	ip, r1
 8009aa4:	bf38      	it	cc
 8009aa6:	2200      	movcc	r2, #0
 8009aa8:	441a      	add	r2, r3
 8009aaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009aae:	b17b      	cbz	r3, 8009ad0 <__mdiff+0x104>
 8009ab0:	6106      	str	r6, [r0, #16]
 8009ab2:	e7a5      	b.n	8009a00 <__mdiff+0x34>
 8009ab4:	f855 8b04 	ldr.w	r8, [r5], #4
 8009ab8:	fa17 f488 	uxtah	r4, r7, r8
 8009abc:	1422      	asrs	r2, r4, #16
 8009abe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009ac2:	b2a4      	uxth	r4, r4
 8009ac4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009ac8:	f84e 4b04 	str.w	r4, [lr], #4
 8009acc:	1417      	asrs	r7, r2, #16
 8009ace:	e7e0      	b.n	8009a92 <__mdiff+0xc6>
 8009ad0:	3e01      	subs	r6, #1
 8009ad2:	e7ea      	b.n	8009aaa <__mdiff+0xde>
 8009ad4:	0800b208 	.word	0x0800b208
 8009ad8:	0800b2af 	.word	0x0800b2af

08009adc <__ulp>:
 8009adc:	b082      	sub	sp, #8
 8009ade:	ed8d 0b00 	vstr	d0, [sp]
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	4912      	ldr	r1, [pc, #72]	; (8009b30 <__ulp+0x54>)
 8009ae6:	4019      	ands	r1, r3
 8009ae8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009aec:	2900      	cmp	r1, #0
 8009aee:	dd05      	ble.n	8009afc <__ulp+0x20>
 8009af0:	2200      	movs	r2, #0
 8009af2:	460b      	mov	r3, r1
 8009af4:	ec43 2b10 	vmov	d0, r2, r3
 8009af8:	b002      	add	sp, #8
 8009afa:	4770      	bx	lr
 8009afc:	4249      	negs	r1, r1
 8009afe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b02:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	f04f 0300 	mov.w	r3, #0
 8009b0e:	da04      	bge.n	8009b1a <__ulp+0x3e>
 8009b10:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b14:	fa41 f300 	asr.w	r3, r1, r0
 8009b18:	e7ec      	b.n	8009af4 <__ulp+0x18>
 8009b1a:	f1a0 0114 	sub.w	r1, r0, #20
 8009b1e:	291e      	cmp	r1, #30
 8009b20:	bfda      	itte	le
 8009b22:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b26:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b2a:	2101      	movgt	r1, #1
 8009b2c:	460a      	mov	r2, r1
 8009b2e:	e7e1      	b.n	8009af4 <__ulp+0x18>
 8009b30:	7ff00000 	.word	0x7ff00000

08009b34 <__b2d>:
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b36:	6905      	ldr	r5, [r0, #16]
 8009b38:	f100 0714 	add.w	r7, r0, #20
 8009b3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b40:	1f2e      	subs	r6, r5, #4
 8009b42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b46:	4620      	mov	r0, r4
 8009b48:	f7ff fd52 	bl	80095f0 <__hi0bits>
 8009b4c:	f1c0 0320 	rsb	r3, r0, #32
 8009b50:	280a      	cmp	r0, #10
 8009b52:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009bd0 <__b2d+0x9c>
 8009b56:	600b      	str	r3, [r1, #0]
 8009b58:	dc14      	bgt.n	8009b84 <__b2d+0x50>
 8009b5a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b5e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b62:	42b7      	cmp	r7, r6
 8009b64:	ea41 030c 	orr.w	r3, r1, ip
 8009b68:	bf34      	ite	cc
 8009b6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b6e:	2100      	movcs	r1, #0
 8009b70:	3015      	adds	r0, #21
 8009b72:	fa04 f000 	lsl.w	r0, r4, r0
 8009b76:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b7a:	ea40 0201 	orr.w	r2, r0, r1
 8009b7e:	ec43 2b10 	vmov	d0, r2, r3
 8009b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b84:	42b7      	cmp	r7, r6
 8009b86:	bf3a      	itte	cc
 8009b88:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b8c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b90:	2100      	movcs	r1, #0
 8009b92:	380b      	subs	r0, #11
 8009b94:	d017      	beq.n	8009bc6 <__b2d+0x92>
 8009b96:	f1c0 0c20 	rsb	ip, r0, #32
 8009b9a:	fa04 f500 	lsl.w	r5, r4, r0
 8009b9e:	42be      	cmp	r6, r7
 8009ba0:	fa21 f40c 	lsr.w	r4, r1, ip
 8009ba4:	ea45 0504 	orr.w	r5, r5, r4
 8009ba8:	bf8c      	ite	hi
 8009baa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009bae:	2400      	movls	r4, #0
 8009bb0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009bb4:	fa01 f000 	lsl.w	r0, r1, r0
 8009bb8:	fa24 f40c 	lsr.w	r4, r4, ip
 8009bbc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bc0:	ea40 0204 	orr.w	r2, r0, r4
 8009bc4:	e7db      	b.n	8009b7e <__b2d+0x4a>
 8009bc6:	ea44 030c 	orr.w	r3, r4, ip
 8009bca:	460a      	mov	r2, r1
 8009bcc:	e7d7      	b.n	8009b7e <__b2d+0x4a>
 8009bce:	bf00      	nop
 8009bd0:	3ff00000 	.word	0x3ff00000

08009bd4 <__d2b>:
 8009bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bd8:	4689      	mov	r9, r1
 8009bda:	2101      	movs	r1, #1
 8009bdc:	ec57 6b10 	vmov	r6, r7, d0
 8009be0:	4690      	mov	r8, r2
 8009be2:	f7ff fc0f 	bl	8009404 <_Balloc>
 8009be6:	4604      	mov	r4, r0
 8009be8:	b930      	cbnz	r0, 8009bf8 <__d2b+0x24>
 8009bea:	4602      	mov	r2, r0
 8009bec:	4b25      	ldr	r3, [pc, #148]	; (8009c84 <__d2b+0xb0>)
 8009bee:	4826      	ldr	r0, [pc, #152]	; (8009c88 <__d2b+0xb4>)
 8009bf0:	f240 310a 	movw	r1, #778	; 0x30a
 8009bf4:	f000 fc5a 	bl	800a4ac <__assert_func>
 8009bf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009bfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c00:	bb35      	cbnz	r5, 8009c50 <__d2b+0x7c>
 8009c02:	2e00      	cmp	r6, #0
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	d028      	beq.n	8009c5a <__d2b+0x86>
 8009c08:	4668      	mov	r0, sp
 8009c0a:	9600      	str	r6, [sp, #0]
 8009c0c:	f7ff fd10 	bl	8009630 <__lo0bits>
 8009c10:	9900      	ldr	r1, [sp, #0]
 8009c12:	b300      	cbz	r0, 8009c56 <__d2b+0x82>
 8009c14:	9a01      	ldr	r2, [sp, #4]
 8009c16:	f1c0 0320 	rsb	r3, r0, #32
 8009c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1e:	430b      	orrs	r3, r1
 8009c20:	40c2      	lsrs	r2, r0
 8009c22:	6163      	str	r3, [r4, #20]
 8009c24:	9201      	str	r2, [sp, #4]
 8009c26:	9b01      	ldr	r3, [sp, #4]
 8009c28:	61a3      	str	r3, [r4, #24]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	bf14      	ite	ne
 8009c2e:	2202      	movne	r2, #2
 8009c30:	2201      	moveq	r2, #1
 8009c32:	6122      	str	r2, [r4, #16]
 8009c34:	b1d5      	cbz	r5, 8009c6c <__d2b+0x98>
 8009c36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c3a:	4405      	add	r5, r0
 8009c3c:	f8c9 5000 	str.w	r5, [r9]
 8009c40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c44:	f8c8 0000 	str.w	r0, [r8]
 8009c48:	4620      	mov	r0, r4
 8009c4a:	b003      	add	sp, #12
 8009c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c54:	e7d5      	b.n	8009c02 <__d2b+0x2e>
 8009c56:	6161      	str	r1, [r4, #20]
 8009c58:	e7e5      	b.n	8009c26 <__d2b+0x52>
 8009c5a:	a801      	add	r0, sp, #4
 8009c5c:	f7ff fce8 	bl	8009630 <__lo0bits>
 8009c60:	9b01      	ldr	r3, [sp, #4]
 8009c62:	6163      	str	r3, [r4, #20]
 8009c64:	2201      	movs	r2, #1
 8009c66:	6122      	str	r2, [r4, #16]
 8009c68:	3020      	adds	r0, #32
 8009c6a:	e7e3      	b.n	8009c34 <__d2b+0x60>
 8009c6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c74:	f8c9 0000 	str.w	r0, [r9]
 8009c78:	6918      	ldr	r0, [r3, #16]
 8009c7a:	f7ff fcb9 	bl	80095f0 <__hi0bits>
 8009c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c82:	e7df      	b.n	8009c44 <__d2b+0x70>
 8009c84:	0800b208 	.word	0x0800b208
 8009c88:	0800b2af 	.word	0x0800b2af

08009c8c <__ratio>:
 8009c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	4688      	mov	r8, r1
 8009c92:	4669      	mov	r1, sp
 8009c94:	4681      	mov	r9, r0
 8009c96:	f7ff ff4d 	bl	8009b34 <__b2d>
 8009c9a:	a901      	add	r1, sp, #4
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	ec55 4b10 	vmov	r4, r5, d0
 8009ca2:	f7ff ff47 	bl	8009b34 <__b2d>
 8009ca6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009caa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009cae:	eba3 0c02 	sub.w	ip, r3, r2
 8009cb2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009cbc:	ec51 0b10 	vmov	r0, r1, d0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bfd6      	itet	le
 8009cc4:	460a      	movle	r2, r1
 8009cc6:	462a      	movgt	r2, r5
 8009cc8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ccc:	468b      	mov	fp, r1
 8009cce:	462f      	mov	r7, r5
 8009cd0:	bfd4      	ite	le
 8009cd2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009cd6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cda:	4620      	mov	r0, r4
 8009cdc:	ee10 2a10 	vmov	r2, s0
 8009ce0:	465b      	mov	r3, fp
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 fdc2 	bl	800086c <__aeabi_ddiv>
 8009ce8:	ec41 0b10 	vmov	d0, r0, r1
 8009cec:	b003      	add	sp, #12
 8009cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cf2 <__copybits>:
 8009cf2:	3901      	subs	r1, #1
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	1149      	asrs	r1, r1, #5
 8009cf8:	6914      	ldr	r4, [r2, #16]
 8009cfa:	3101      	adds	r1, #1
 8009cfc:	f102 0314 	add.w	r3, r2, #20
 8009d00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d08:	1f05      	subs	r5, r0, #4
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	d30c      	bcc.n	8009d28 <__copybits+0x36>
 8009d0e:	1aa3      	subs	r3, r4, r2
 8009d10:	3b11      	subs	r3, #17
 8009d12:	f023 0303 	bic.w	r3, r3, #3
 8009d16:	3211      	adds	r2, #17
 8009d18:	42a2      	cmp	r2, r4
 8009d1a:	bf88      	it	hi
 8009d1c:	2300      	movhi	r3, #0
 8009d1e:	4418      	add	r0, r3
 8009d20:	2300      	movs	r3, #0
 8009d22:	4288      	cmp	r0, r1
 8009d24:	d305      	bcc.n	8009d32 <__copybits+0x40>
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d2c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d30:	e7eb      	b.n	8009d0a <__copybits+0x18>
 8009d32:	f840 3b04 	str.w	r3, [r0], #4
 8009d36:	e7f4      	b.n	8009d22 <__copybits+0x30>

08009d38 <__any_on>:
 8009d38:	f100 0214 	add.w	r2, r0, #20
 8009d3c:	6900      	ldr	r0, [r0, #16]
 8009d3e:	114b      	asrs	r3, r1, #5
 8009d40:	4298      	cmp	r0, r3
 8009d42:	b510      	push	{r4, lr}
 8009d44:	db11      	blt.n	8009d6a <__any_on+0x32>
 8009d46:	dd0a      	ble.n	8009d5e <__any_on+0x26>
 8009d48:	f011 011f 	ands.w	r1, r1, #31
 8009d4c:	d007      	beq.n	8009d5e <__any_on+0x26>
 8009d4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d52:	fa24 f001 	lsr.w	r0, r4, r1
 8009d56:	fa00 f101 	lsl.w	r1, r0, r1
 8009d5a:	428c      	cmp	r4, r1
 8009d5c:	d10b      	bne.n	8009d76 <__any_on+0x3e>
 8009d5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d803      	bhi.n	8009d6e <__any_on+0x36>
 8009d66:	2000      	movs	r0, #0
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	e7f7      	b.n	8009d5e <__any_on+0x26>
 8009d6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d0f5      	beq.n	8009d62 <__any_on+0x2a>
 8009d76:	2001      	movs	r0, #1
 8009d78:	e7f6      	b.n	8009d68 <__any_on+0x30>

08009d7a <_calloc_r>:
 8009d7a:	b513      	push	{r0, r1, r4, lr}
 8009d7c:	434a      	muls	r2, r1
 8009d7e:	4611      	mov	r1, r2
 8009d80:	9201      	str	r2, [sp, #4]
 8009d82:	f000 f809 	bl	8009d98 <_malloc_r>
 8009d86:	4604      	mov	r4, r0
 8009d88:	b118      	cbz	r0, 8009d92 <_calloc_r+0x18>
 8009d8a:	9a01      	ldr	r2, [sp, #4]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	f7fe f90d 	bl	8007fac <memset>
 8009d92:	4620      	mov	r0, r4
 8009d94:	b002      	add	sp, #8
 8009d96:	bd10      	pop	{r4, pc}

08009d98 <_malloc_r>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	1ccd      	adds	r5, r1, #3
 8009d9c:	f025 0503 	bic.w	r5, r5, #3
 8009da0:	3508      	adds	r5, #8
 8009da2:	2d0c      	cmp	r5, #12
 8009da4:	bf38      	it	cc
 8009da6:	250c      	movcc	r5, #12
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	4606      	mov	r6, r0
 8009dac:	db01      	blt.n	8009db2 <_malloc_r+0x1a>
 8009dae:	42a9      	cmp	r1, r5
 8009db0:	d903      	bls.n	8009dba <_malloc_r+0x22>
 8009db2:	230c      	movs	r3, #12
 8009db4:	6033      	str	r3, [r6, #0]
 8009db6:	2000      	movs	r0, #0
 8009db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dba:	f000 fbc9 	bl	800a550 <__malloc_lock>
 8009dbe:	4921      	ldr	r1, [pc, #132]	; (8009e44 <_malloc_r+0xac>)
 8009dc0:	680a      	ldr	r2, [r1, #0]
 8009dc2:	4614      	mov	r4, r2
 8009dc4:	b99c      	cbnz	r4, 8009dee <_malloc_r+0x56>
 8009dc6:	4f20      	ldr	r7, [pc, #128]	; (8009e48 <_malloc_r+0xb0>)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	b923      	cbnz	r3, 8009dd6 <_malloc_r+0x3e>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f000 fb36 	bl	800a440 <_sbrk_r>
 8009dd4:	6038      	str	r0, [r7, #0]
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f000 fb31 	bl	800a440 <_sbrk_r>
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	d123      	bne.n	8009e2a <_malloc_r+0x92>
 8009de2:	230c      	movs	r3, #12
 8009de4:	6033      	str	r3, [r6, #0]
 8009de6:	4630      	mov	r0, r6
 8009de8:	f000 fbb8 	bl	800a55c <__malloc_unlock>
 8009dec:	e7e3      	b.n	8009db6 <_malloc_r+0x1e>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	1b5b      	subs	r3, r3, r5
 8009df2:	d417      	bmi.n	8009e24 <_malloc_r+0x8c>
 8009df4:	2b0b      	cmp	r3, #11
 8009df6:	d903      	bls.n	8009e00 <_malloc_r+0x68>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	441c      	add	r4, r3
 8009dfc:	6025      	str	r5, [r4, #0]
 8009dfe:	e004      	b.n	8009e0a <_malloc_r+0x72>
 8009e00:	6863      	ldr	r3, [r4, #4]
 8009e02:	42a2      	cmp	r2, r4
 8009e04:	bf0c      	ite	eq
 8009e06:	600b      	streq	r3, [r1, #0]
 8009e08:	6053      	strne	r3, [r2, #4]
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f000 fba6 	bl	800a55c <__malloc_unlock>
 8009e10:	f104 000b 	add.w	r0, r4, #11
 8009e14:	1d23      	adds	r3, r4, #4
 8009e16:	f020 0007 	bic.w	r0, r0, #7
 8009e1a:	1ac2      	subs	r2, r0, r3
 8009e1c:	d0cc      	beq.n	8009db8 <_malloc_r+0x20>
 8009e1e:	1a1b      	subs	r3, r3, r0
 8009e20:	50a3      	str	r3, [r4, r2]
 8009e22:	e7c9      	b.n	8009db8 <_malloc_r+0x20>
 8009e24:	4622      	mov	r2, r4
 8009e26:	6864      	ldr	r4, [r4, #4]
 8009e28:	e7cc      	b.n	8009dc4 <_malloc_r+0x2c>
 8009e2a:	1cc4      	adds	r4, r0, #3
 8009e2c:	f024 0403 	bic.w	r4, r4, #3
 8009e30:	42a0      	cmp	r0, r4
 8009e32:	d0e3      	beq.n	8009dfc <_malloc_r+0x64>
 8009e34:	1a21      	subs	r1, r4, r0
 8009e36:	4630      	mov	r0, r6
 8009e38:	f000 fb02 	bl	800a440 <_sbrk_r>
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	d1dd      	bne.n	8009dfc <_malloc_r+0x64>
 8009e40:	e7cf      	b.n	8009de2 <_malloc_r+0x4a>
 8009e42:	bf00      	nop
 8009e44:	20004204 	.word	0x20004204
 8009e48:	20004208 	.word	0x20004208

08009e4c <__ssputs_r>:
 8009e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	688e      	ldr	r6, [r1, #8]
 8009e52:	429e      	cmp	r6, r3
 8009e54:	4682      	mov	sl, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	4690      	mov	r8, r2
 8009e5a:	461f      	mov	r7, r3
 8009e5c:	d838      	bhi.n	8009ed0 <__ssputs_r+0x84>
 8009e5e:	898a      	ldrh	r2, [r1, #12]
 8009e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e64:	d032      	beq.n	8009ecc <__ssputs_r+0x80>
 8009e66:	6825      	ldr	r5, [r4, #0]
 8009e68:	6909      	ldr	r1, [r1, #16]
 8009e6a:	eba5 0901 	sub.w	r9, r5, r1
 8009e6e:	6965      	ldr	r5, [r4, #20]
 8009e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e78:	3301      	adds	r3, #1
 8009e7a:	444b      	add	r3, r9
 8009e7c:	106d      	asrs	r5, r5, #1
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	bf38      	it	cc
 8009e82:	461d      	movcc	r5, r3
 8009e84:	0553      	lsls	r3, r2, #21
 8009e86:	d531      	bpl.n	8009eec <__ssputs_r+0xa0>
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7ff ff85 	bl	8009d98 <_malloc_r>
 8009e8e:	4606      	mov	r6, r0
 8009e90:	b950      	cbnz	r0, 8009ea8 <__ssputs_r+0x5c>
 8009e92:	230c      	movs	r3, #12
 8009e94:	f8ca 3000 	str.w	r3, [sl]
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e9e:	81a3      	strh	r3, [r4, #12]
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea8:	6921      	ldr	r1, [r4, #16]
 8009eaa:	464a      	mov	r2, r9
 8009eac:	f7fe f870 	bl	8007f90 <memcpy>
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eba:	81a3      	strh	r3, [r4, #12]
 8009ebc:	6126      	str	r6, [r4, #16]
 8009ebe:	6165      	str	r5, [r4, #20]
 8009ec0:	444e      	add	r6, r9
 8009ec2:	eba5 0509 	sub.w	r5, r5, r9
 8009ec6:	6026      	str	r6, [r4, #0]
 8009ec8:	60a5      	str	r5, [r4, #8]
 8009eca:	463e      	mov	r6, r7
 8009ecc:	42be      	cmp	r6, r7
 8009ece:	d900      	bls.n	8009ed2 <__ssputs_r+0x86>
 8009ed0:	463e      	mov	r6, r7
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	6820      	ldr	r0, [r4, #0]
 8009ed6:	4641      	mov	r1, r8
 8009ed8:	f000 fb20 	bl	800a51c <memmove>
 8009edc:	68a3      	ldr	r3, [r4, #8]
 8009ede:	6822      	ldr	r2, [r4, #0]
 8009ee0:	1b9b      	subs	r3, r3, r6
 8009ee2:	4432      	add	r2, r6
 8009ee4:	60a3      	str	r3, [r4, #8]
 8009ee6:	6022      	str	r2, [r4, #0]
 8009ee8:	2000      	movs	r0, #0
 8009eea:	e7db      	b.n	8009ea4 <__ssputs_r+0x58>
 8009eec:	462a      	mov	r2, r5
 8009eee:	f000 fb8b 	bl	800a608 <_realloc_r>
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d1e1      	bne.n	8009ebc <__ssputs_r+0x70>
 8009ef8:	6921      	ldr	r1, [r4, #16]
 8009efa:	4650      	mov	r0, sl
 8009efc:	f000 fb34 	bl	800a568 <_free_r>
 8009f00:	e7c7      	b.n	8009e92 <__ssputs_r+0x46>
	...

08009f04 <_svfiprintf_r>:
 8009f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f08:	4698      	mov	r8, r3
 8009f0a:	898b      	ldrh	r3, [r1, #12]
 8009f0c:	061b      	lsls	r3, r3, #24
 8009f0e:	b09d      	sub	sp, #116	; 0x74
 8009f10:	4607      	mov	r7, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	4614      	mov	r4, r2
 8009f16:	d50e      	bpl.n	8009f36 <_svfiprintf_r+0x32>
 8009f18:	690b      	ldr	r3, [r1, #16]
 8009f1a:	b963      	cbnz	r3, 8009f36 <_svfiprintf_r+0x32>
 8009f1c:	2140      	movs	r1, #64	; 0x40
 8009f1e:	f7ff ff3b 	bl	8009d98 <_malloc_r>
 8009f22:	6028      	str	r0, [r5, #0]
 8009f24:	6128      	str	r0, [r5, #16]
 8009f26:	b920      	cbnz	r0, 8009f32 <_svfiprintf_r+0x2e>
 8009f28:	230c      	movs	r3, #12
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f30:	e0d1      	b.n	800a0d6 <_svfiprintf_r+0x1d2>
 8009f32:	2340      	movs	r3, #64	; 0x40
 8009f34:	616b      	str	r3, [r5, #20]
 8009f36:	2300      	movs	r3, #0
 8009f38:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3a:	2320      	movs	r3, #32
 8009f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f44:	2330      	movs	r3, #48	; 0x30
 8009f46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0f0 <_svfiprintf_r+0x1ec>
 8009f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f4e:	f04f 0901 	mov.w	r9, #1
 8009f52:	4623      	mov	r3, r4
 8009f54:	469a      	mov	sl, r3
 8009f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f5a:	b10a      	cbz	r2, 8009f60 <_svfiprintf_r+0x5c>
 8009f5c:	2a25      	cmp	r2, #37	; 0x25
 8009f5e:	d1f9      	bne.n	8009f54 <_svfiprintf_r+0x50>
 8009f60:	ebba 0b04 	subs.w	fp, sl, r4
 8009f64:	d00b      	beq.n	8009f7e <_svfiprintf_r+0x7a>
 8009f66:	465b      	mov	r3, fp
 8009f68:	4622      	mov	r2, r4
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff ff6d 	bl	8009e4c <__ssputs_r>
 8009f72:	3001      	adds	r0, #1
 8009f74:	f000 80aa 	beq.w	800a0cc <_svfiprintf_r+0x1c8>
 8009f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f7a:	445a      	add	r2, fp
 8009f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 80a2 	beq.w	800a0cc <_svfiprintf_r+0x1c8>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f92:	f10a 0a01 	add.w	sl, sl, #1
 8009f96:	9304      	str	r3, [sp, #16]
 8009f98:	9307      	str	r3, [sp, #28]
 8009f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8009fa0:	4654      	mov	r4, sl
 8009fa2:	2205      	movs	r2, #5
 8009fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa8:	4851      	ldr	r0, [pc, #324]	; (800a0f0 <_svfiprintf_r+0x1ec>)
 8009faa:	f7f6 f929 	bl	8000200 <memchr>
 8009fae:	9a04      	ldr	r2, [sp, #16]
 8009fb0:	b9d8      	cbnz	r0, 8009fea <_svfiprintf_r+0xe6>
 8009fb2:	06d0      	lsls	r0, r2, #27
 8009fb4:	bf44      	itt	mi
 8009fb6:	2320      	movmi	r3, #32
 8009fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fbc:	0711      	lsls	r1, r2, #28
 8009fbe:	bf44      	itt	mi
 8009fc0:	232b      	movmi	r3, #43	; 0x2b
 8009fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8009fca:	2b2a      	cmp	r3, #42	; 0x2a
 8009fcc:	d015      	beq.n	8009ffa <_svfiprintf_r+0xf6>
 8009fce:	9a07      	ldr	r2, [sp, #28]
 8009fd0:	4654      	mov	r4, sl
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	f04f 0c0a 	mov.w	ip, #10
 8009fd8:	4621      	mov	r1, r4
 8009fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fde:	3b30      	subs	r3, #48	; 0x30
 8009fe0:	2b09      	cmp	r3, #9
 8009fe2:	d94e      	bls.n	800a082 <_svfiprintf_r+0x17e>
 8009fe4:	b1b0      	cbz	r0, 800a014 <_svfiprintf_r+0x110>
 8009fe6:	9207      	str	r2, [sp, #28]
 8009fe8:	e014      	b.n	800a014 <_svfiprintf_r+0x110>
 8009fea:	eba0 0308 	sub.w	r3, r0, r8
 8009fee:	fa09 f303 	lsl.w	r3, r9, r3
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	46a2      	mov	sl, r4
 8009ff8:	e7d2      	b.n	8009fa0 <_svfiprintf_r+0x9c>
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	1d19      	adds	r1, r3, #4
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	9103      	str	r1, [sp, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	bfbb      	ittet	lt
 800a006:	425b      	neglt	r3, r3
 800a008:	f042 0202 	orrlt.w	r2, r2, #2
 800a00c:	9307      	strge	r3, [sp, #28]
 800a00e:	9307      	strlt	r3, [sp, #28]
 800a010:	bfb8      	it	lt
 800a012:	9204      	strlt	r2, [sp, #16]
 800a014:	7823      	ldrb	r3, [r4, #0]
 800a016:	2b2e      	cmp	r3, #46	; 0x2e
 800a018:	d10c      	bne.n	800a034 <_svfiprintf_r+0x130>
 800a01a:	7863      	ldrb	r3, [r4, #1]
 800a01c:	2b2a      	cmp	r3, #42	; 0x2a
 800a01e:	d135      	bne.n	800a08c <_svfiprintf_r+0x188>
 800a020:	9b03      	ldr	r3, [sp, #12]
 800a022:	1d1a      	adds	r2, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	9203      	str	r2, [sp, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfb8      	it	lt
 800a02c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a030:	3402      	adds	r4, #2
 800a032:	9305      	str	r3, [sp, #20]
 800a034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a100 <_svfiprintf_r+0x1fc>
 800a038:	7821      	ldrb	r1, [r4, #0]
 800a03a:	2203      	movs	r2, #3
 800a03c:	4650      	mov	r0, sl
 800a03e:	f7f6 f8df 	bl	8000200 <memchr>
 800a042:	b140      	cbz	r0, 800a056 <_svfiprintf_r+0x152>
 800a044:	2340      	movs	r3, #64	; 0x40
 800a046:	eba0 000a 	sub.w	r0, r0, sl
 800a04a:	fa03 f000 	lsl.w	r0, r3, r0
 800a04e:	9b04      	ldr	r3, [sp, #16]
 800a050:	4303      	orrs	r3, r0
 800a052:	3401      	adds	r4, #1
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05a:	4826      	ldr	r0, [pc, #152]	; (800a0f4 <_svfiprintf_r+0x1f0>)
 800a05c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a060:	2206      	movs	r2, #6
 800a062:	f7f6 f8cd 	bl	8000200 <memchr>
 800a066:	2800      	cmp	r0, #0
 800a068:	d038      	beq.n	800a0dc <_svfiprintf_r+0x1d8>
 800a06a:	4b23      	ldr	r3, [pc, #140]	; (800a0f8 <_svfiprintf_r+0x1f4>)
 800a06c:	bb1b      	cbnz	r3, 800a0b6 <_svfiprintf_r+0x1b2>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	3307      	adds	r3, #7
 800a072:	f023 0307 	bic.w	r3, r3, #7
 800a076:	3308      	adds	r3, #8
 800a078:	9303      	str	r3, [sp, #12]
 800a07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07c:	4433      	add	r3, r6
 800a07e:	9309      	str	r3, [sp, #36]	; 0x24
 800a080:	e767      	b.n	8009f52 <_svfiprintf_r+0x4e>
 800a082:	fb0c 3202 	mla	r2, ip, r2, r3
 800a086:	460c      	mov	r4, r1
 800a088:	2001      	movs	r0, #1
 800a08a:	e7a5      	b.n	8009fd8 <_svfiprintf_r+0xd4>
 800a08c:	2300      	movs	r3, #0
 800a08e:	3401      	adds	r4, #1
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	4619      	mov	r1, r3
 800a094:	f04f 0c0a 	mov.w	ip, #10
 800a098:	4620      	mov	r0, r4
 800a09a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a09e:	3a30      	subs	r2, #48	; 0x30
 800a0a0:	2a09      	cmp	r2, #9
 800a0a2:	d903      	bls.n	800a0ac <_svfiprintf_r+0x1a8>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0c5      	beq.n	800a034 <_svfiprintf_r+0x130>
 800a0a8:	9105      	str	r1, [sp, #20]
 800a0aa:	e7c3      	b.n	800a034 <_svfiprintf_r+0x130>
 800a0ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e7f0      	b.n	800a098 <_svfiprintf_r+0x194>
 800a0b6:	ab03      	add	r3, sp, #12
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	4b0f      	ldr	r3, [pc, #60]	; (800a0fc <_svfiprintf_r+0x1f8>)
 800a0be:	a904      	add	r1, sp, #16
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f3af 8000 	nop.w
 800a0c6:	1c42      	adds	r2, r0, #1
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	d1d6      	bne.n	800a07a <_svfiprintf_r+0x176>
 800a0cc:	89ab      	ldrh	r3, [r5, #12]
 800a0ce:	065b      	lsls	r3, r3, #25
 800a0d0:	f53f af2c 	bmi.w	8009f2c <_svfiprintf_r+0x28>
 800a0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0d6:	b01d      	add	sp, #116	; 0x74
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0dc:	ab03      	add	r3, sp, #12
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	462a      	mov	r2, r5
 800a0e2:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <_svfiprintf_r+0x1f8>)
 800a0e4:	a904      	add	r1, sp, #16
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f000 f87a 	bl	800a1e0 <_printf_i>
 800a0ec:	e7eb      	b.n	800a0c6 <_svfiprintf_r+0x1c2>
 800a0ee:	bf00      	nop
 800a0f0:	0800b40c 	.word	0x0800b40c
 800a0f4:	0800b416 	.word	0x0800b416
 800a0f8:	00000000 	.word	0x00000000
 800a0fc:	08009e4d 	.word	0x08009e4d
 800a100:	0800b412 	.word	0x0800b412

0800a104 <_printf_common>:
 800a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a108:	4616      	mov	r6, r2
 800a10a:	4699      	mov	r9, r3
 800a10c:	688a      	ldr	r2, [r1, #8]
 800a10e:	690b      	ldr	r3, [r1, #16]
 800a110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a114:	4293      	cmp	r3, r2
 800a116:	bfb8      	it	lt
 800a118:	4613      	movlt	r3, r2
 800a11a:	6033      	str	r3, [r6, #0]
 800a11c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a120:	4607      	mov	r7, r0
 800a122:	460c      	mov	r4, r1
 800a124:	b10a      	cbz	r2, 800a12a <_printf_common+0x26>
 800a126:	3301      	adds	r3, #1
 800a128:	6033      	str	r3, [r6, #0]
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	0699      	lsls	r1, r3, #26
 800a12e:	bf42      	ittt	mi
 800a130:	6833      	ldrmi	r3, [r6, #0]
 800a132:	3302      	addmi	r3, #2
 800a134:	6033      	strmi	r3, [r6, #0]
 800a136:	6825      	ldr	r5, [r4, #0]
 800a138:	f015 0506 	ands.w	r5, r5, #6
 800a13c:	d106      	bne.n	800a14c <_printf_common+0x48>
 800a13e:	f104 0a19 	add.w	sl, r4, #25
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	6832      	ldr	r2, [r6, #0]
 800a146:	1a9b      	subs	r3, r3, r2
 800a148:	42ab      	cmp	r3, r5
 800a14a:	dc26      	bgt.n	800a19a <_printf_common+0x96>
 800a14c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a150:	1e13      	subs	r3, r2, #0
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	bf18      	it	ne
 800a156:	2301      	movne	r3, #1
 800a158:	0692      	lsls	r2, r2, #26
 800a15a:	d42b      	bmi.n	800a1b4 <_printf_common+0xb0>
 800a15c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a160:	4649      	mov	r1, r9
 800a162:	4638      	mov	r0, r7
 800a164:	47c0      	blx	r8
 800a166:	3001      	adds	r0, #1
 800a168:	d01e      	beq.n	800a1a8 <_printf_common+0xa4>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	68e5      	ldr	r5, [r4, #12]
 800a16e:	6832      	ldr	r2, [r6, #0]
 800a170:	f003 0306 	and.w	r3, r3, #6
 800a174:	2b04      	cmp	r3, #4
 800a176:	bf08      	it	eq
 800a178:	1aad      	subeq	r5, r5, r2
 800a17a:	68a3      	ldr	r3, [r4, #8]
 800a17c:	6922      	ldr	r2, [r4, #16]
 800a17e:	bf0c      	ite	eq
 800a180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a184:	2500      	movne	r5, #0
 800a186:	4293      	cmp	r3, r2
 800a188:	bfc4      	itt	gt
 800a18a:	1a9b      	subgt	r3, r3, r2
 800a18c:	18ed      	addgt	r5, r5, r3
 800a18e:	2600      	movs	r6, #0
 800a190:	341a      	adds	r4, #26
 800a192:	42b5      	cmp	r5, r6
 800a194:	d11a      	bne.n	800a1cc <_printf_common+0xc8>
 800a196:	2000      	movs	r0, #0
 800a198:	e008      	b.n	800a1ac <_printf_common+0xa8>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4652      	mov	r2, sl
 800a19e:	4649      	mov	r1, r9
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	47c0      	blx	r8
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d103      	bne.n	800a1b0 <_printf_common+0xac>
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b0:	3501      	adds	r5, #1
 800a1b2:	e7c6      	b.n	800a142 <_printf_common+0x3e>
 800a1b4:	18e1      	adds	r1, r4, r3
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	2030      	movs	r0, #48	; 0x30
 800a1ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1be:	4422      	add	r2, r4
 800a1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	e7c7      	b.n	800a15c <_printf_common+0x58>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	47c0      	blx	r8
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d0e6      	beq.n	800a1a8 <_printf_common+0xa4>
 800a1da:	3601      	adds	r6, #1
 800a1dc:	e7d9      	b.n	800a192 <_printf_common+0x8e>
	...

0800a1e0 <_printf_i>:
 800a1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	4691      	mov	r9, r2
 800a1e8:	7e27      	ldrb	r7, [r4, #24]
 800a1ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1ec:	2f78      	cmp	r7, #120	; 0x78
 800a1ee:	4680      	mov	r8, r0
 800a1f0:	469a      	mov	sl, r3
 800a1f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1f6:	d807      	bhi.n	800a208 <_printf_i+0x28>
 800a1f8:	2f62      	cmp	r7, #98	; 0x62
 800a1fa:	d80a      	bhi.n	800a212 <_printf_i+0x32>
 800a1fc:	2f00      	cmp	r7, #0
 800a1fe:	f000 80d8 	beq.w	800a3b2 <_printf_i+0x1d2>
 800a202:	2f58      	cmp	r7, #88	; 0x58
 800a204:	f000 80a3 	beq.w	800a34e <_printf_i+0x16e>
 800a208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a20c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a210:	e03a      	b.n	800a288 <_printf_i+0xa8>
 800a212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a216:	2b15      	cmp	r3, #21
 800a218:	d8f6      	bhi.n	800a208 <_printf_i+0x28>
 800a21a:	a001      	add	r0, pc, #4	; (adr r0, 800a220 <_printf_i+0x40>)
 800a21c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a220:	0800a279 	.word	0x0800a279
 800a224:	0800a28d 	.word	0x0800a28d
 800a228:	0800a209 	.word	0x0800a209
 800a22c:	0800a209 	.word	0x0800a209
 800a230:	0800a209 	.word	0x0800a209
 800a234:	0800a209 	.word	0x0800a209
 800a238:	0800a28d 	.word	0x0800a28d
 800a23c:	0800a209 	.word	0x0800a209
 800a240:	0800a209 	.word	0x0800a209
 800a244:	0800a209 	.word	0x0800a209
 800a248:	0800a209 	.word	0x0800a209
 800a24c:	0800a399 	.word	0x0800a399
 800a250:	0800a2bd 	.word	0x0800a2bd
 800a254:	0800a37b 	.word	0x0800a37b
 800a258:	0800a209 	.word	0x0800a209
 800a25c:	0800a209 	.word	0x0800a209
 800a260:	0800a3bb 	.word	0x0800a3bb
 800a264:	0800a209 	.word	0x0800a209
 800a268:	0800a2bd 	.word	0x0800a2bd
 800a26c:	0800a209 	.word	0x0800a209
 800a270:	0800a209 	.word	0x0800a209
 800a274:	0800a383 	.word	0x0800a383
 800a278:	680b      	ldr	r3, [r1, #0]
 800a27a:	1d1a      	adds	r2, r3, #4
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	600a      	str	r2, [r1, #0]
 800a280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a288:	2301      	movs	r3, #1
 800a28a:	e0a3      	b.n	800a3d4 <_printf_i+0x1f4>
 800a28c:	6825      	ldr	r5, [r4, #0]
 800a28e:	6808      	ldr	r0, [r1, #0]
 800a290:	062e      	lsls	r6, r5, #24
 800a292:	f100 0304 	add.w	r3, r0, #4
 800a296:	d50a      	bpl.n	800a2ae <_printf_i+0xce>
 800a298:	6805      	ldr	r5, [r0, #0]
 800a29a:	600b      	str	r3, [r1, #0]
 800a29c:	2d00      	cmp	r5, #0
 800a29e:	da03      	bge.n	800a2a8 <_printf_i+0xc8>
 800a2a0:	232d      	movs	r3, #45	; 0x2d
 800a2a2:	426d      	negs	r5, r5
 800a2a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2a8:	485e      	ldr	r0, [pc, #376]	; (800a424 <_printf_i+0x244>)
 800a2aa:	230a      	movs	r3, #10
 800a2ac:	e019      	b.n	800a2e2 <_printf_i+0x102>
 800a2ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a2b2:	6805      	ldr	r5, [r0, #0]
 800a2b4:	600b      	str	r3, [r1, #0]
 800a2b6:	bf18      	it	ne
 800a2b8:	b22d      	sxthne	r5, r5
 800a2ba:	e7ef      	b.n	800a29c <_printf_i+0xbc>
 800a2bc:	680b      	ldr	r3, [r1, #0]
 800a2be:	6825      	ldr	r5, [r4, #0]
 800a2c0:	1d18      	adds	r0, r3, #4
 800a2c2:	6008      	str	r0, [r1, #0]
 800a2c4:	0628      	lsls	r0, r5, #24
 800a2c6:	d501      	bpl.n	800a2cc <_printf_i+0xec>
 800a2c8:	681d      	ldr	r5, [r3, #0]
 800a2ca:	e002      	b.n	800a2d2 <_printf_i+0xf2>
 800a2cc:	0669      	lsls	r1, r5, #25
 800a2ce:	d5fb      	bpl.n	800a2c8 <_printf_i+0xe8>
 800a2d0:	881d      	ldrh	r5, [r3, #0]
 800a2d2:	4854      	ldr	r0, [pc, #336]	; (800a424 <_printf_i+0x244>)
 800a2d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a2d6:	bf0c      	ite	eq
 800a2d8:	2308      	moveq	r3, #8
 800a2da:	230a      	movne	r3, #10
 800a2dc:	2100      	movs	r1, #0
 800a2de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2e2:	6866      	ldr	r6, [r4, #4]
 800a2e4:	60a6      	str	r6, [r4, #8]
 800a2e6:	2e00      	cmp	r6, #0
 800a2e8:	bfa2      	ittt	ge
 800a2ea:	6821      	ldrge	r1, [r4, #0]
 800a2ec:	f021 0104 	bicge.w	r1, r1, #4
 800a2f0:	6021      	strge	r1, [r4, #0]
 800a2f2:	b90d      	cbnz	r5, 800a2f8 <_printf_i+0x118>
 800a2f4:	2e00      	cmp	r6, #0
 800a2f6:	d04d      	beq.n	800a394 <_printf_i+0x1b4>
 800a2f8:	4616      	mov	r6, r2
 800a2fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2fe:	fb03 5711 	mls	r7, r3, r1, r5
 800a302:	5dc7      	ldrb	r7, [r0, r7]
 800a304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a308:	462f      	mov	r7, r5
 800a30a:	42bb      	cmp	r3, r7
 800a30c:	460d      	mov	r5, r1
 800a30e:	d9f4      	bls.n	800a2fa <_printf_i+0x11a>
 800a310:	2b08      	cmp	r3, #8
 800a312:	d10b      	bne.n	800a32c <_printf_i+0x14c>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	07df      	lsls	r7, r3, #31
 800a318:	d508      	bpl.n	800a32c <_printf_i+0x14c>
 800a31a:	6923      	ldr	r3, [r4, #16]
 800a31c:	6861      	ldr	r1, [r4, #4]
 800a31e:	4299      	cmp	r1, r3
 800a320:	bfde      	ittt	le
 800a322:	2330      	movle	r3, #48	; 0x30
 800a324:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a328:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a32c:	1b92      	subs	r2, r2, r6
 800a32e:	6122      	str	r2, [r4, #16]
 800a330:	f8cd a000 	str.w	sl, [sp]
 800a334:	464b      	mov	r3, r9
 800a336:	aa03      	add	r2, sp, #12
 800a338:	4621      	mov	r1, r4
 800a33a:	4640      	mov	r0, r8
 800a33c:	f7ff fee2 	bl	800a104 <_printf_common>
 800a340:	3001      	adds	r0, #1
 800a342:	d14c      	bne.n	800a3de <_printf_i+0x1fe>
 800a344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a348:	b004      	add	sp, #16
 800a34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34e:	4835      	ldr	r0, [pc, #212]	; (800a424 <_printf_i+0x244>)
 800a350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	680e      	ldr	r6, [r1, #0]
 800a358:	061f      	lsls	r7, r3, #24
 800a35a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a35e:	600e      	str	r6, [r1, #0]
 800a360:	d514      	bpl.n	800a38c <_printf_i+0x1ac>
 800a362:	07d9      	lsls	r1, r3, #31
 800a364:	bf44      	itt	mi
 800a366:	f043 0320 	orrmi.w	r3, r3, #32
 800a36a:	6023      	strmi	r3, [r4, #0]
 800a36c:	b91d      	cbnz	r5, 800a376 <_printf_i+0x196>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	f023 0320 	bic.w	r3, r3, #32
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	2310      	movs	r3, #16
 800a378:	e7b0      	b.n	800a2dc <_printf_i+0xfc>
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	f043 0320 	orr.w	r3, r3, #32
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	2378      	movs	r3, #120	; 0x78
 800a384:	4828      	ldr	r0, [pc, #160]	; (800a428 <_printf_i+0x248>)
 800a386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a38a:	e7e3      	b.n	800a354 <_printf_i+0x174>
 800a38c:	065e      	lsls	r6, r3, #25
 800a38e:	bf48      	it	mi
 800a390:	b2ad      	uxthmi	r5, r5
 800a392:	e7e6      	b.n	800a362 <_printf_i+0x182>
 800a394:	4616      	mov	r6, r2
 800a396:	e7bb      	b.n	800a310 <_printf_i+0x130>
 800a398:	680b      	ldr	r3, [r1, #0]
 800a39a:	6826      	ldr	r6, [r4, #0]
 800a39c:	6960      	ldr	r0, [r4, #20]
 800a39e:	1d1d      	adds	r5, r3, #4
 800a3a0:	600d      	str	r5, [r1, #0]
 800a3a2:	0635      	lsls	r5, r6, #24
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	d501      	bpl.n	800a3ac <_printf_i+0x1cc>
 800a3a8:	6018      	str	r0, [r3, #0]
 800a3aa:	e002      	b.n	800a3b2 <_printf_i+0x1d2>
 800a3ac:	0671      	lsls	r1, r6, #25
 800a3ae:	d5fb      	bpl.n	800a3a8 <_printf_i+0x1c8>
 800a3b0:	8018      	strh	r0, [r3, #0]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6123      	str	r3, [r4, #16]
 800a3b6:	4616      	mov	r6, r2
 800a3b8:	e7ba      	b.n	800a330 <_printf_i+0x150>
 800a3ba:	680b      	ldr	r3, [r1, #0]
 800a3bc:	1d1a      	adds	r2, r3, #4
 800a3be:	600a      	str	r2, [r1, #0]
 800a3c0:	681e      	ldr	r6, [r3, #0]
 800a3c2:	6862      	ldr	r2, [r4, #4]
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f7f5 ff1a 	bl	8000200 <memchr>
 800a3cc:	b108      	cbz	r0, 800a3d2 <_printf_i+0x1f2>
 800a3ce:	1b80      	subs	r0, r0, r6
 800a3d0:	6060      	str	r0, [r4, #4]
 800a3d2:	6863      	ldr	r3, [r4, #4]
 800a3d4:	6123      	str	r3, [r4, #16]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3dc:	e7a8      	b.n	800a330 <_printf_i+0x150>
 800a3de:	6923      	ldr	r3, [r4, #16]
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	47d0      	blx	sl
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d0ab      	beq.n	800a344 <_printf_i+0x164>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	079b      	lsls	r3, r3, #30
 800a3f0:	d413      	bmi.n	800a41a <_printf_i+0x23a>
 800a3f2:	68e0      	ldr	r0, [r4, #12]
 800a3f4:	9b03      	ldr	r3, [sp, #12]
 800a3f6:	4298      	cmp	r0, r3
 800a3f8:	bfb8      	it	lt
 800a3fa:	4618      	movlt	r0, r3
 800a3fc:	e7a4      	b.n	800a348 <_printf_i+0x168>
 800a3fe:	2301      	movs	r3, #1
 800a400:	4632      	mov	r2, r6
 800a402:	4649      	mov	r1, r9
 800a404:	4640      	mov	r0, r8
 800a406:	47d0      	blx	sl
 800a408:	3001      	adds	r0, #1
 800a40a:	d09b      	beq.n	800a344 <_printf_i+0x164>
 800a40c:	3501      	adds	r5, #1
 800a40e:	68e3      	ldr	r3, [r4, #12]
 800a410:	9903      	ldr	r1, [sp, #12]
 800a412:	1a5b      	subs	r3, r3, r1
 800a414:	42ab      	cmp	r3, r5
 800a416:	dcf2      	bgt.n	800a3fe <_printf_i+0x21e>
 800a418:	e7eb      	b.n	800a3f2 <_printf_i+0x212>
 800a41a:	2500      	movs	r5, #0
 800a41c:	f104 0619 	add.w	r6, r4, #25
 800a420:	e7f5      	b.n	800a40e <_printf_i+0x22e>
 800a422:	bf00      	nop
 800a424:	0800b41d 	.word	0x0800b41d
 800a428:	0800b42e 	.word	0x0800b42e
 800a42c:	00000000 	.word	0x00000000

0800a430 <nan>:
 800a430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a438 <nan+0x8>
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	00000000 	.word	0x00000000
 800a43c:	7ff80000 	.word	0x7ff80000

0800a440 <_sbrk_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d06      	ldr	r5, [pc, #24]	; (800a45c <_sbrk_r+0x1c>)
 800a444:	2300      	movs	r3, #0
 800a446:	4604      	mov	r4, r0
 800a448:	4608      	mov	r0, r1
 800a44a:	602b      	str	r3, [r5, #0]
 800a44c:	f7f7 fe18 	bl	8002080 <_sbrk>
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	d102      	bne.n	800a45a <_sbrk_r+0x1a>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	b103      	cbz	r3, 800a45a <_sbrk_r+0x1a>
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	2000437c 	.word	0x2000437c

0800a460 <nanf>:
 800a460:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a468 <nanf+0x8>
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	7fc00000 	.word	0x7fc00000

0800a46c <strncmp>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	b16a      	cbz	r2, 800a48c <strncmp+0x20>
 800a470:	3901      	subs	r1, #1
 800a472:	1884      	adds	r4, r0, r2
 800a474:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a478:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d103      	bne.n	800a488 <strncmp+0x1c>
 800a480:	42a0      	cmp	r0, r4
 800a482:	d001      	beq.n	800a488 <strncmp+0x1c>
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1f5      	bne.n	800a474 <strncmp+0x8>
 800a488:	1a98      	subs	r0, r3, r2
 800a48a:	bd10      	pop	{r4, pc}
 800a48c:	4610      	mov	r0, r2
 800a48e:	e7fc      	b.n	800a48a <strncmp+0x1e>

0800a490 <__ascii_wctomb>:
 800a490:	b149      	cbz	r1, 800a4a6 <__ascii_wctomb+0x16>
 800a492:	2aff      	cmp	r2, #255	; 0xff
 800a494:	bf85      	ittet	hi
 800a496:	238a      	movhi	r3, #138	; 0x8a
 800a498:	6003      	strhi	r3, [r0, #0]
 800a49a:	700a      	strbls	r2, [r1, #0]
 800a49c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a4a0:	bf98      	it	ls
 800a4a2:	2001      	movls	r0, #1
 800a4a4:	4770      	bx	lr
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	4770      	bx	lr
	...

0800a4ac <__assert_func>:
 800a4ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4ae:	4614      	mov	r4, r2
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <__assert_func+0x2c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	68d8      	ldr	r0, [r3, #12]
 800a4ba:	b14c      	cbz	r4, 800a4d0 <__assert_func+0x24>
 800a4bc:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <__assert_func+0x30>)
 800a4be:	9100      	str	r1, [sp, #0]
 800a4c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4c4:	4906      	ldr	r1, [pc, #24]	; (800a4e0 <__assert_func+0x34>)
 800a4c6:	462b      	mov	r3, r5
 800a4c8:	f000 f80e 	bl	800a4e8 <fiprintf>
 800a4cc:	f000 fadc 	bl	800aa88 <abort>
 800a4d0:	4b04      	ldr	r3, [pc, #16]	; (800a4e4 <__assert_func+0x38>)
 800a4d2:	461c      	mov	r4, r3
 800a4d4:	e7f3      	b.n	800a4be <__assert_func+0x12>
 800a4d6:	bf00      	nop
 800a4d8:	20000030 	.word	0x20000030
 800a4dc:	0800b43f 	.word	0x0800b43f
 800a4e0:	0800b44c 	.word	0x0800b44c
 800a4e4:	0800b47a 	.word	0x0800b47a

0800a4e8 <fiprintf>:
 800a4e8:	b40e      	push	{r1, r2, r3}
 800a4ea:	b503      	push	{r0, r1, lr}
 800a4ec:	4601      	mov	r1, r0
 800a4ee:	ab03      	add	r3, sp, #12
 800a4f0:	4805      	ldr	r0, [pc, #20]	; (800a508 <fiprintf+0x20>)
 800a4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f6:	6800      	ldr	r0, [r0, #0]
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	f000 f8d5 	bl	800a6a8 <_vfiprintf_r>
 800a4fe:	b002      	add	sp, #8
 800a500:	f85d eb04 	ldr.w	lr, [sp], #4
 800a504:	b003      	add	sp, #12
 800a506:	4770      	bx	lr
 800a508:	20000030 	.word	0x20000030

0800a50c <malloc>:
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <malloc+0xc>)
 800a50e:	4601      	mov	r1, r0
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	f7ff bc41 	b.w	8009d98 <_malloc_r>
 800a516:	bf00      	nop
 800a518:	20000030 	.word	0x20000030

0800a51c <memmove>:
 800a51c:	4288      	cmp	r0, r1
 800a51e:	b510      	push	{r4, lr}
 800a520:	eb01 0402 	add.w	r4, r1, r2
 800a524:	d902      	bls.n	800a52c <memmove+0x10>
 800a526:	4284      	cmp	r4, r0
 800a528:	4623      	mov	r3, r4
 800a52a:	d807      	bhi.n	800a53c <memmove+0x20>
 800a52c:	1e43      	subs	r3, r0, #1
 800a52e:	42a1      	cmp	r1, r4
 800a530:	d008      	beq.n	800a544 <memmove+0x28>
 800a532:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a53a:	e7f8      	b.n	800a52e <memmove+0x12>
 800a53c:	4402      	add	r2, r0
 800a53e:	4601      	mov	r1, r0
 800a540:	428a      	cmp	r2, r1
 800a542:	d100      	bne.n	800a546 <memmove+0x2a>
 800a544:	bd10      	pop	{r4, pc}
 800a546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a54a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a54e:	e7f7      	b.n	800a540 <memmove+0x24>

0800a550 <__malloc_lock>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__malloc_lock+0x8>)
 800a552:	f000 bc59 	b.w	800ae08 <__retarget_lock_acquire_recursive>
 800a556:	bf00      	nop
 800a558:	20004384 	.word	0x20004384

0800a55c <__malloc_unlock>:
 800a55c:	4801      	ldr	r0, [pc, #4]	; (800a564 <__malloc_unlock+0x8>)
 800a55e:	f000 bc54 	b.w	800ae0a <__retarget_lock_release_recursive>
 800a562:	bf00      	nop
 800a564:	20004384 	.word	0x20004384

0800a568 <_free_r>:
 800a568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a56a:	2900      	cmp	r1, #0
 800a56c:	d048      	beq.n	800a600 <_free_r+0x98>
 800a56e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a572:	9001      	str	r0, [sp, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f1a1 0404 	sub.w	r4, r1, #4
 800a57a:	bfb8      	it	lt
 800a57c:	18e4      	addlt	r4, r4, r3
 800a57e:	f7ff ffe7 	bl	800a550 <__malloc_lock>
 800a582:	4a20      	ldr	r2, [pc, #128]	; (800a604 <_free_r+0x9c>)
 800a584:	9801      	ldr	r0, [sp, #4]
 800a586:	6813      	ldr	r3, [r2, #0]
 800a588:	4615      	mov	r5, r2
 800a58a:	b933      	cbnz	r3, 800a59a <_free_r+0x32>
 800a58c:	6063      	str	r3, [r4, #4]
 800a58e:	6014      	str	r4, [r2, #0]
 800a590:	b003      	add	sp, #12
 800a592:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a596:	f7ff bfe1 	b.w	800a55c <__malloc_unlock>
 800a59a:	42a3      	cmp	r3, r4
 800a59c:	d90b      	bls.n	800a5b6 <_free_r+0x4e>
 800a59e:	6821      	ldr	r1, [r4, #0]
 800a5a0:	1862      	adds	r2, r4, r1
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	bf04      	itt	eq
 800a5a6:	681a      	ldreq	r2, [r3, #0]
 800a5a8:	685b      	ldreq	r3, [r3, #4]
 800a5aa:	6063      	str	r3, [r4, #4]
 800a5ac:	bf04      	itt	eq
 800a5ae:	1852      	addeq	r2, r2, r1
 800a5b0:	6022      	streq	r2, [r4, #0]
 800a5b2:	602c      	str	r4, [r5, #0]
 800a5b4:	e7ec      	b.n	800a590 <_free_r+0x28>
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	b10b      	cbz	r3, 800a5c0 <_free_r+0x58>
 800a5bc:	42a3      	cmp	r3, r4
 800a5be:	d9fa      	bls.n	800a5b6 <_free_r+0x4e>
 800a5c0:	6811      	ldr	r1, [r2, #0]
 800a5c2:	1855      	adds	r5, r2, r1
 800a5c4:	42a5      	cmp	r5, r4
 800a5c6:	d10b      	bne.n	800a5e0 <_free_r+0x78>
 800a5c8:	6824      	ldr	r4, [r4, #0]
 800a5ca:	4421      	add	r1, r4
 800a5cc:	1854      	adds	r4, r2, r1
 800a5ce:	42a3      	cmp	r3, r4
 800a5d0:	6011      	str	r1, [r2, #0]
 800a5d2:	d1dd      	bne.n	800a590 <_free_r+0x28>
 800a5d4:	681c      	ldr	r4, [r3, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	6053      	str	r3, [r2, #4]
 800a5da:	4421      	add	r1, r4
 800a5dc:	6011      	str	r1, [r2, #0]
 800a5de:	e7d7      	b.n	800a590 <_free_r+0x28>
 800a5e0:	d902      	bls.n	800a5e8 <_free_r+0x80>
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	6003      	str	r3, [r0, #0]
 800a5e6:	e7d3      	b.n	800a590 <_free_r+0x28>
 800a5e8:	6825      	ldr	r5, [r4, #0]
 800a5ea:	1961      	adds	r1, r4, r5
 800a5ec:	428b      	cmp	r3, r1
 800a5ee:	bf04      	itt	eq
 800a5f0:	6819      	ldreq	r1, [r3, #0]
 800a5f2:	685b      	ldreq	r3, [r3, #4]
 800a5f4:	6063      	str	r3, [r4, #4]
 800a5f6:	bf04      	itt	eq
 800a5f8:	1949      	addeq	r1, r1, r5
 800a5fa:	6021      	streq	r1, [r4, #0]
 800a5fc:	6054      	str	r4, [r2, #4]
 800a5fe:	e7c7      	b.n	800a590 <_free_r+0x28>
 800a600:	b003      	add	sp, #12
 800a602:	bd30      	pop	{r4, r5, pc}
 800a604:	20004204 	.word	0x20004204

0800a608 <_realloc_r>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	4607      	mov	r7, r0
 800a60c:	4614      	mov	r4, r2
 800a60e:	460e      	mov	r6, r1
 800a610:	b921      	cbnz	r1, 800a61c <_realloc_r+0x14>
 800a612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a616:	4611      	mov	r1, r2
 800a618:	f7ff bbbe 	b.w	8009d98 <_malloc_r>
 800a61c:	b922      	cbnz	r2, 800a628 <_realloc_r+0x20>
 800a61e:	f7ff ffa3 	bl	800a568 <_free_r>
 800a622:	4625      	mov	r5, r4
 800a624:	4628      	mov	r0, r5
 800a626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a628:	f000 fc54 	bl	800aed4 <_malloc_usable_size_r>
 800a62c:	42a0      	cmp	r0, r4
 800a62e:	d20f      	bcs.n	800a650 <_realloc_r+0x48>
 800a630:	4621      	mov	r1, r4
 800a632:	4638      	mov	r0, r7
 800a634:	f7ff fbb0 	bl	8009d98 <_malloc_r>
 800a638:	4605      	mov	r5, r0
 800a63a:	2800      	cmp	r0, #0
 800a63c:	d0f2      	beq.n	800a624 <_realloc_r+0x1c>
 800a63e:	4631      	mov	r1, r6
 800a640:	4622      	mov	r2, r4
 800a642:	f7fd fca5 	bl	8007f90 <memcpy>
 800a646:	4631      	mov	r1, r6
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff ff8d 	bl	800a568 <_free_r>
 800a64e:	e7e9      	b.n	800a624 <_realloc_r+0x1c>
 800a650:	4635      	mov	r5, r6
 800a652:	e7e7      	b.n	800a624 <_realloc_r+0x1c>

0800a654 <__sfputc_r>:
 800a654:	6893      	ldr	r3, [r2, #8]
 800a656:	3b01      	subs	r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	b410      	push	{r4}
 800a65c:	6093      	str	r3, [r2, #8]
 800a65e:	da08      	bge.n	800a672 <__sfputc_r+0x1e>
 800a660:	6994      	ldr	r4, [r2, #24]
 800a662:	42a3      	cmp	r3, r4
 800a664:	db01      	blt.n	800a66a <__sfputc_r+0x16>
 800a666:	290a      	cmp	r1, #10
 800a668:	d103      	bne.n	800a672 <__sfputc_r+0x1e>
 800a66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66e:	f000 b94b 	b.w	800a908 <__swbuf_r>
 800a672:	6813      	ldr	r3, [r2, #0]
 800a674:	1c58      	adds	r0, r3, #1
 800a676:	6010      	str	r0, [r2, #0]
 800a678:	7019      	strb	r1, [r3, #0]
 800a67a:	4608      	mov	r0, r1
 800a67c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <__sfputs_r>:
 800a682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a684:	4606      	mov	r6, r0
 800a686:	460f      	mov	r7, r1
 800a688:	4614      	mov	r4, r2
 800a68a:	18d5      	adds	r5, r2, r3
 800a68c:	42ac      	cmp	r4, r5
 800a68e:	d101      	bne.n	800a694 <__sfputs_r+0x12>
 800a690:	2000      	movs	r0, #0
 800a692:	e007      	b.n	800a6a4 <__sfputs_r+0x22>
 800a694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a698:	463a      	mov	r2, r7
 800a69a:	4630      	mov	r0, r6
 800a69c:	f7ff ffda 	bl	800a654 <__sfputc_r>
 800a6a0:	1c43      	adds	r3, r0, #1
 800a6a2:	d1f3      	bne.n	800a68c <__sfputs_r+0xa>
 800a6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6a8 <_vfiprintf_r>:
 800a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ac:	460d      	mov	r5, r1
 800a6ae:	b09d      	sub	sp, #116	; 0x74
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	4698      	mov	r8, r3
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	b118      	cbz	r0, 800a6c0 <_vfiprintf_r+0x18>
 800a6b8:	6983      	ldr	r3, [r0, #24]
 800a6ba:	b90b      	cbnz	r3, 800a6c0 <_vfiprintf_r+0x18>
 800a6bc:	f000 fb06 	bl	800accc <__sinit>
 800a6c0:	4b89      	ldr	r3, [pc, #548]	; (800a8e8 <_vfiprintf_r+0x240>)
 800a6c2:	429d      	cmp	r5, r3
 800a6c4:	d11b      	bne.n	800a6fe <_vfiprintf_r+0x56>
 800a6c6:	6875      	ldr	r5, [r6, #4]
 800a6c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ca:	07d9      	lsls	r1, r3, #31
 800a6cc:	d405      	bmi.n	800a6da <_vfiprintf_r+0x32>
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	059a      	lsls	r2, r3, #22
 800a6d2:	d402      	bmi.n	800a6da <_vfiprintf_r+0x32>
 800a6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6d6:	f000 fb97 	bl	800ae08 <__retarget_lock_acquire_recursive>
 800a6da:	89ab      	ldrh	r3, [r5, #12]
 800a6dc:	071b      	lsls	r3, r3, #28
 800a6de:	d501      	bpl.n	800a6e4 <_vfiprintf_r+0x3c>
 800a6e0:	692b      	ldr	r3, [r5, #16]
 800a6e2:	b9eb      	cbnz	r3, 800a720 <_vfiprintf_r+0x78>
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f000 f960 	bl	800a9ac <__swsetup_r>
 800a6ec:	b1c0      	cbz	r0, 800a720 <_vfiprintf_r+0x78>
 800a6ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f0:	07dc      	lsls	r4, r3, #31
 800a6f2:	d50e      	bpl.n	800a712 <_vfiprintf_r+0x6a>
 800a6f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6f8:	b01d      	add	sp, #116	; 0x74
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	4b7b      	ldr	r3, [pc, #492]	; (800a8ec <_vfiprintf_r+0x244>)
 800a700:	429d      	cmp	r5, r3
 800a702:	d101      	bne.n	800a708 <_vfiprintf_r+0x60>
 800a704:	68b5      	ldr	r5, [r6, #8]
 800a706:	e7df      	b.n	800a6c8 <_vfiprintf_r+0x20>
 800a708:	4b79      	ldr	r3, [pc, #484]	; (800a8f0 <_vfiprintf_r+0x248>)
 800a70a:	429d      	cmp	r5, r3
 800a70c:	bf08      	it	eq
 800a70e:	68f5      	ldreq	r5, [r6, #12]
 800a710:	e7da      	b.n	800a6c8 <_vfiprintf_r+0x20>
 800a712:	89ab      	ldrh	r3, [r5, #12]
 800a714:	0598      	lsls	r0, r3, #22
 800a716:	d4ed      	bmi.n	800a6f4 <_vfiprintf_r+0x4c>
 800a718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a71a:	f000 fb76 	bl	800ae0a <__retarget_lock_release_recursive>
 800a71e:	e7e9      	b.n	800a6f4 <_vfiprintf_r+0x4c>
 800a720:	2300      	movs	r3, #0
 800a722:	9309      	str	r3, [sp, #36]	; 0x24
 800a724:	2320      	movs	r3, #32
 800a726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a72a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a72e:	2330      	movs	r3, #48	; 0x30
 800a730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8f4 <_vfiprintf_r+0x24c>
 800a734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a738:	f04f 0901 	mov.w	r9, #1
 800a73c:	4623      	mov	r3, r4
 800a73e:	469a      	mov	sl, r3
 800a740:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a744:	b10a      	cbz	r2, 800a74a <_vfiprintf_r+0xa2>
 800a746:	2a25      	cmp	r2, #37	; 0x25
 800a748:	d1f9      	bne.n	800a73e <_vfiprintf_r+0x96>
 800a74a:	ebba 0b04 	subs.w	fp, sl, r4
 800a74e:	d00b      	beq.n	800a768 <_vfiprintf_r+0xc0>
 800a750:	465b      	mov	r3, fp
 800a752:	4622      	mov	r2, r4
 800a754:	4629      	mov	r1, r5
 800a756:	4630      	mov	r0, r6
 800a758:	f7ff ff93 	bl	800a682 <__sfputs_r>
 800a75c:	3001      	adds	r0, #1
 800a75e:	f000 80aa 	beq.w	800a8b6 <_vfiprintf_r+0x20e>
 800a762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a764:	445a      	add	r2, fp
 800a766:	9209      	str	r2, [sp, #36]	; 0x24
 800a768:	f89a 3000 	ldrb.w	r3, [sl]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 80a2 	beq.w	800a8b6 <_vfiprintf_r+0x20e>
 800a772:	2300      	movs	r3, #0
 800a774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a77c:	f10a 0a01 	add.w	sl, sl, #1
 800a780:	9304      	str	r3, [sp, #16]
 800a782:	9307      	str	r3, [sp, #28]
 800a784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a788:	931a      	str	r3, [sp, #104]	; 0x68
 800a78a:	4654      	mov	r4, sl
 800a78c:	2205      	movs	r2, #5
 800a78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a792:	4858      	ldr	r0, [pc, #352]	; (800a8f4 <_vfiprintf_r+0x24c>)
 800a794:	f7f5 fd34 	bl	8000200 <memchr>
 800a798:	9a04      	ldr	r2, [sp, #16]
 800a79a:	b9d8      	cbnz	r0, 800a7d4 <_vfiprintf_r+0x12c>
 800a79c:	06d1      	lsls	r1, r2, #27
 800a79e:	bf44      	itt	mi
 800a7a0:	2320      	movmi	r3, #32
 800a7a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a6:	0713      	lsls	r3, r2, #28
 800a7a8:	bf44      	itt	mi
 800a7aa:	232b      	movmi	r3, #43	; 0x2b
 800a7ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b6:	d015      	beq.n	800a7e4 <_vfiprintf_r+0x13c>
 800a7b8:	9a07      	ldr	r2, [sp, #28]
 800a7ba:	4654      	mov	r4, sl
 800a7bc:	2000      	movs	r0, #0
 800a7be:	f04f 0c0a 	mov.w	ip, #10
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7c8:	3b30      	subs	r3, #48	; 0x30
 800a7ca:	2b09      	cmp	r3, #9
 800a7cc:	d94e      	bls.n	800a86c <_vfiprintf_r+0x1c4>
 800a7ce:	b1b0      	cbz	r0, 800a7fe <_vfiprintf_r+0x156>
 800a7d0:	9207      	str	r2, [sp, #28]
 800a7d2:	e014      	b.n	800a7fe <_vfiprintf_r+0x156>
 800a7d4:	eba0 0308 	sub.w	r3, r0, r8
 800a7d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	9304      	str	r3, [sp, #16]
 800a7e0:	46a2      	mov	sl, r4
 800a7e2:	e7d2      	b.n	800a78a <_vfiprintf_r+0xe2>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	1d19      	adds	r1, r3, #4
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	9103      	str	r1, [sp, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	bfbb      	ittet	lt
 800a7f0:	425b      	neglt	r3, r3
 800a7f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7f6:	9307      	strge	r3, [sp, #28]
 800a7f8:	9307      	strlt	r3, [sp, #28]
 800a7fa:	bfb8      	it	lt
 800a7fc:	9204      	strlt	r2, [sp, #16]
 800a7fe:	7823      	ldrb	r3, [r4, #0]
 800a800:	2b2e      	cmp	r3, #46	; 0x2e
 800a802:	d10c      	bne.n	800a81e <_vfiprintf_r+0x176>
 800a804:	7863      	ldrb	r3, [r4, #1]
 800a806:	2b2a      	cmp	r3, #42	; 0x2a
 800a808:	d135      	bne.n	800a876 <_vfiprintf_r+0x1ce>
 800a80a:	9b03      	ldr	r3, [sp, #12]
 800a80c:	1d1a      	adds	r2, r3, #4
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	9203      	str	r2, [sp, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	bfb8      	it	lt
 800a816:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a81a:	3402      	adds	r4, #2
 800a81c:	9305      	str	r3, [sp, #20]
 800a81e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a904 <_vfiprintf_r+0x25c>
 800a822:	7821      	ldrb	r1, [r4, #0]
 800a824:	2203      	movs	r2, #3
 800a826:	4650      	mov	r0, sl
 800a828:	f7f5 fcea 	bl	8000200 <memchr>
 800a82c:	b140      	cbz	r0, 800a840 <_vfiprintf_r+0x198>
 800a82e:	2340      	movs	r3, #64	; 0x40
 800a830:	eba0 000a 	sub.w	r0, r0, sl
 800a834:	fa03 f000 	lsl.w	r0, r3, r0
 800a838:	9b04      	ldr	r3, [sp, #16]
 800a83a:	4303      	orrs	r3, r0
 800a83c:	3401      	adds	r4, #1
 800a83e:	9304      	str	r3, [sp, #16]
 800a840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a844:	482c      	ldr	r0, [pc, #176]	; (800a8f8 <_vfiprintf_r+0x250>)
 800a846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a84a:	2206      	movs	r2, #6
 800a84c:	f7f5 fcd8 	bl	8000200 <memchr>
 800a850:	2800      	cmp	r0, #0
 800a852:	d03f      	beq.n	800a8d4 <_vfiprintf_r+0x22c>
 800a854:	4b29      	ldr	r3, [pc, #164]	; (800a8fc <_vfiprintf_r+0x254>)
 800a856:	bb1b      	cbnz	r3, 800a8a0 <_vfiprintf_r+0x1f8>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	3307      	adds	r3, #7
 800a85c:	f023 0307 	bic.w	r3, r3, #7
 800a860:	3308      	adds	r3, #8
 800a862:	9303      	str	r3, [sp, #12]
 800a864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a866:	443b      	add	r3, r7
 800a868:	9309      	str	r3, [sp, #36]	; 0x24
 800a86a:	e767      	b.n	800a73c <_vfiprintf_r+0x94>
 800a86c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a870:	460c      	mov	r4, r1
 800a872:	2001      	movs	r0, #1
 800a874:	e7a5      	b.n	800a7c2 <_vfiprintf_r+0x11a>
 800a876:	2300      	movs	r3, #0
 800a878:	3401      	adds	r4, #1
 800a87a:	9305      	str	r3, [sp, #20]
 800a87c:	4619      	mov	r1, r3
 800a87e:	f04f 0c0a 	mov.w	ip, #10
 800a882:	4620      	mov	r0, r4
 800a884:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a888:	3a30      	subs	r2, #48	; 0x30
 800a88a:	2a09      	cmp	r2, #9
 800a88c:	d903      	bls.n	800a896 <_vfiprintf_r+0x1ee>
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0c5      	beq.n	800a81e <_vfiprintf_r+0x176>
 800a892:	9105      	str	r1, [sp, #20]
 800a894:	e7c3      	b.n	800a81e <_vfiprintf_r+0x176>
 800a896:	fb0c 2101 	mla	r1, ip, r1, r2
 800a89a:	4604      	mov	r4, r0
 800a89c:	2301      	movs	r3, #1
 800a89e:	e7f0      	b.n	800a882 <_vfiprintf_r+0x1da>
 800a8a0:	ab03      	add	r3, sp, #12
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	462a      	mov	r2, r5
 800a8a6:	4b16      	ldr	r3, [pc, #88]	; (800a900 <_vfiprintf_r+0x258>)
 800a8a8:	a904      	add	r1, sp, #16
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f3af 8000 	nop.w
 800a8b0:	4607      	mov	r7, r0
 800a8b2:	1c78      	adds	r0, r7, #1
 800a8b4:	d1d6      	bne.n	800a864 <_vfiprintf_r+0x1bc>
 800a8b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8b8:	07d9      	lsls	r1, r3, #31
 800a8ba:	d405      	bmi.n	800a8c8 <_vfiprintf_r+0x220>
 800a8bc:	89ab      	ldrh	r3, [r5, #12]
 800a8be:	059a      	lsls	r2, r3, #22
 800a8c0:	d402      	bmi.n	800a8c8 <_vfiprintf_r+0x220>
 800a8c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8c4:	f000 faa1 	bl	800ae0a <__retarget_lock_release_recursive>
 800a8c8:	89ab      	ldrh	r3, [r5, #12]
 800a8ca:	065b      	lsls	r3, r3, #25
 800a8cc:	f53f af12 	bmi.w	800a6f4 <_vfiprintf_r+0x4c>
 800a8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d2:	e711      	b.n	800a6f8 <_vfiprintf_r+0x50>
 800a8d4:	ab03      	add	r3, sp, #12
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	462a      	mov	r2, r5
 800a8da:	4b09      	ldr	r3, [pc, #36]	; (800a900 <_vfiprintf_r+0x258>)
 800a8dc:	a904      	add	r1, sp, #16
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7ff fc7e 	bl	800a1e0 <_printf_i>
 800a8e4:	e7e4      	b.n	800a8b0 <_vfiprintf_r+0x208>
 800a8e6:	bf00      	nop
 800a8e8:	0800b59c 	.word	0x0800b59c
 800a8ec:	0800b5bc 	.word	0x0800b5bc
 800a8f0:	0800b57c 	.word	0x0800b57c
 800a8f4:	0800b40c 	.word	0x0800b40c
 800a8f8:	0800b416 	.word	0x0800b416
 800a8fc:	00000000 	.word	0x00000000
 800a900:	0800a683 	.word	0x0800a683
 800a904:	0800b412 	.word	0x0800b412

0800a908 <__swbuf_r>:
 800a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90a:	460e      	mov	r6, r1
 800a90c:	4614      	mov	r4, r2
 800a90e:	4605      	mov	r5, r0
 800a910:	b118      	cbz	r0, 800a91a <__swbuf_r+0x12>
 800a912:	6983      	ldr	r3, [r0, #24]
 800a914:	b90b      	cbnz	r3, 800a91a <__swbuf_r+0x12>
 800a916:	f000 f9d9 	bl	800accc <__sinit>
 800a91a:	4b21      	ldr	r3, [pc, #132]	; (800a9a0 <__swbuf_r+0x98>)
 800a91c:	429c      	cmp	r4, r3
 800a91e:	d12b      	bne.n	800a978 <__swbuf_r+0x70>
 800a920:	686c      	ldr	r4, [r5, #4]
 800a922:	69a3      	ldr	r3, [r4, #24]
 800a924:	60a3      	str	r3, [r4, #8]
 800a926:	89a3      	ldrh	r3, [r4, #12]
 800a928:	071a      	lsls	r2, r3, #28
 800a92a:	d52f      	bpl.n	800a98c <__swbuf_r+0x84>
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	b36b      	cbz	r3, 800a98c <__swbuf_r+0x84>
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	6820      	ldr	r0, [r4, #0]
 800a934:	1ac0      	subs	r0, r0, r3
 800a936:	6963      	ldr	r3, [r4, #20]
 800a938:	b2f6      	uxtb	r6, r6
 800a93a:	4283      	cmp	r3, r0
 800a93c:	4637      	mov	r7, r6
 800a93e:	dc04      	bgt.n	800a94a <__swbuf_r+0x42>
 800a940:	4621      	mov	r1, r4
 800a942:	4628      	mov	r0, r5
 800a944:	f000 f92e 	bl	800aba4 <_fflush_r>
 800a948:	bb30      	cbnz	r0, 800a998 <__swbuf_r+0x90>
 800a94a:	68a3      	ldr	r3, [r4, #8]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	60a3      	str	r3, [r4, #8]
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	1c5a      	adds	r2, r3, #1
 800a954:	6022      	str	r2, [r4, #0]
 800a956:	701e      	strb	r6, [r3, #0]
 800a958:	6963      	ldr	r3, [r4, #20]
 800a95a:	3001      	adds	r0, #1
 800a95c:	4283      	cmp	r3, r0
 800a95e:	d004      	beq.n	800a96a <__swbuf_r+0x62>
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	07db      	lsls	r3, r3, #31
 800a964:	d506      	bpl.n	800a974 <__swbuf_r+0x6c>
 800a966:	2e0a      	cmp	r6, #10
 800a968:	d104      	bne.n	800a974 <__swbuf_r+0x6c>
 800a96a:	4621      	mov	r1, r4
 800a96c:	4628      	mov	r0, r5
 800a96e:	f000 f919 	bl	800aba4 <_fflush_r>
 800a972:	b988      	cbnz	r0, 800a998 <__swbuf_r+0x90>
 800a974:	4638      	mov	r0, r7
 800a976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a978:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <__swbuf_r+0x9c>)
 800a97a:	429c      	cmp	r4, r3
 800a97c:	d101      	bne.n	800a982 <__swbuf_r+0x7a>
 800a97e:	68ac      	ldr	r4, [r5, #8]
 800a980:	e7cf      	b.n	800a922 <__swbuf_r+0x1a>
 800a982:	4b09      	ldr	r3, [pc, #36]	; (800a9a8 <__swbuf_r+0xa0>)
 800a984:	429c      	cmp	r4, r3
 800a986:	bf08      	it	eq
 800a988:	68ec      	ldreq	r4, [r5, #12]
 800a98a:	e7ca      	b.n	800a922 <__swbuf_r+0x1a>
 800a98c:	4621      	mov	r1, r4
 800a98e:	4628      	mov	r0, r5
 800a990:	f000 f80c 	bl	800a9ac <__swsetup_r>
 800a994:	2800      	cmp	r0, #0
 800a996:	d0cb      	beq.n	800a930 <__swbuf_r+0x28>
 800a998:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a99c:	e7ea      	b.n	800a974 <__swbuf_r+0x6c>
 800a99e:	bf00      	nop
 800a9a0:	0800b59c 	.word	0x0800b59c
 800a9a4:	0800b5bc 	.word	0x0800b5bc
 800a9a8:	0800b57c 	.word	0x0800b57c

0800a9ac <__swsetup_r>:
 800a9ac:	4b32      	ldr	r3, [pc, #200]	; (800aa78 <__swsetup_r+0xcc>)
 800a9ae:	b570      	push	{r4, r5, r6, lr}
 800a9b0:	681d      	ldr	r5, [r3, #0]
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	b125      	cbz	r5, 800a9c2 <__swsetup_r+0x16>
 800a9b8:	69ab      	ldr	r3, [r5, #24]
 800a9ba:	b913      	cbnz	r3, 800a9c2 <__swsetup_r+0x16>
 800a9bc:	4628      	mov	r0, r5
 800a9be:	f000 f985 	bl	800accc <__sinit>
 800a9c2:	4b2e      	ldr	r3, [pc, #184]	; (800aa7c <__swsetup_r+0xd0>)
 800a9c4:	429c      	cmp	r4, r3
 800a9c6:	d10f      	bne.n	800a9e8 <__swsetup_r+0x3c>
 800a9c8:	686c      	ldr	r4, [r5, #4]
 800a9ca:	89a3      	ldrh	r3, [r4, #12]
 800a9cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9d0:	0719      	lsls	r1, r3, #28
 800a9d2:	d42c      	bmi.n	800aa2e <__swsetup_r+0x82>
 800a9d4:	06dd      	lsls	r5, r3, #27
 800a9d6:	d411      	bmi.n	800a9fc <__swsetup_r+0x50>
 800a9d8:	2309      	movs	r3, #9
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9e0:	81a3      	strh	r3, [r4, #12]
 800a9e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9e6:	e03e      	b.n	800aa66 <__swsetup_r+0xba>
 800a9e8:	4b25      	ldr	r3, [pc, #148]	; (800aa80 <__swsetup_r+0xd4>)
 800a9ea:	429c      	cmp	r4, r3
 800a9ec:	d101      	bne.n	800a9f2 <__swsetup_r+0x46>
 800a9ee:	68ac      	ldr	r4, [r5, #8]
 800a9f0:	e7eb      	b.n	800a9ca <__swsetup_r+0x1e>
 800a9f2:	4b24      	ldr	r3, [pc, #144]	; (800aa84 <__swsetup_r+0xd8>)
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	bf08      	it	eq
 800a9f8:	68ec      	ldreq	r4, [r5, #12]
 800a9fa:	e7e6      	b.n	800a9ca <__swsetup_r+0x1e>
 800a9fc:	0758      	lsls	r0, r3, #29
 800a9fe:	d512      	bpl.n	800aa26 <__swsetup_r+0x7a>
 800aa00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa02:	b141      	cbz	r1, 800aa16 <__swsetup_r+0x6a>
 800aa04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa08:	4299      	cmp	r1, r3
 800aa0a:	d002      	beq.n	800aa12 <__swsetup_r+0x66>
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f7ff fdab 	bl	800a568 <_free_r>
 800aa12:	2300      	movs	r3, #0
 800aa14:	6363      	str	r3, [r4, #52]	; 0x34
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa1c:	81a3      	strh	r3, [r4, #12]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	6063      	str	r3, [r4, #4]
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	f043 0308 	orr.w	r3, r3, #8
 800aa2c:	81a3      	strh	r3, [r4, #12]
 800aa2e:	6923      	ldr	r3, [r4, #16]
 800aa30:	b94b      	cbnz	r3, 800aa46 <__swsetup_r+0x9a>
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa3c:	d003      	beq.n	800aa46 <__swsetup_r+0x9a>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4630      	mov	r0, r6
 800aa42:	f000 fa07 	bl	800ae54 <__smakebuf_r>
 800aa46:	89a0      	ldrh	r0, [r4, #12]
 800aa48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa4c:	f010 0301 	ands.w	r3, r0, #1
 800aa50:	d00a      	beq.n	800aa68 <__swsetup_r+0xbc>
 800aa52:	2300      	movs	r3, #0
 800aa54:	60a3      	str	r3, [r4, #8]
 800aa56:	6963      	ldr	r3, [r4, #20]
 800aa58:	425b      	negs	r3, r3
 800aa5a:	61a3      	str	r3, [r4, #24]
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	b943      	cbnz	r3, 800aa72 <__swsetup_r+0xc6>
 800aa60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa64:	d1ba      	bne.n	800a9dc <__swsetup_r+0x30>
 800aa66:	bd70      	pop	{r4, r5, r6, pc}
 800aa68:	0781      	lsls	r1, r0, #30
 800aa6a:	bf58      	it	pl
 800aa6c:	6963      	ldrpl	r3, [r4, #20]
 800aa6e:	60a3      	str	r3, [r4, #8]
 800aa70:	e7f4      	b.n	800aa5c <__swsetup_r+0xb0>
 800aa72:	2000      	movs	r0, #0
 800aa74:	e7f7      	b.n	800aa66 <__swsetup_r+0xba>
 800aa76:	bf00      	nop
 800aa78:	20000030 	.word	0x20000030
 800aa7c:	0800b59c 	.word	0x0800b59c
 800aa80:	0800b5bc 	.word	0x0800b5bc
 800aa84:	0800b57c 	.word	0x0800b57c

0800aa88 <abort>:
 800aa88:	b508      	push	{r3, lr}
 800aa8a:	2006      	movs	r0, #6
 800aa8c:	f000 fa52 	bl	800af34 <raise>
 800aa90:	2001      	movs	r0, #1
 800aa92:	f7f7 fa7d 	bl	8001f90 <_exit>
	...

0800aa98 <__sflush_r>:
 800aa98:	898a      	ldrh	r2, [r1, #12]
 800aa9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	0710      	lsls	r0, r2, #28
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	d458      	bmi.n	800ab58 <__sflush_r+0xc0>
 800aaa6:	684b      	ldr	r3, [r1, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dc05      	bgt.n	800aab8 <__sflush_r+0x20>
 800aaac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	dc02      	bgt.n	800aab8 <__sflush_r+0x20>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaba:	2e00      	cmp	r6, #0
 800aabc:	d0f9      	beq.n	800aab2 <__sflush_r+0x1a>
 800aabe:	2300      	movs	r3, #0
 800aac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aac4:	682f      	ldr	r7, [r5, #0]
 800aac6:	602b      	str	r3, [r5, #0]
 800aac8:	d032      	beq.n	800ab30 <__sflush_r+0x98>
 800aaca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	075a      	lsls	r2, r3, #29
 800aad0:	d505      	bpl.n	800aade <__sflush_r+0x46>
 800aad2:	6863      	ldr	r3, [r4, #4]
 800aad4:	1ac0      	subs	r0, r0, r3
 800aad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aad8:	b10b      	cbz	r3, 800aade <__sflush_r+0x46>
 800aada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aadc:	1ac0      	subs	r0, r0, r3
 800aade:	2300      	movs	r3, #0
 800aae0:	4602      	mov	r2, r0
 800aae2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aae4:	6a21      	ldr	r1, [r4, #32]
 800aae6:	4628      	mov	r0, r5
 800aae8:	47b0      	blx	r6
 800aaea:	1c43      	adds	r3, r0, #1
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	d106      	bne.n	800aafe <__sflush_r+0x66>
 800aaf0:	6829      	ldr	r1, [r5, #0]
 800aaf2:	291d      	cmp	r1, #29
 800aaf4:	d82c      	bhi.n	800ab50 <__sflush_r+0xb8>
 800aaf6:	4a2a      	ldr	r2, [pc, #168]	; (800aba0 <__sflush_r+0x108>)
 800aaf8:	40ca      	lsrs	r2, r1
 800aafa:	07d6      	lsls	r6, r2, #31
 800aafc:	d528      	bpl.n	800ab50 <__sflush_r+0xb8>
 800aafe:	2200      	movs	r2, #0
 800ab00:	6062      	str	r2, [r4, #4]
 800ab02:	04d9      	lsls	r1, r3, #19
 800ab04:	6922      	ldr	r2, [r4, #16]
 800ab06:	6022      	str	r2, [r4, #0]
 800ab08:	d504      	bpl.n	800ab14 <__sflush_r+0x7c>
 800ab0a:	1c42      	adds	r2, r0, #1
 800ab0c:	d101      	bne.n	800ab12 <__sflush_r+0x7a>
 800ab0e:	682b      	ldr	r3, [r5, #0]
 800ab10:	b903      	cbnz	r3, 800ab14 <__sflush_r+0x7c>
 800ab12:	6560      	str	r0, [r4, #84]	; 0x54
 800ab14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab16:	602f      	str	r7, [r5, #0]
 800ab18:	2900      	cmp	r1, #0
 800ab1a:	d0ca      	beq.n	800aab2 <__sflush_r+0x1a>
 800ab1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab20:	4299      	cmp	r1, r3
 800ab22:	d002      	beq.n	800ab2a <__sflush_r+0x92>
 800ab24:	4628      	mov	r0, r5
 800ab26:	f7ff fd1f 	bl	800a568 <_free_r>
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	6360      	str	r0, [r4, #52]	; 0x34
 800ab2e:	e7c1      	b.n	800aab4 <__sflush_r+0x1c>
 800ab30:	6a21      	ldr	r1, [r4, #32]
 800ab32:	2301      	movs	r3, #1
 800ab34:	4628      	mov	r0, r5
 800ab36:	47b0      	blx	r6
 800ab38:	1c41      	adds	r1, r0, #1
 800ab3a:	d1c7      	bne.n	800aacc <__sflush_r+0x34>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d0c4      	beq.n	800aacc <__sflush_r+0x34>
 800ab42:	2b1d      	cmp	r3, #29
 800ab44:	d001      	beq.n	800ab4a <__sflush_r+0xb2>
 800ab46:	2b16      	cmp	r3, #22
 800ab48:	d101      	bne.n	800ab4e <__sflush_r+0xb6>
 800ab4a:	602f      	str	r7, [r5, #0]
 800ab4c:	e7b1      	b.n	800aab2 <__sflush_r+0x1a>
 800ab4e:	89a3      	ldrh	r3, [r4, #12]
 800ab50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab54:	81a3      	strh	r3, [r4, #12]
 800ab56:	e7ad      	b.n	800aab4 <__sflush_r+0x1c>
 800ab58:	690f      	ldr	r7, [r1, #16]
 800ab5a:	2f00      	cmp	r7, #0
 800ab5c:	d0a9      	beq.n	800aab2 <__sflush_r+0x1a>
 800ab5e:	0793      	lsls	r3, r2, #30
 800ab60:	680e      	ldr	r6, [r1, #0]
 800ab62:	bf08      	it	eq
 800ab64:	694b      	ldreq	r3, [r1, #20]
 800ab66:	600f      	str	r7, [r1, #0]
 800ab68:	bf18      	it	ne
 800ab6a:	2300      	movne	r3, #0
 800ab6c:	eba6 0807 	sub.w	r8, r6, r7
 800ab70:	608b      	str	r3, [r1, #8]
 800ab72:	f1b8 0f00 	cmp.w	r8, #0
 800ab76:	dd9c      	ble.n	800aab2 <__sflush_r+0x1a>
 800ab78:	6a21      	ldr	r1, [r4, #32]
 800ab7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab7c:	4643      	mov	r3, r8
 800ab7e:	463a      	mov	r2, r7
 800ab80:	4628      	mov	r0, r5
 800ab82:	47b0      	blx	r6
 800ab84:	2800      	cmp	r0, #0
 800ab86:	dc06      	bgt.n	800ab96 <__sflush_r+0xfe>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab8e:	81a3      	strh	r3, [r4, #12]
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab94:	e78e      	b.n	800aab4 <__sflush_r+0x1c>
 800ab96:	4407      	add	r7, r0
 800ab98:	eba8 0800 	sub.w	r8, r8, r0
 800ab9c:	e7e9      	b.n	800ab72 <__sflush_r+0xda>
 800ab9e:	bf00      	nop
 800aba0:	20400001 	.word	0x20400001

0800aba4 <_fflush_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	690b      	ldr	r3, [r1, #16]
 800aba8:	4605      	mov	r5, r0
 800abaa:	460c      	mov	r4, r1
 800abac:	b913      	cbnz	r3, 800abb4 <_fflush_r+0x10>
 800abae:	2500      	movs	r5, #0
 800abb0:	4628      	mov	r0, r5
 800abb2:	bd38      	pop	{r3, r4, r5, pc}
 800abb4:	b118      	cbz	r0, 800abbe <_fflush_r+0x1a>
 800abb6:	6983      	ldr	r3, [r0, #24]
 800abb8:	b90b      	cbnz	r3, 800abbe <_fflush_r+0x1a>
 800abba:	f000 f887 	bl	800accc <__sinit>
 800abbe:	4b14      	ldr	r3, [pc, #80]	; (800ac10 <_fflush_r+0x6c>)
 800abc0:	429c      	cmp	r4, r3
 800abc2:	d11b      	bne.n	800abfc <_fflush_r+0x58>
 800abc4:	686c      	ldr	r4, [r5, #4]
 800abc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d0ef      	beq.n	800abae <_fflush_r+0xa>
 800abce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abd0:	07d0      	lsls	r0, r2, #31
 800abd2:	d404      	bmi.n	800abde <_fflush_r+0x3a>
 800abd4:	0599      	lsls	r1, r3, #22
 800abd6:	d402      	bmi.n	800abde <_fflush_r+0x3a>
 800abd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abda:	f000 f915 	bl	800ae08 <__retarget_lock_acquire_recursive>
 800abde:	4628      	mov	r0, r5
 800abe0:	4621      	mov	r1, r4
 800abe2:	f7ff ff59 	bl	800aa98 <__sflush_r>
 800abe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abe8:	07da      	lsls	r2, r3, #31
 800abea:	4605      	mov	r5, r0
 800abec:	d4e0      	bmi.n	800abb0 <_fflush_r+0xc>
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	059b      	lsls	r3, r3, #22
 800abf2:	d4dd      	bmi.n	800abb0 <_fflush_r+0xc>
 800abf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abf6:	f000 f908 	bl	800ae0a <__retarget_lock_release_recursive>
 800abfa:	e7d9      	b.n	800abb0 <_fflush_r+0xc>
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <_fflush_r+0x70>)
 800abfe:	429c      	cmp	r4, r3
 800ac00:	d101      	bne.n	800ac06 <_fflush_r+0x62>
 800ac02:	68ac      	ldr	r4, [r5, #8]
 800ac04:	e7df      	b.n	800abc6 <_fflush_r+0x22>
 800ac06:	4b04      	ldr	r3, [pc, #16]	; (800ac18 <_fflush_r+0x74>)
 800ac08:	429c      	cmp	r4, r3
 800ac0a:	bf08      	it	eq
 800ac0c:	68ec      	ldreq	r4, [r5, #12]
 800ac0e:	e7da      	b.n	800abc6 <_fflush_r+0x22>
 800ac10:	0800b59c 	.word	0x0800b59c
 800ac14:	0800b5bc 	.word	0x0800b5bc
 800ac18:	0800b57c 	.word	0x0800b57c

0800ac1c <std>:
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	b510      	push	{r4, lr}
 800ac20:	4604      	mov	r4, r0
 800ac22:	e9c0 3300 	strd	r3, r3, [r0]
 800ac26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac2a:	6083      	str	r3, [r0, #8]
 800ac2c:	8181      	strh	r1, [r0, #12]
 800ac2e:	6643      	str	r3, [r0, #100]	; 0x64
 800ac30:	81c2      	strh	r2, [r0, #14]
 800ac32:	6183      	str	r3, [r0, #24]
 800ac34:	4619      	mov	r1, r3
 800ac36:	2208      	movs	r2, #8
 800ac38:	305c      	adds	r0, #92	; 0x5c
 800ac3a:	f7fd f9b7 	bl	8007fac <memset>
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <std+0x38>)
 800ac40:	6263      	str	r3, [r4, #36]	; 0x24
 800ac42:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <std+0x3c>)
 800ac44:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac46:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <std+0x40>)
 800ac48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac4a:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <std+0x44>)
 800ac4c:	6224      	str	r4, [r4, #32]
 800ac4e:	6323      	str	r3, [r4, #48]	; 0x30
 800ac50:	bd10      	pop	{r4, pc}
 800ac52:	bf00      	nop
 800ac54:	0800af6d 	.word	0x0800af6d
 800ac58:	0800af8f 	.word	0x0800af8f
 800ac5c:	0800afc7 	.word	0x0800afc7
 800ac60:	0800afeb 	.word	0x0800afeb

0800ac64 <_cleanup_r>:
 800ac64:	4901      	ldr	r1, [pc, #4]	; (800ac6c <_cleanup_r+0x8>)
 800ac66:	f000 b8af 	b.w	800adc8 <_fwalk_reent>
 800ac6a:	bf00      	nop
 800ac6c:	0800aba5 	.word	0x0800aba5

0800ac70 <__sfmoreglue>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	1e4a      	subs	r2, r1, #1
 800ac74:	2568      	movs	r5, #104	; 0x68
 800ac76:	4355      	muls	r5, r2
 800ac78:	460e      	mov	r6, r1
 800ac7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac7e:	f7ff f88b 	bl	8009d98 <_malloc_r>
 800ac82:	4604      	mov	r4, r0
 800ac84:	b140      	cbz	r0, 800ac98 <__sfmoreglue+0x28>
 800ac86:	2100      	movs	r1, #0
 800ac88:	e9c0 1600 	strd	r1, r6, [r0]
 800ac8c:	300c      	adds	r0, #12
 800ac8e:	60a0      	str	r0, [r4, #8]
 800ac90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac94:	f7fd f98a 	bl	8007fac <memset>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}

0800ac9c <__sfp_lock_acquire>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	; (800aca4 <__sfp_lock_acquire+0x8>)
 800ac9e:	f000 b8b3 	b.w	800ae08 <__retarget_lock_acquire_recursive>
 800aca2:	bf00      	nop
 800aca4:	20004388 	.word	0x20004388

0800aca8 <__sfp_lock_release>:
 800aca8:	4801      	ldr	r0, [pc, #4]	; (800acb0 <__sfp_lock_release+0x8>)
 800acaa:	f000 b8ae 	b.w	800ae0a <__retarget_lock_release_recursive>
 800acae:	bf00      	nop
 800acb0:	20004388 	.word	0x20004388

0800acb4 <__sinit_lock_acquire>:
 800acb4:	4801      	ldr	r0, [pc, #4]	; (800acbc <__sinit_lock_acquire+0x8>)
 800acb6:	f000 b8a7 	b.w	800ae08 <__retarget_lock_acquire_recursive>
 800acba:	bf00      	nop
 800acbc:	20004383 	.word	0x20004383

0800acc0 <__sinit_lock_release>:
 800acc0:	4801      	ldr	r0, [pc, #4]	; (800acc8 <__sinit_lock_release+0x8>)
 800acc2:	f000 b8a2 	b.w	800ae0a <__retarget_lock_release_recursive>
 800acc6:	bf00      	nop
 800acc8:	20004383 	.word	0x20004383

0800accc <__sinit>:
 800accc:	b510      	push	{r4, lr}
 800acce:	4604      	mov	r4, r0
 800acd0:	f7ff fff0 	bl	800acb4 <__sinit_lock_acquire>
 800acd4:	69a3      	ldr	r3, [r4, #24]
 800acd6:	b11b      	cbz	r3, 800ace0 <__sinit+0x14>
 800acd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acdc:	f7ff bff0 	b.w	800acc0 <__sinit_lock_release>
 800ace0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ace4:	6523      	str	r3, [r4, #80]	; 0x50
 800ace6:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <__sinit+0x68>)
 800ace8:	4a13      	ldr	r2, [pc, #76]	; (800ad38 <__sinit+0x6c>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	62a2      	str	r2, [r4, #40]	; 0x28
 800acee:	42a3      	cmp	r3, r4
 800acf0:	bf04      	itt	eq
 800acf2:	2301      	moveq	r3, #1
 800acf4:	61a3      	streq	r3, [r4, #24]
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 f820 	bl	800ad3c <__sfp>
 800acfc:	6060      	str	r0, [r4, #4]
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 f81c 	bl	800ad3c <__sfp>
 800ad04:	60a0      	str	r0, [r4, #8]
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 f818 	bl	800ad3c <__sfp>
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	60e0      	str	r0, [r4, #12]
 800ad10:	2104      	movs	r1, #4
 800ad12:	6860      	ldr	r0, [r4, #4]
 800ad14:	f7ff ff82 	bl	800ac1c <std>
 800ad18:	68a0      	ldr	r0, [r4, #8]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	2109      	movs	r1, #9
 800ad1e:	f7ff ff7d 	bl	800ac1c <std>
 800ad22:	68e0      	ldr	r0, [r4, #12]
 800ad24:	2202      	movs	r2, #2
 800ad26:	2112      	movs	r1, #18
 800ad28:	f7ff ff78 	bl	800ac1c <std>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	61a3      	str	r3, [r4, #24]
 800ad30:	e7d2      	b.n	800acd8 <__sinit+0xc>
 800ad32:	bf00      	nop
 800ad34:	0800b1a4 	.word	0x0800b1a4
 800ad38:	0800ac65 	.word	0x0800ac65

0800ad3c <__sfp>:
 800ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3e:	4607      	mov	r7, r0
 800ad40:	f7ff ffac 	bl	800ac9c <__sfp_lock_acquire>
 800ad44:	4b1e      	ldr	r3, [pc, #120]	; (800adc0 <__sfp+0x84>)
 800ad46:	681e      	ldr	r6, [r3, #0]
 800ad48:	69b3      	ldr	r3, [r6, #24]
 800ad4a:	b913      	cbnz	r3, 800ad52 <__sfp+0x16>
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	f7ff ffbd 	bl	800accc <__sinit>
 800ad52:	3648      	adds	r6, #72	; 0x48
 800ad54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	d503      	bpl.n	800ad64 <__sfp+0x28>
 800ad5c:	6833      	ldr	r3, [r6, #0]
 800ad5e:	b30b      	cbz	r3, 800ada4 <__sfp+0x68>
 800ad60:	6836      	ldr	r6, [r6, #0]
 800ad62:	e7f7      	b.n	800ad54 <__sfp+0x18>
 800ad64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad68:	b9d5      	cbnz	r5, 800ada0 <__sfp+0x64>
 800ad6a:	4b16      	ldr	r3, [pc, #88]	; (800adc4 <__sfp+0x88>)
 800ad6c:	60e3      	str	r3, [r4, #12]
 800ad6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad72:	6665      	str	r5, [r4, #100]	; 0x64
 800ad74:	f000 f847 	bl	800ae06 <__retarget_lock_init_recursive>
 800ad78:	f7ff ff96 	bl	800aca8 <__sfp_lock_release>
 800ad7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad84:	6025      	str	r5, [r4, #0]
 800ad86:	61a5      	str	r5, [r4, #24]
 800ad88:	2208      	movs	r2, #8
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad90:	f7fd f90c 	bl	8007fac <memset>
 800ad94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada0:	3468      	adds	r4, #104	; 0x68
 800ada2:	e7d9      	b.n	800ad58 <__sfp+0x1c>
 800ada4:	2104      	movs	r1, #4
 800ada6:	4638      	mov	r0, r7
 800ada8:	f7ff ff62 	bl	800ac70 <__sfmoreglue>
 800adac:	4604      	mov	r4, r0
 800adae:	6030      	str	r0, [r6, #0]
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d1d5      	bne.n	800ad60 <__sfp+0x24>
 800adb4:	f7ff ff78 	bl	800aca8 <__sfp_lock_release>
 800adb8:	230c      	movs	r3, #12
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	e7ee      	b.n	800ad9c <__sfp+0x60>
 800adbe:	bf00      	nop
 800adc0:	0800b1a4 	.word	0x0800b1a4
 800adc4:	ffff0001 	.word	0xffff0001

0800adc8 <_fwalk_reent>:
 800adc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adcc:	4606      	mov	r6, r0
 800adce:	4688      	mov	r8, r1
 800add0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800add4:	2700      	movs	r7, #0
 800add6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adda:	f1b9 0901 	subs.w	r9, r9, #1
 800adde:	d505      	bpl.n	800adec <_fwalk_reent+0x24>
 800ade0:	6824      	ldr	r4, [r4, #0]
 800ade2:	2c00      	cmp	r4, #0
 800ade4:	d1f7      	bne.n	800add6 <_fwalk_reent+0xe>
 800ade6:	4638      	mov	r0, r7
 800ade8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adec:	89ab      	ldrh	r3, [r5, #12]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d907      	bls.n	800ae02 <_fwalk_reent+0x3a>
 800adf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adf6:	3301      	adds	r3, #1
 800adf8:	d003      	beq.n	800ae02 <_fwalk_reent+0x3a>
 800adfa:	4629      	mov	r1, r5
 800adfc:	4630      	mov	r0, r6
 800adfe:	47c0      	blx	r8
 800ae00:	4307      	orrs	r7, r0
 800ae02:	3568      	adds	r5, #104	; 0x68
 800ae04:	e7e9      	b.n	800adda <_fwalk_reent+0x12>

0800ae06 <__retarget_lock_init_recursive>:
 800ae06:	4770      	bx	lr

0800ae08 <__retarget_lock_acquire_recursive>:
 800ae08:	4770      	bx	lr

0800ae0a <__retarget_lock_release_recursive>:
 800ae0a:	4770      	bx	lr

0800ae0c <__swhatbuf_r>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	460e      	mov	r6, r1
 800ae10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae14:	2900      	cmp	r1, #0
 800ae16:	b096      	sub	sp, #88	; 0x58
 800ae18:	4614      	mov	r4, r2
 800ae1a:	461d      	mov	r5, r3
 800ae1c:	da07      	bge.n	800ae2e <__swhatbuf_r+0x22>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	89b3      	ldrh	r3, [r6, #12]
 800ae24:	061a      	lsls	r2, r3, #24
 800ae26:	d410      	bmi.n	800ae4a <__swhatbuf_r+0x3e>
 800ae28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae2c:	e00e      	b.n	800ae4c <__swhatbuf_r+0x40>
 800ae2e:	466a      	mov	r2, sp
 800ae30:	f000 f902 	bl	800b038 <_fstat_r>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	dbf2      	blt.n	800ae1e <__swhatbuf_r+0x12>
 800ae38:	9a01      	ldr	r2, [sp, #4]
 800ae3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae42:	425a      	negs	r2, r3
 800ae44:	415a      	adcs	r2, r3
 800ae46:	602a      	str	r2, [r5, #0]
 800ae48:	e7ee      	b.n	800ae28 <__swhatbuf_r+0x1c>
 800ae4a:	2340      	movs	r3, #64	; 0x40
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	6023      	str	r3, [r4, #0]
 800ae50:	b016      	add	sp, #88	; 0x58
 800ae52:	bd70      	pop	{r4, r5, r6, pc}

0800ae54 <__smakebuf_r>:
 800ae54:	898b      	ldrh	r3, [r1, #12]
 800ae56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae58:	079d      	lsls	r5, r3, #30
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	d507      	bpl.n	800ae70 <__smakebuf_r+0x1c>
 800ae60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	6123      	str	r3, [r4, #16]
 800ae68:	2301      	movs	r3, #1
 800ae6a:	6163      	str	r3, [r4, #20]
 800ae6c:	b002      	add	sp, #8
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}
 800ae70:	ab01      	add	r3, sp, #4
 800ae72:	466a      	mov	r2, sp
 800ae74:	f7ff ffca 	bl	800ae0c <__swhatbuf_r>
 800ae78:	9900      	ldr	r1, [sp, #0]
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7fe ff8b 	bl	8009d98 <_malloc_r>
 800ae82:	b948      	cbnz	r0, 800ae98 <__smakebuf_r+0x44>
 800ae84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae88:	059a      	lsls	r2, r3, #22
 800ae8a:	d4ef      	bmi.n	800ae6c <__smakebuf_r+0x18>
 800ae8c:	f023 0303 	bic.w	r3, r3, #3
 800ae90:	f043 0302 	orr.w	r3, r3, #2
 800ae94:	81a3      	strh	r3, [r4, #12]
 800ae96:	e7e3      	b.n	800ae60 <__smakebuf_r+0xc>
 800ae98:	4b0d      	ldr	r3, [pc, #52]	; (800aed0 <__smakebuf_r+0x7c>)
 800ae9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	6020      	str	r0, [r4, #0]
 800aea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aea4:	81a3      	strh	r3, [r4, #12]
 800aea6:	9b00      	ldr	r3, [sp, #0]
 800aea8:	6163      	str	r3, [r4, #20]
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	6120      	str	r0, [r4, #16]
 800aeae:	b15b      	cbz	r3, 800aec8 <__smakebuf_r+0x74>
 800aeb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f000 f8d1 	bl	800b05c <_isatty_r>
 800aeba:	b128      	cbz	r0, 800aec8 <__smakebuf_r+0x74>
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	f023 0303 	bic.w	r3, r3, #3
 800aec2:	f043 0301 	orr.w	r3, r3, #1
 800aec6:	81a3      	strh	r3, [r4, #12]
 800aec8:	89a0      	ldrh	r0, [r4, #12]
 800aeca:	4305      	orrs	r5, r0
 800aecc:	81a5      	strh	r5, [r4, #12]
 800aece:	e7cd      	b.n	800ae6c <__smakebuf_r+0x18>
 800aed0:	0800ac65 	.word	0x0800ac65

0800aed4 <_malloc_usable_size_r>:
 800aed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed8:	1f18      	subs	r0, r3, #4
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	bfbc      	itt	lt
 800aede:	580b      	ldrlt	r3, [r1, r0]
 800aee0:	18c0      	addlt	r0, r0, r3
 800aee2:	4770      	bx	lr

0800aee4 <_raise_r>:
 800aee4:	291f      	cmp	r1, #31
 800aee6:	b538      	push	{r3, r4, r5, lr}
 800aee8:	4604      	mov	r4, r0
 800aeea:	460d      	mov	r5, r1
 800aeec:	d904      	bls.n	800aef8 <_raise_r+0x14>
 800aeee:	2316      	movs	r3, #22
 800aef0:	6003      	str	r3, [r0, #0]
 800aef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aefa:	b112      	cbz	r2, 800af02 <_raise_r+0x1e>
 800aefc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af00:	b94b      	cbnz	r3, 800af16 <_raise_r+0x32>
 800af02:	4620      	mov	r0, r4
 800af04:	f000 f830 	bl	800af68 <_getpid_r>
 800af08:	462a      	mov	r2, r5
 800af0a:	4601      	mov	r1, r0
 800af0c:	4620      	mov	r0, r4
 800af0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af12:	f000 b817 	b.w	800af44 <_kill_r>
 800af16:	2b01      	cmp	r3, #1
 800af18:	d00a      	beq.n	800af30 <_raise_r+0x4c>
 800af1a:	1c59      	adds	r1, r3, #1
 800af1c:	d103      	bne.n	800af26 <_raise_r+0x42>
 800af1e:	2316      	movs	r3, #22
 800af20:	6003      	str	r3, [r0, #0]
 800af22:	2001      	movs	r0, #1
 800af24:	e7e7      	b.n	800aef6 <_raise_r+0x12>
 800af26:	2400      	movs	r4, #0
 800af28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af2c:	4628      	mov	r0, r5
 800af2e:	4798      	blx	r3
 800af30:	2000      	movs	r0, #0
 800af32:	e7e0      	b.n	800aef6 <_raise_r+0x12>

0800af34 <raise>:
 800af34:	4b02      	ldr	r3, [pc, #8]	; (800af40 <raise+0xc>)
 800af36:	4601      	mov	r1, r0
 800af38:	6818      	ldr	r0, [r3, #0]
 800af3a:	f7ff bfd3 	b.w	800aee4 <_raise_r>
 800af3e:	bf00      	nop
 800af40:	20000030 	.word	0x20000030

0800af44 <_kill_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4d07      	ldr	r5, [pc, #28]	; (800af64 <_kill_r+0x20>)
 800af48:	2300      	movs	r3, #0
 800af4a:	4604      	mov	r4, r0
 800af4c:	4608      	mov	r0, r1
 800af4e:	4611      	mov	r1, r2
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	f7f7 f80d 	bl	8001f70 <_kill>
 800af56:	1c43      	adds	r3, r0, #1
 800af58:	d102      	bne.n	800af60 <_kill_r+0x1c>
 800af5a:	682b      	ldr	r3, [r5, #0]
 800af5c:	b103      	cbz	r3, 800af60 <_kill_r+0x1c>
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	bd38      	pop	{r3, r4, r5, pc}
 800af62:	bf00      	nop
 800af64:	2000437c 	.word	0x2000437c

0800af68 <_getpid_r>:
 800af68:	f7f6 bffa 	b.w	8001f60 <_getpid>

0800af6c <__sread>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	460c      	mov	r4, r1
 800af70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af74:	f000 f894 	bl	800b0a0 <_read_r>
 800af78:	2800      	cmp	r0, #0
 800af7a:	bfab      	itete	ge
 800af7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af7e:	89a3      	ldrhlt	r3, [r4, #12]
 800af80:	181b      	addge	r3, r3, r0
 800af82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af86:	bfac      	ite	ge
 800af88:	6563      	strge	r3, [r4, #84]	; 0x54
 800af8a:	81a3      	strhlt	r3, [r4, #12]
 800af8c:	bd10      	pop	{r4, pc}

0800af8e <__swrite>:
 800af8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af92:	461f      	mov	r7, r3
 800af94:	898b      	ldrh	r3, [r1, #12]
 800af96:	05db      	lsls	r3, r3, #23
 800af98:	4605      	mov	r5, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	4616      	mov	r6, r2
 800af9e:	d505      	bpl.n	800afac <__swrite+0x1e>
 800afa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa4:	2302      	movs	r3, #2
 800afa6:	2200      	movs	r2, #0
 800afa8:	f000 f868 	bl	800b07c <_lseek_r>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	4632      	mov	r2, r6
 800afba:	463b      	mov	r3, r7
 800afbc:	4628      	mov	r0, r5
 800afbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afc2:	f000 b817 	b.w	800aff4 <_write_r>

0800afc6 <__sseek>:
 800afc6:	b510      	push	{r4, lr}
 800afc8:	460c      	mov	r4, r1
 800afca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afce:	f000 f855 	bl	800b07c <_lseek_r>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	bf15      	itete	ne
 800afd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800afda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afe2:	81a3      	strheq	r3, [r4, #12]
 800afe4:	bf18      	it	ne
 800afe6:	81a3      	strhne	r3, [r4, #12]
 800afe8:	bd10      	pop	{r4, pc}

0800afea <__sclose>:
 800afea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afee:	f000 b813 	b.w	800b018 <_close_r>
	...

0800aff4 <_write_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	4d07      	ldr	r5, [pc, #28]	; (800b014 <_write_r+0x20>)
 800aff8:	4604      	mov	r4, r0
 800affa:	4608      	mov	r0, r1
 800affc:	4611      	mov	r1, r2
 800affe:	2200      	movs	r2, #0
 800b000:	602a      	str	r2, [r5, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	f7f6 ffeb 	bl	8001fde <_write>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <_write_r+0x1e>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b103      	cbz	r3, 800b012 <_write_r+0x1e>
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	2000437c 	.word	0x2000437c

0800b018 <_close_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4d06      	ldr	r5, [pc, #24]	; (800b034 <_close_r+0x1c>)
 800b01c:	2300      	movs	r3, #0
 800b01e:	4604      	mov	r4, r0
 800b020:	4608      	mov	r0, r1
 800b022:	602b      	str	r3, [r5, #0]
 800b024:	f7f6 fff7 	bl	8002016 <_close>
 800b028:	1c43      	adds	r3, r0, #1
 800b02a:	d102      	bne.n	800b032 <_close_r+0x1a>
 800b02c:	682b      	ldr	r3, [r5, #0]
 800b02e:	b103      	cbz	r3, 800b032 <_close_r+0x1a>
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	bd38      	pop	{r3, r4, r5, pc}
 800b034:	2000437c 	.word	0x2000437c

0800b038 <_fstat_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	4d07      	ldr	r5, [pc, #28]	; (800b058 <_fstat_r+0x20>)
 800b03c:	2300      	movs	r3, #0
 800b03e:	4604      	mov	r4, r0
 800b040:	4608      	mov	r0, r1
 800b042:	4611      	mov	r1, r2
 800b044:	602b      	str	r3, [r5, #0]
 800b046:	f7f6 fff2 	bl	800202e <_fstat>
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	d102      	bne.n	800b054 <_fstat_r+0x1c>
 800b04e:	682b      	ldr	r3, [r5, #0]
 800b050:	b103      	cbz	r3, 800b054 <_fstat_r+0x1c>
 800b052:	6023      	str	r3, [r4, #0]
 800b054:	bd38      	pop	{r3, r4, r5, pc}
 800b056:	bf00      	nop
 800b058:	2000437c 	.word	0x2000437c

0800b05c <_isatty_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4d06      	ldr	r5, [pc, #24]	; (800b078 <_isatty_r+0x1c>)
 800b060:	2300      	movs	r3, #0
 800b062:	4604      	mov	r4, r0
 800b064:	4608      	mov	r0, r1
 800b066:	602b      	str	r3, [r5, #0]
 800b068:	f7f6 fff1 	bl	800204e <_isatty>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d102      	bne.n	800b076 <_isatty_r+0x1a>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	b103      	cbz	r3, 800b076 <_isatty_r+0x1a>
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	2000437c 	.word	0x2000437c

0800b07c <_lseek_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4d07      	ldr	r5, [pc, #28]	; (800b09c <_lseek_r+0x20>)
 800b080:	4604      	mov	r4, r0
 800b082:	4608      	mov	r0, r1
 800b084:	4611      	mov	r1, r2
 800b086:	2200      	movs	r2, #0
 800b088:	602a      	str	r2, [r5, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	f7f6 ffea 	bl	8002064 <_lseek>
 800b090:	1c43      	adds	r3, r0, #1
 800b092:	d102      	bne.n	800b09a <_lseek_r+0x1e>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	b103      	cbz	r3, 800b09a <_lseek_r+0x1e>
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	2000437c 	.word	0x2000437c

0800b0a0 <_read_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4d07      	ldr	r5, [pc, #28]	; (800b0c0 <_read_r+0x20>)
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	602a      	str	r2, [r5, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f7f6 ff78 	bl	8001fa4 <_read>
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	d102      	bne.n	800b0be <_read_r+0x1e>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	b103      	cbz	r3, 800b0be <_read_r+0x1e>
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	2000437c 	.word	0x2000437c

0800b0c4 <_init>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	bf00      	nop
 800b0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ca:	bc08      	pop	{r3}
 800b0cc:	469e      	mov	lr, r3
 800b0ce:	4770      	bx	lr

0800b0d0 <_fini>:
 800b0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d2:	bf00      	nop
 800b0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d6:	bc08      	pop	{r3}
 800b0d8:	469e      	mov	lr, r3
 800b0da:	4770      	bx	lr
